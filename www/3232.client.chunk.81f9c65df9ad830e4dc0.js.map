{"version":3,"file":"3232.client.chunk.81f9c65df9ad830e4dc0.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+routedContent/dynamicRouteDetail/dynamicRouteDetail.component.ts","webpack://ng-universal-demo/./app/pages/+routedContent/dynamicRouteDetail/dynamicRouteDetail.component.html","webpack://ng-universal-demo/./app/pages/+routedContent/dynamicRoutes/dynamicRoutes.component.ts","webpack://ng-universal-demo/./app/pages/+routedContent/dynamicRoutes/dynamicRoutes.component.html","webpack://ng-universal-demo/./app/pages/+routedContent/routedContent.routes.ts","webpack://ng-universal-demo/./app/pages/+routedContent/routedContent.module.ts","webpack://ng-universal-demo/../../../src/common/authorize.decorator.ts","webpack://ng-universal-demo/../../../src/common/auth.guard.ts","webpack://ng-universal-demo/../../../src/common/componentRouteAuthorized.decorator.ts","webpack://ng-universal-demo/../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../router/src/decorators/componentRoute.decorator.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {FormGroup} from '@angular/forms';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\n\nimport {DynamicRoute, DynamicRouteModel, DynamicRoutesService} from '../../../services/dynamicRoutes';\n\n/**\n * Component used for editing dynamic route info\n */\n@Component(\n{\n    selector: 'dynamic-route-view',\n    templateUrl: 'dynamicRouteDetail.component.html',\n    // styleUrls: ['dynamicRouteDetail.component.scss'],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'new'})\n@Authorize('dynamicRouteDetail-page')\nexport class DynamicRouteDetailComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form for dynamic route\n     */\n    protected form: FormGroup<FormModelGroup<DynamicRoute>>;\n\n    //######################### constructor #########################\n    constructor(formModelBuilder: FormModelBuilder,\n                private _dynamicRoutes: DynamicRoutesService,\n                private _location: Location,)\n    {\n        this.form = formModelBuilder.build<DynamicRoute>(new DynamicRouteModel(null));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves dynamic route\n     */\n    protected async save(): Promise<void>\n    {\n        const value = this.form.value as Required<DynamicRoute>;\n\n        this._dynamicRoutes.addRoute(value);\n        this._location.back();\n    }\n}","<div>Dynamic route detail</div>\n\n<form [formGroup]=\"form\">\n    <div class=\"flex-row margin-top-big\">\n        <div class=\"flex-1 margin-right-big\">\n            <div class=\"form-group\">\n                <label class=\"control-label\">path</label>\n                <input class=\"form-control\" formControlName=\"path\">\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"control-label\">permission</label>\n                <input class=\"form-control\" formControlName=\"permission\">\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"control-label\">use resolver <input class=\"form-control\" type=\"checkbox\" formControlName=\"withResolver\"></label>\n            </div>\n        </div>\n\n        <div class=\"flex-1 margin-left-big\">\n            <div class=\"form-group\">\n                <label class=\"control-label\">template</label>\n                <input class=\"form-control\" formControlName=\"template\">\n            </div>\n        </div>\n    </div>\n\n    <div class=\"flex-row flex-end\">\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"save()\">\n            <span class=\"fas fa-save\"></span>\n            <span>save</span>\n        </button>\n    </div>\n</form>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {GridOptions} from '@anglr/grid';\n\n/**\n * Component used for displaying all registered dynamic routes\n */\n@Component(\n{\n    selector: 'dynamic-routes',\n    templateUrl: 'dynamicRoutes.component.html',\n    // styleUrls: ['dynamicRoutes.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'dynamicRoutes'})\n@Authorize('dynamicRoutes-page')\nexport class DynamicRoutesComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Represents options for grid\n     */\n    protected gridOptions: GridOptions;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        this.gridOptions =\n        {\n            autoInitialize: false,\n        };\n    }\n}","<div>Dynamic routes</div>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-primary\" type=\"button\" routerLink=\"../new\">\n        <span class=\"fas fa-plus\"></span>\n        <span>add</span>\n    </button>\n</div>\n\n<ng-grid #grid [gridOptions]=\"gridOptions\">\n    <basic-table-metadata>\n        <basic-table-column></basic-table-column>\n    </basic-table-metadata>\n</ng-grid>","import {DynamicRouteDetailComponent} from './dynamicRouteDetail/dynamicRouteDetail.component';\nimport {DynamicRoutesComponent} from './dynamicRoutes/dynamicRoutes.component';\n\nexport const components =\n[\n    DynamicRoutesComponent,\n    DynamicRouteDetailComponent,\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\n\nimport {components} from './routedContent.routes';\nimport {DisplayingFeatureModule, FormsFeatureModule, GridFeatureModule} from '../../modules';\n\n/**\n * Module for routed content application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        GridFeatureModule,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class RoutedContentModule\n{\n}","import {Injector} from '@angular/core';\nimport {Dictionary, isBlank, isString, PromiseOr} from '@jscrpt/common';\n\n/**\n * Extended type with authorization permission definition\n */\nexport interface AuthorizationDecoratedComponent\n{\n    /**\n     * Definition of permissions required for authorization for all routes\n     */\n    permissions?: AuthorizeOptions;\n\n    /**\n     * Route specific permissions, can be applied only for specific route, overrides `permissions`\n     */\n    routeSpecificPermissions?: Dictionary<AuthorizeOptions>;\n}\n\n/**\n * Options passed to `Authorize` decorator\n */\nexport interface AuthorizeOptions\n{\n    /**\n     * Name of permission or array of permissions that is requested for displaying component\n     */\n    permission: string|string[];\n\n    /**\n     * Indication that AND condition should be used instead of OR condition if multiple permissions are provided\n     */\n    andCondition?: boolean;\n\n    /**\n     * Indication that provided string is set of loggical operations among permission names, if this is true andCondition is ignored\n     */\n    conditionString?: boolean;\n\n    /**\n     * Callback for additional condition that is added to evaluation of permission\n     */\n    addCondition?: (injector: Injector) => PromiseOr<boolean>;\n}\n\n/**\n * Used for setting required permission name for authentication\n * @param permission - Name of requested permission, array of permission names or AuthorizeOptions that is used for displaying of component\n * @param route - If provided route specific permission will be created applied only to specified route\n */\nexport function Authorize(permission: string|string[]|AuthorizeOptions, route?: string)\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        let options: AuthorizeOptions;\n\n        if(isString(permission) || Array.isArray(permission))\n        {\n            options =\n            {\n                permission\n            };\n        }\n        else\n        {\n            options = permission;\n        }\n\n        const typedTarget = target as unknown as AuthorizationDecoratedComponent;\n\n        if(isBlank(route))\n        {\n            typedTarget.permissions = options;\n        }\n        else\n        {\n            typedTarget.routeSpecificPermissions ??= {};\n            typedTarget.routeSpecificPermissions[route] = options;\n        }\n\n        return target;\n    };\n}","import {Injectable, Injector} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, Router, UrlTree, UrlSegmentGroup} from '@angular/router';\nimport {isBlank, flatMapArray} from '@jscrpt/common';\n\nimport {AuthorizeOptions} from './authorize.decorator';\nimport {AuthenticationService} from './authentication.service';\nimport {AuthorizationDecoratedComponent} from './authorize.decorator';\nimport {evaluatePermissions} from '../misc/utils';\n\n/**\n * Routing guard that is used for authorization of user\n */\n@Injectable({providedIn: 'root'})\nexport class AuthGuard implements CanActivate\n{\n    //######################### constructor #########################\n    constructor(private _authSvc: AuthenticationService,\n                private _injector: Injector,\n                private _router: Router)\n    {\n    }\n\n    //######################### implementation of CanActivate #########################\n\n    /**\n     * Tests whether component can be activated\n     * @param next - Information about next coming route\n     */\n    public async canActivate(next: ActivatedRouteSnapshot) : Promise<boolean>\n    {\n        const component = next.component as unknown as AuthorizationDecoratedComponent;\n        let authOptions: AuthorizeOptions|undefined;\n\n        //route specific auth options\n        if(next.routeConfig?.path &&\n           component.routeSpecificPermissions?.[next.routeConfig.path])\n        {\n            authOptions = component.routeSpecificPermissions[next.routeConfig.path];\n        }\n        //common auth options\n        else if(component.permissions)\n        {\n            authOptions = component.permissions;\n        }\n        \n        if(!authOptions)\n        {\n            return true;\n        }\n\n        let addCondition: boolean = true;\n\n        //evaluate add condition\n        if(authOptions.addCondition)\n        {\n            addCondition = await authOptions.addCondition(this._injector);\n        }\n\n        const userIdentity = this._authSvc.userIdentity;\n\n        if(isBlank(userIdentity))\n        {\n            throw new Error('AuthenticationService must be initialized before first use of AuthGuard');\n        }\n\n        const authorized = evaluatePermissions(userIdentity.permissions,\n                                               authOptions.permission,\n                                               authOptions.andCondition ?? false,\n                                               authOptions.conditionString ?? false,\n                                               addCondition);\n\n        const urlSegmentGroup = new UrlSegmentGroup(flatMapArray(next.pathFromRoot.map(itm => itm.url)), {});\n        const urlTree = new UrlTree();\n        urlTree.root = urlSegmentGroup;\n        urlTree.queryParams = {};\n        const nextPath = this._router.serializeUrl(urlTree);\n\n        //user is authenticated and not authorized\n        if(!authorized && userIdentity.isAuthenticated)\n        {\n            this._authSvc.showAccessDenied();\n\n            return false;\n        }\n        //not authorized, not authenticated, not on login page\n        else if(!authorized && !userIdentity.isAuthenticated && !this._authSvc.isAuthPage(nextPath))\n        {\n            this._authSvc.showAuthPage();\n            \n            return false;\n        }\n\n        return true;\n    }\n}","import {ComponentRoute, ComponentRouteDefinition} from '@anglr/common/router';\n\nimport {AuthGuard} from './auth.guard';\n\n/**\n * Defines route for component on which is this decorator applied, automatically adds `AuthGuard`\n * @param route - Definition of route\n */\nexport function ComponentRouteAuthorized(route: ComponentRouteDefinition): ClassDecorator\n{\n    route.canActivate ??= [];\n\n    //adds auth guard if there is no one\n    if(route.canActivate.indexOf(AuthGuard) < 0)\n    {\n        route.canActivate.push(AuthGuard);\n    }\n\n    return ComponentRoute(route);\n}\n","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}"],"names":["DynamicRouteDetailComponent","constructor","formModelBuilder","_dynamicRoutes","_location","this","form","build","DynamicRouteModel","save","value","addRoute","back","i0","selectors","features","FormModelBuilder","decls","vars","consts","template","ctx","ComponentRouteAuthorized","path","Authorize","DynamicRoutesService","Location","DynamicRoutesComponent","gridOptions","autoInitialize","components","RoutedContentModule","DisplayingFeatureModule","FormsFeatureModule","GridFeatureModule","ModuleRoutes","permission","route","target","options","isString","Array","isArray","typedTarget","isBlank","permissions","routeSpecificPermissions","AuthGuard","_authSvc","_injector","_router","canActivate","next","component","authOptions","routeConfig","addCondition","userIdentity","Error","authorized","evaluatePermissions","andCondition","conditionString","urlSegmentGroup","UrlSegmentGroup","flatMapArray","pathFromRoot","map","itm","url","urlTree","UrlTree","root","queryParams","nextPath","serializeUrl","isAuthenticated","showAccessDenied","isAuthPage","showAuthPage","indexOf","push","ComponentRoute","i1","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","Object","keys","formGroup","validator","filter","propertyName","metadata","defaultValue","undefined","control","FormArray","controlOptions","formArray","val","disable","addControl","buildFormModel","injector","rt","routeDecoratedComponent","routeValues","defineProperty","enumerable","configurable","writable"],"sourceRoot":""}