{"version":3,"file":"3921.client.chunk.74ae5b29c385717c472d.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/block/block.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/block/block.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/block/block.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/block/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {BlockComponentOptions} from './block.options';\n\n/**\n * Block layout metadata loader\n */\nexport const BlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<BlockComponentOptions>> = async () => new (await import('./metadata/block.layoutMetadata')).BlockLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {BlockComponentOptions} from './block.options';\nimport {BlockLayoutMetadataLoader} from './block.metadata';\n\n/**\n * Component used for displaying block\n */\n@Component(\n{\n    selector: 'block',\n    templateUrl: 'block.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<BlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorMetadata(BlockLayoutMetadataLoader)\nexport class BlockSAComponent extends LayoutComponentBase<BlockComponentOptions> implements LayoutComponent<BlockComponentOptions>\n{\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {BlockSAComponent} from './block.component';\n\nexport default BlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["BlockLayoutMetadataLoader","BlockLayoutEditorMetadata","BlockSAComponent","LayoutComponentBase","LayoutComponentRendererSADirective","DescendantsGetter","options","content","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","this","componentElement","extensionsOptions","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata","instance"],"sourceRoot":""}