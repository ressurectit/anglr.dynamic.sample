{"version":3,"file":"5221.client.chunk.fe2f48e0b01b7340418e.js","mappings":"8OAOA,MAAMA,EACN,CACIC,QAASC,EAAAA,GACTC,aAAaC,EAAAA,EAAAA,KAAW,IAAMC,IAC9BC,OAAO,GAiBL,MAAOD,EAYTE,YAAoBC,EAA8BC,GAA9B,KAAAD,UAAAA,EAA8B,KAAAC,YAAAA,EAR3C,KAAAC,SAAYC,MAKZ,KAAAC,UAAY,MAKlB,CAOMC,WAAWC,GAEdC,KAAKP,UAAUQ,YAAYD,KAAKN,YAAYQ,cAAe,QAASH,EACvE,CAKMI,iBAAiBC,GAEpBJ,KAAKL,SAAYI,KAEVM,EAAAA,EAAAA,IAAQN,IAAmB,IAATA,EAEjBK,EAAG,OAMPL,EAAQA,EAAMO,QAAQ,OAAQ,IAE1B,0BAA0BC,KAAKR,GAOnCK,EAAGI,WAAWT,EAAMO,QAAQ,IAAK,OAL7BF,EAAGK,KAKP,CAEP,CAKMC,kBAAkBN,GAErBJ,KAAKH,UAAYO,CACpB,E,iCA5DQd,GAAAA,EAAAA,EAA+BqB,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,I,oBAA/BrB,E,kMAAA,0B,gCAAA,0B,8BAAA,a,mBARE,CAACL,M,8FCZhB,MAAM2B,EACN,CACI1B,QAAS2B,EAAAA,GACTzB,aAAaC,EAAAA,EAAAA,KAAW,IAAMyB,IAC9BvB,OAAO,GAWL,MAAOuB,EASFC,SAASC,GAEZ,OC5BF,MAMkB,cAACA,GAEjB,OAAGC,MAAMD,EAAQjB,OAEN,CACH,QAAU,GAIX,IACV,CAMgB,WAACmB,GAEd,OAAQF,IAEAC,MAAMD,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUH,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUD,IAAQF,EAAQjB,MAAQmB,EAE/E,CACH,SAAYA,EACZ,YAAeF,EAAQjB,OAIxB,IAEd,CAMgB,WAACqB,GAEd,OAAQJ,IAEAC,MAAMD,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUH,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUC,IAAQJ,EAAQjB,MAAQqB,EAE/E,CACH,SAAYA,EACZ,YAAeJ,EAAQjB,OAIxB,IAEd,GD5BqBsB,OAAOL,EAC5B,E,iCAZQF,E,oBAAAA,E,+IAFE,CAACF,M,kUETT,MAAMU,UAAqC,IAChD9B,cACE+B,SAASC,WAMTxB,KAAKyB,aAAe,IAAI,KAAY,GACtC,CAOAC,aACE1B,KAAKyB,aAAaE,aAAaC,WAAU7B,KACnC,QAASA,KAAWkB,MAAMlB,IAAUC,KAAK6B,UAAUC,mBACrD9B,KAAK6B,SAASC,iBAAiBC,MAAQhC,EACvCC,KAAKgC,QAAQC,cACf,GAEJ,CAMAC,cACMlC,KAAK6B,UAAUC,kBAAkBC,OACnC/B,KAAKyB,aAAaU,WAAWnC,KAAK6B,UAAUC,iBAAiBC,MAEjE,EAIFT,EAA6B,KAAsB,WACjD,IAAI,EACJ,OAAO,SAA8Cc,GACnD,OAAQ,IAA8C,EAA4C,KAAyBd,KAAgCc,GAAKd,EAClK,CACF,CALmD,GAOnDA,EAA6B,KAAsB,KAAqB,CACtEe,KAAMf,EACNgB,UAAW,CAAC,CAAC,wBACbC,YAAY,EACZC,SAAU,CAAC,IAA+B,KAC1CC,MAAO,GACPC,KAAM,EACNC,OAAQ,CAAC,CAAC,OAAQ,iBAAkB,EAAG,SAAU,kBAAmB,CAAC,EAAG,gBAAiB,CAAC,EAAG,qBAAsB,oCAAqC,+BAAgC,CAAC,EAAG,wBAAyB,0BAA2B,CAAC,OAAQ,OAAQ,SAAU,GAAI,WAAY,GAAI,EAAG,uBAAwB,EAAG,eAAgB,CAAC,EAAG,kBAAmB,CAAC,EAAG,UAAW,CAAC,EAAG,SAAU,CAAC,OAAQ,QAAS,EAAG,oBAAqB,YAAa,UAAW,CAAC,EAAG,WAAY,CAAC,EAAG,WACvdC,SAAU,SAA+CC,EAAIC,GAClD,EAALD,IACF,KAAa,EAAG,wBAAyB,GACzC,KAAkB,EAAG,MAAO,EAA5B,CAA+B,EAAG,MAAO,EAAzC,CAA4C,EAAG,QAAS,GACxD,IAAU,EAAG,iBACb,OACA,KAAa,EAAG,QAAS,GACzB,OACA,KAAkB,EAAG,MAAO,EAA5B,CAA+B,EAAG,MAAO,EAAzC,CAA4C,EAAG,MAAO,GACtD,KAAa,EAAG,sBAAuB,GACvC,KAAkB,GAAI,OACtB,IAAU,GAAI,SACd,WACA,KAAkB,GAAI,MAAO,EAA7B,CAAgC,GAAI,MAAO,GAA3C,CAA+C,GAAI,OACnD,IAAU,GAAI,SACd,OACA,KAAa,GAAI,uBAAwB,GACzC,cAGO,EAALA,IACF,IAAc,SAAUC,EAAxB,CAA6B,iBAAkBA,EAAIC,gBACnD,IAAa,GACb,IAAc,cAAeD,EAAIrB,cACjC,IAAa,GACb,IAAc,oBAAqBqB,EAAIE,aAAvC,CAAqD,YAAaF,EAAIG,UAAtE,CAAiF,SAAUH,GAC3F,IAAa,GACb,IAAc,oBAAqBA,EAAIE,aAAvC,CAAqD,YAAaF,EAAIG,UAAtE,CAAiF,SAAUH,GAE/F,EACAI,aAAc,CAAC,IAAqB,KAAyB,KAAoB,KAAsB,KAAyB,IAAmB,IAAoC,IAAkC,IAAgC,IAA8B,KACvRC,cAAe,EACfC,gBAAiB,IC3FZ,MAAMC,EAEX7D,cAMEQ,KAAKsD,SAAW,CACdC,KAAM,iBACNC,YAAa,kCACbC,MAAO,QAMTzD,KAAK0D,eAAiBpC,EACtBqC,OAAOC,OAAO5D,KAChB,E","sources":["webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/basic-components/src/dynamicItems/debounceValue/node/debounceValueNode.component.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/basic-components/src/dynamicItems/debounceValue/metadata/debounceValue.relationsMetadata.js"],"sourcesContent":["import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()'\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * Sets value to select\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * Registers callback that is called when value of select changes\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * Registers callback that is called when select is closed\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n}\n","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { NumberInputModule } from '@anglr/common/forms';\nimport { RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent } from '@anglr/dynamic/relations-editor';\nimport { isNumber } from '@jscrpt/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@anglr/common/forms\";\n/**\n * Debounce value node component for negation\n */\n\nexport class DebounceValueNodeSAComponent extends RelationsNodeBase {\n  constructor() {\n    super(...arguments); //######################### protected properties - template bindings #########################\n\n    /**\n     * Form control for handling debounce time\n     */\n\n    this.debounceTime = new FormControl(50);\n  } //######################### protected methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize() {\n    this.debounceTime.valueChanges.subscribe(value => {\n      if (isNumber(value) && !isNaN(value) && this.metadata?.relationsOptions) {\n        this.metadata.relationsOptions.delay = value;\n        this.history.getNewState();\n      }\n    });\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  metadataSet() {\n    if (this.metadata?.relationsOptions?.delay) {\n      this.debounceTime.patchValue(this.metadata?.relationsOptions.delay);\n    }\n  }\n\n}\n\nDebounceValueNodeSAComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵDebounceValueNodeSAComponent_BaseFactory;\n  return function DebounceValueNodeSAComponent_Factory(t) {\n    return (ɵDebounceValueNodeSAComponent_BaseFactory || (ɵDebounceValueNodeSAComponent_BaseFactory = i0.ɵɵgetInheritedFactory(DebounceValueNodeSAComponent)))(t || DebounceValueNodeSAComponent);\n  };\n}();\n\nDebounceValueNodeSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DebounceValueNodeSAComponent,\n  selectors: [[\"debounce-value-node\"]],\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 17,\n  vars: 9,\n  consts: [[\"name\", \"debounce value\", 3, \"parent\", \"destroySubject\"], [1, \"node-content\"], [1, \"dynamic-form-group\", \"dynamic-margin-bottom-extra-small\", \"dynamic-margin-bottom-small\"], [1, \"dynamic-control-label\", \"dynamic-text-uppercase\"], [\"type\", \"text\", \"number\", \"\", \"required\", \"\", 1, \"dynamic-form-control\", 3, \"formControl\"], [1, \"inputs-outputs\"], [1, \"inputs\"], [1, \"input\"], [\"name\", \"value\", 3, \"parentCoordiantes\", \"zoomLevel\", \"parent\"], [1, \"outputs\"], [1, \"output\"]],\n  template: function DebounceValueNodeSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"relations-node-header\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"label\", 3);\n      i0.ɵɵtext(4, \"debounce time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6)(8, \"div\", 7);\n      i0.ɵɵelement(9, \"relation-node-input\", 8);\n      i0.ɵɵelementStart(10, \"div\");\n      i0.ɵɵtext(11, \"value\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"div\", 9)(13, \"div\", 10)(14, \"div\");\n      i0.ɵɵtext(15, \"value\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"relation-node-output\", 8);\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"parent\", ctx)(\"destroySubject\", ctx.destroySubject);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formControl\", ctx.debounceTime);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"parentCoordiantes\", ctx.nodePosition)(\"zoomLevel\", ctx.zoomLevel)(\"parent\", ctx);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"parentCoordiantes\", ctx.nodePosition)(\"zoomLevel\", ctx.zoomLevel)(\"parent\", ctx);\n    }\n  },\n  dependencies: [ReactiveFormsModule, i1.DefaultValueAccessor, i1.NgControlStatus, i1.RequiredValidator, i1.FormControlDirective, NumberInputModule, i2.NumberInputControlValueAccessor, i2.NumberInputValidatorDirective, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent, RelationNodeOutputSAComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DebounceValueNodeSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'debounce-value-node',\n      standalone: true,\n      imports: [ReactiveFormsModule, NumberInputModule, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent, RelationNodeOutputSAComponent],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<relations-node-header [parent]=\\\"this\\\" [destroySubject]=\\\"destroySubject\\\" name=\\\"debounce value\\\"></relations-node-header>\\n\\n<div class=\\\"node-content\\\">\\n    <div class=\\\"dynamic-form-group dynamic-margin-bottom-extra-small dynamic-margin-bottom-small\\\">\\n        <label class=\\\"dynamic-control-label dynamic-text-uppercase\\\">debounce time</label>\\n        <input type=\\\"text\\\" class=\\\"dynamic-form-control\\\" [formControl]=\\\"debounceTime\\\" number required>\\n    </div>\\n\\n    <div class=\\\"inputs-outputs\\\">\\n        <div class=\\\"inputs\\\">\\n            <div class=\\\"input\\\">\\n                <relation-node-input [parentCoordiantes]=\\\"nodePosition\\\" [zoomLevel]=\\\"zoomLevel\\\" name=\\\"value\\\" [parent]=\\\"this\\\"></relation-node-input>\\n                <div>value</div>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"outputs\\\">\\n            <div class=\\\"output\\\">\\n                <div>value</div>\\n                <relation-node-output [parentCoordiantes]=\\\"nodePosition\\\" [zoomLevel]=\\\"zoomLevel\\\" name=\\\"value\\\" [parent]=\\\"this\\\"></relation-node-output>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"\n    }]\n  }], null, null);\n})();","import { DebounceValueNodeSAComponent } from '../node/debounceValueNode.component';\n/**\n * Debounce value relations metadata\n */\n\nexport class DebounceValueRelationsEditorMetadata {\n  //######################### constructor #########################\n  constructor() {\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    this.metaInfo = {\n      name: 'Debounce value',\n      description: 'Debounce value by specific time',\n      group: 'Data'\n    };\n    /**\n     * @inheritdoc\n     */\n\n    this.nodeDefinition = DebounceValueNodeSAComponent;\n    Object.freeze(this);\n  }\n\n}"],"names":["NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","constructor","_renderer","_elementRef","onChange","_","onTouched","writeValue","value","this","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","i0","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","control","isNaN","max","isPresent","min","number","DebounceValueNodeSAComponent","super","arguments","debounceTime","initialize","valueChanges","subscribe","metadata","relationsOptions","delay","history","getNewState","metadataSet","patchValue","t","type","selectors","standalone","features","decls","vars","consts","template","rf","ctx","destroySubject","nodePosition","zoomLevel","dependencies","encapsulation","changeDetection","DebounceValueRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze"],"sourceRoot":""}