{"version":3,"file":"3056.client.chunk.e1ffc2135d4c017379ce.js","mappings":"yPAOA,MAAMA,EACN,CACIC,QAASC,EAAAA,GACTC,aAAaC,EAAAA,EAAAA,KAAW,IAAMC,IAC9BC,OAAO,GAkBL,MAAOD,EAiBTE,YAAoBC,EAA8BC,GAA9B,KAAAD,UAAAA,EAA8B,KAAAC,YAAAA,EAb3C,KAAAC,SAAYC,MAKZ,KAAAC,UAAY,OAKZ,KAAAC,UAAoB,CAK3B,CAOOC,WAAWC,GAEdC,KAAKR,UAAUS,YAAYD,KAAKP,YAAYS,cAAe,QAASH,EACxE,CAKOI,iBAAiBC,GAEpBJ,KAAKN,SAAYK,KAEVM,EAAAA,EAAAA,IAAQN,IAAmB,IAATA,EAEjBK,EAAG,OAMPL,EAAQA,EAAMO,QAAQ,OAAQ,IAE1B,0BAA0BC,KAAKR,GAOnCK,EAAGI,WAAWT,EAAMO,QAAQ,IAAK,OAL7BF,EAAGK,KAKgC,CAE/C,CAKOC,kBAAkBN,GAErBJ,KAAKJ,UAAYQ,CACrB,CAKOO,iBAAkBC,GAErBZ,KAAKH,SAAWe,CACpB,E,iCAzESvB,GAA+B,sB,kBAA/BA,EAA+B,4K,iCAA/B,6B,CAAA,yD,CAAA,gD,0CATE,CAACL,M,wECdV,MAAO6B,EAMFC,cAAcC,GAEjB,OAAGC,MAAMD,EAAQhB,OAEN,CACH,QAAU,GAIX,IACX,CAMOe,WAAWG,GAEd,OAAQF,IAEAC,MAAMD,EAAQhB,SAAUmB,EAAAA,EAAAA,IAAUH,EAAQhB,SAAUmB,EAAAA,EAAAA,IAAUD,IAAQF,EAAQhB,MAAQkB,EAE/E,CACH,SAAYA,EACZ,YAAeF,EAAQhB,OAIxB,IAEf,CAMOe,WAAWK,GAEd,OAAQJ,IAEAC,MAAMD,EAAQhB,SAAUmB,EAAAA,EAAAA,IAAUH,EAAQhB,SAAUmB,EAAAA,EAAAA,IAAUC,IAAQJ,EAAQhB,MAAQoB,EAE/E,CACH,SAAYA,EACZ,YAAeJ,EAAQhB,OAIxB,IAEf,E,0BCtDJ,MAAMqB,EACN,CACInC,QAASoC,EAAAA,GACTlC,aAAaC,EAAAA,EAAAA,KAAW,IAAMkC,IAC9BhC,OAAO,GAWL,MAAOgC,EASFC,SAASR,GAEZ,OAAOF,EAAWW,OAAOT,EAC7B,E,iCAZSO,EAA6B,E,kBAA7BA,EAA6B,+IAF3B,CAACF,M,kUCKV,MAAOK,UAAqCC,EAAAA,EAflDnC,c,oBAsBc,KAAAoC,aAAyC,IAAIC,EAAAA,GAAoB,G,CAO3DC,aAEZ7B,KAAK2B,aAAaG,aAAaC,WAAUhC,KAElCiC,EAAAA,EAAAA,IAASjC,KAAWiB,MAAMjB,IAAUC,KAAKiC,UAAUC,mBAElDlC,KAAKiC,SAASC,iBAAiBC,MAAQpC,EAEvCC,KAAKoC,QAAQC,c,GAGzB,CAKmBC,cAEZtC,KAAKiC,UAAUC,kBAAkBC,OAEhCnC,KAAK2B,aAAaY,WAAWvC,KAAKiC,UAAUC,iBAAiBC,MAErE,E,6DApCSV,KAA4B,GAA5BA,EAA4B,E,qBAA5BA,EAA4B,qE,yhBCxBf,U,CAAA,a,uEAMM,U,CAAA,W,2FAQH,Y,CAAA,U,uEAIX,M,gBApBoB,mC,wFAWiC,wB,CAAA,Y,+CAQC,wB,CAAA,4BDDhEe,EAAAA,EAAmB,oBACnBC,EAAAA,EAAiB,QACjBC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GAA6B,oCEd/B,MAAOC,EAoBTtD,cAbO,KAAAuD,SACP,CACIC,KAAM,iBACNC,YAAa,kCACbC,MAAO,QAMJ,KAAAC,eAAsCzB,EAKzC0B,OAAOC,OAAOpD,KAClB,E","sources":["webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/debounceValue/node/debounceValueNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/debounceValue/node/debounceValueNode.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/debounceValue/metadata/debounceValue.relationsMetadata.ts"],"sourcesContent":["import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()',\n        '[disabled]': 'disabled',\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n\n    /**\n     * Indication whether is number input disabled\n     */\n    public disabled: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setDisabledState?(isDisabled: boolean): void\n    {\n        this.disabled = isDisabled;\n    }\n}\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {NumberInputModule} from '@anglr/common/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {isNumber} from '@jscrpt/common';\n\nimport {DebounceValueRelationsOptions} from '../debounceValue.options';\n\n/**\n * Debounce value node component for negation\n */\n@Component(\n{\n    selector: 'debounce-value-node',\n    templateUrl: 'debounceValueNode.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        NumberInputModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DebounceValueNodeSAComponent extends RelationsNodeBase<DebounceValueRelationsOptions> implements RelationsNode<DebounceValueRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Form control for handling debounce time\n     */\n    protected debounceTime: FormControl<number|null> = new FormControl<number>(50);\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override initialize(): void\n    {\n        this.debounceTime.valueChanges.subscribe(value =>\n        {\n            if(isNumber(value) && !isNaN(value) && this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.delay = value;\n\n                this.history.getNewState();\n            }\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(this.metadata?.relationsOptions?.delay)\n        {\n            this.debounceTime.patchValue(this.metadata?.relationsOptions.delay);\n        }\n    }\n}",null,"import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DebounceValueNodeSAComponent} from '../node/debounceValueNode.component';\n\n/**\n * Debounce value relations metadata\n */\nexport class DebounceValueRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Debounce value',\n        description: 'Debounce value by specific time',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DebounceValueNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","constructor","_renderer","_elementRef","onChange","_","onTouched","disabled","writeValue","value","this","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","setDisabledState","isDisabled","Validators","static","control","isNaN","max","isPresent","min","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","number","DebounceValueNodeSAComponent","RelationsNodeBase","debounceTime","FormControl","initialize","valueChanges","subscribe","isNumber","metadata","relationsOptions","delay","history","getNewState","metadataSet","patchValue","ReactiveFormsModule","NumberInputModule","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","DebounceValueRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze"],"sourceRoot":""}