{"version":3,"file":"5578.client.chunk.7785f0bc5b219eacf642.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanel/gridPanel.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanel/gridPanel.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/gridPanel/gridPanel.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanel/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\n\n/**\n * Grid panel layout metadata loader\n */\nexport const GridPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelComponentOptions>> = async () => new (await import('./metadata/gridPanel.layoutMetadata')).GridPanelLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {generateId, PromiseOr} from '@jscrpt/common';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\nimport {GridPanelLayoutMetadataLoader} from './gridPanel.metadata';\n\n/**\n * Component used for displaying grid panel layout\n */\n@Component(\n{\n    selector: 'grid-panel',\n    templateUrl: 'gridPanel.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelComponentOptions>(options => options?.cells ?? [])\n@LayoutEditorMetadata(GridPanelLayoutMetadataLoader)\nexport class GridPanelSAComponent extends LayoutComponentBase<GridPanelComponentOptions> implements LayoutComponent<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this._fixCells();\n\n        const style = this.componentElement.nativeElement.style;\n        let gridTemplateRows: string = '';\n        let gridTemplateColumns: string = '';\n\n        if(this.options?.rows && Array.isArray(this.options?.rows))\n        {\n            for(const row of this.options.rows)\n            {\n                gridTemplateRows += `${row.height} `;\n            }\n        }\n\n        if(this.options?.columns && Array.isArray(this.options?.columns))\n        {\n            for(const column of this.options.columns)\n            {\n                gridTemplateColumns += `${column.width} `;\n            }\n        }\n\n        style.gridTemplateRows = gridTemplateRows.trim();\n        style.gridTemplateColumns = gridTemplateColumns.trim();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Fixes cell metadata\n     */\n    protected _fixCells(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.cells ??= [];\n\n        const grid: string[][] = [];\n\n        for(let y = 0; y < (this.options.rows ?? []).length; y++)\n        for(let x = 0; x < (this.options.columns ?? []).length; x++)\n        {\n            grid[y] ??= [];\n            grid[y][x] = '';\n        }\n\n        for(const cell of this.options.cells)\n        {\n            cell.package = 'basic-components';\n            cell.name = 'gridPanelCell';\n\n            for(let y = (cell.options?.gridRowStart ?? 1); y < (cell.options?.gridRowEnd ?? 2); y++)\n            for(let x = (cell.options?.gridColumnStart ?? 1); x < (cell.options?.gridColumnEnd ?? 2); x++)\n            {\n                const yCoordinate = y - 1;\n                const xCoordinate = x - 1;\n\n                if(grid[yCoordinate][xCoordinate] === '')\n                {\n                    grid[yCoordinate][xCoordinate] = cell.id;\n                }\n            }\n        }\n\n        for(let y = 1; y <= (this.options.rows ?? []).length; y++)\n        for(let x = 1; x <= (this.options.columns ?? []).length; x++)\n        {\n            if(grid[y - 1][x - 1] === '')\n            {\n                this.options.cells.push(\n                {\n                    id: `${generateId(6)}-r${y}-${y+1}-c${x}-${x+1}`,\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options:\n                    {\n                        gridRowStart: y,\n                        gridRowEnd: y + 1,\n                        gridColumnStart: x,\n                        gridColumnEnd: x + 1\n                    }\n                });\n            }\n        }\n    }\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {GridPanelSAComponent} from './gridPanel.component';\n\nexport default GridPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["GridPanelLayoutMetadataLoader","GridPanelLayoutEditorMetadata","GridPanelSAComponent","LayoutComponentBase","onOptionsSet","this","_fixCells","style","componentElement","nativeElement","gridTemplateRows","gridTemplateColumns","options","rows","Array","isArray","row","height","columns","column","width","trim","cells","grid","y","length","x","cell","package","name","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","yCoordinate","xCoordinate","id","push","generateId","CommonModule","LayoutComponentRendererSADirective","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","extensionsOptions","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata","instance"],"sourceRoot":""}