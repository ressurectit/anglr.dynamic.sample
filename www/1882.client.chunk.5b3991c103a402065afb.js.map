{"version":3,"file":"1882.client.chunk.5b3991c103a402065afb.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/ifBlock/metadata/ifBlock.model.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/ifBlock/metadata/ifBlock.layoutMetadata.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../../../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from '../ifBlock.options';\n\n/**\n * If block model for properties editor\n */\nexport class IfBlockModel implements IfBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Condition')\n    @LayoutPropertyDescription('Initial value of condition used for displaying content of if block')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public condition: boolean|undefined|null = true;\n    \n    //######################### constructor #########################\n    constructor(value: IfBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {genericPropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from '../ifBlock.options';\nimport {IfBlockModel} from './ifBlock.model';\n\n/**\n * If block layout metadata\n */\nexport class IfBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<IfBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<IfBlockComponentOptions> =\n    {\n        name: 'If',\n        description: 'If block - conditionally displays content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: IfBlockModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<IfBlockModel>(['condition']),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            condition: true,\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, IfBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [IfBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [IfBlockComponentOptions|undefined|null]> = options => options?.content ? [options?.content] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, IfBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}",null,"import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Dictionary, extend, globalDefine, isBlank, noop} from '@jscrpt/common';\n\ndeclare let ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","IfBlockModel","condition","mapValuesToThis","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","IfBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","genericPropertiesControlFor","defaultOptions","addDescendant","metadata","options","content","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","DynamicPropertyMetadata","LayoutPropertyMetadata","type","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_componentRef","values","ngOnChanges","typeName","debug","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","_changeDetector","_extractor","_initialized","ngOnInit","_initialize","detectChanges","ReactiveFormsModule","CastPipesModule","NumberInputModule","property","target","propertyKey","Reflect","get","propertyMetadata","extend","has","defineProperty","globalDefine","global","ngDesignerMetadata"],"sourceRoot":""}