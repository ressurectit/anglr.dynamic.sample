{"version":3,"file":"1533.client.chunk.e7f154119f9dc6e53c0d.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/stackPanel/extensions/stackPanelFlex.extension.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/stackPanel/stackPanel.metadata.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/stackPanel/stackPanel.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/stackPanel/stackPanel.component.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/stackPanel/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Child extension that applies flex styling to child\n */\nexport class StackPanelFlexExtension extends DynamicItemExtensionBase<StackPanelFlexExtensionOptions> implements DynamicItemExtension<StackPanelFlexExtensionOptions>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies flex styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n\n        if(isPresent(options?.flex))\n        {\n            const style = this.element?.nativeElement.style;\n\n            if(style && this.options)\n            {\n                style.flex = this.options.flex ?? '';\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\n\n/**\n * Stack panel layout metadata loader\n */\nexport const StackPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StackPanelComponentOptions>> = async () => new (await import('./metadata/stackPanel.layoutMetadata')).StackPanelLayoutEditorMetadata();\n",null,"import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\nimport {StackPanelLayoutMetadataLoader} from './stackPanel.metadata';\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'stack-panel',\n    templateUrl: 'stackPanel.component.html',\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(StackPanelLayoutMetadataLoader)\nexport class StackPanelSAComponent extends LayoutComponentBase<StackPanelComponentOptions> implements LayoutComponent<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this._setStyles();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets styles for stack panel\n     */\n    protected _setStyles(): void\n    {\n        const style = this.componentElement.nativeElement.style;\n\n        style.flexDirection = this.options?.horizontal ? 'row' : 'column';\n        style.flexWrap = this.options?.wrap ? 'wrap' : 'nowrap';\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {StackPanelFlexExtension} from './extensions';\nimport {StackPanelSAComponent} from './stackPanel.component';\n\nexport default StackPanelSAComponent;\n\nexport const childExtensions = [StackPanelFlexExtension];\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["StackPanelFlexExtension","DynamicItemExtensionBase","onInit","this","_applyStyling","onOptionsChange","options","isPresent","flex","style","element","nativeElement","StackPanelLayoutMetadataLoader","StackPanelLayoutEditorMetadata","StackPanelSAComponent","LayoutComponentBase","onOptionsSet","_setStyles","componentElement","flexDirection","horizontal","flexWrap","wrap","CommonModule","i1","LayoutComponentRendererSADirective","LayoutEditorMetadata","childExtensions","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","injector","logger","initialized","destroyed","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","LOGGER","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata","instance"],"sourceRoot":""}