{"version":3,"file":"1694.client.chunk.a118662ca23cb0a3e7f0.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../packages/common/src/directives/ng_switch.ts","webpack://ng-universal-demo/../../../src/material/core/common-behaviors/error-state.ts","webpack://ng-universal-demo/../../../src/material/core/error/error-options.ts","webpack://ng-universal-demo/../../../src/material/form-field/form-field-control.ts","webpack://ng-universal-demo/../../../src/material/form-field/form-field-module.ts","webpack://ng-universal-demo/../../../src/material/form-field/error.ts","webpack://ng-universal-demo/../../../src/material/form-field/form-field-animations.ts","webpack://ng-universal-demo/../../../src/material/form-field/placeholder.ts","webpack://ng-universal-demo/../../../src/material/form-field/prefix.ts","webpack://ng-universal-demo/../src/material/form-field/form-field.html","webpack://ng-universal-demo/../../../src/material/form-field/form-field.ts","webpack://ng-universal-demo/../../../src/material/form-field/form-field.html","webpack://ng-universal-demo/../../../src/material/form-field/hint.ts","webpack://ng-universal-demo/../../../src/material/form-field/label.ts","webpack://ng-universal-demo/../../../src/material/form-field/suffix.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/components/formComponentBase/formComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/enums.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/tokens.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/services/formDynamicModuleRelationsProvider/formDynamicModuleRelationsProvider.service.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/providers.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/utils.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/components/layoutComponentBase/layoutComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/extensions/componentStyling/componentStyling.extension.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/decorators/dynamicOutput/dynamicOutput.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/extensions/relationsRegistration/relationsRegistration.extension.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/misc/dynamicItemExtensionBase.js"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, Optional, TemplateRef, ViewContainerRef, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Structural Directives](guide/structural-directives)\n *\n */\n@Directive({\n  selector: '[ngSwitch]',\n  standalone: true,\n})\nexport class NgSwitch {\n  // TODO(issue/24571): remove '!'.\n  private _defaultViews!: SwitchView[];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number {\n    return this._caseCount++;\n  }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let i = 0; i < this._defaultViews.length; i++) {\n        const defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\n@Directive({\n  selector: '[ngSwitchCase]',\n  standalone: true,\n})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n  /**\n   * Stores the HTML template to be selected on match.\n   */\n  @Input() ngSwitchCase: any;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() private ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');\n    }\n\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  /**\n   * Performs case matching. For internal use only.\n   * @nodoc\n   */\n  ngDoCheck() {\n    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\n@Directive({\n  selector: '[ngSwitchDefault]',\n  standalone: true,\n})\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');\n    }\n\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n\nfunction throwNgSwitchProviderNotFoundError(attrName: string, directiveName: string): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.PARENT_NG_SWITCH_NOT_FOUND,\n      `An element with the \"${attrName}\" attribute ` +\n          `(matching the \"${\n              directiveName}\" directive) must be located inside an element with the \"ngSwitch\" attribute ` +\n          `(matching \"NgSwitch\" directive)`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState(): void;\n  /** Whether the component is in an error state. */\n  errorState: boolean;\n  /** An object used to control the error state of the component. */\n  errorStateMatcher: ErrorStateMatcher;\n}\n\ntype CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState> &\n  AbstractConstructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n\n  // These properties are defined as per the `MatFormFieldControl` interface. Since\n  // this mixin is commonly used with custom form-field controls, we respect the\n  // properties (also with the public name they need according to `MatFormFieldControl`).\n  ngControl: NgControl;\n  stateChanges: Subject<void>;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends AbstractConstructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T;\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /** An object used to control the error state of the component. */\n    errorStateMatcher: ErrorStateMatcher;\n\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, AbstractControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {AbstractControlDirective, NgControl} from '@angular/forms';\nimport {Directive} from '@angular/core';\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n@Directive()\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the AbstractControlDirective for this control. */\n  readonly ngControl: NgControl | AbstractControlDirective | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /**\n   * Value of `aria-describedby` that should be merged with the described-by ids\n   * which are set by the form-field.\n   */\n  readonly userAriaDescribedBy?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n@NgModule({\n  declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n  imports: [CommonModule, MatCommonModule, ObserversModule],\n  exports: [\n    MatCommonModule,\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, ElementRef, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_ERROR = new InjectionToken<MatError>('MatError');\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    '[attr.id]': 'id',\n    'aria-atomic': 'true',\n  },\n  providers: [{provide: MAT_ERROR, useExisting: MatError}],\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n\n  constructor(@Attribute('aria-live') ariaLive: string, elementRef: ElementRef) {\n    // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n    // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n    if (!ariaLive) {\n      elementRef.nativeElement.setAttribute('aria-live', 'polite');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({opacity: 1, transform: 'translateY(0%)'})),\n    transition('void => enter', [\n      style({opacity: 0, transform: 'translateY(-5px)'}),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder',\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_PREFIX = new InjectionToken<MatPrefix>('MatPrefix');\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n  providers: [{provide: MAT_PREFIX, useExisting: MatPrefix}],\n})\nexport class MatPrefix {}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MAT_ERROR, MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {_MAT_HINT, MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MAT_PREFIX, MatPrefix} from './prefix';\nimport {MAT_SUFFIX, MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {AbstractControlDirective} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nconst _MatFormFieldBase = mixinColor(\n  class {\n    constructor(public _elementRef: ElementRef) {}\n  },\n  'primary',\n);\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/** Possible values for the \"floatLabel\" form field input. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  /** Default form field appearance style. */\n  appearance?: MatFormFieldAppearance;\n  /** Default color of the form field. */\n  color?: ThemePalette;\n  /** Whether the required marker should be hidden by default. */\n  hideRequiredMarker?: boolean;\n  /**\n   * Whether the label for form fields should by default float `always`,\n   * `never`, or `auto` (only when necessary).\n   */\n  floatLabel?: FloatLabelType;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken<MatFormFieldDefaultOptions>(\n  'MAT_FORM_FIELD_DEFAULT_OPTIONS',\n);\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nexport const MAT_FORM_FIELD = new InjectionToken<MatFormField>('MatFormField');\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_FORM_FIELD, useExisting: MatFormField}],\n})\nexport class MatFormField\n  extends _MatFormFieldBase\n  implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor\n{\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private readonly _destroyed = new Subject<void>();\n\n  /** The form field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance;\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || this._defaults?.appearance || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean {\n    return this._hideRequiredMarker;\n  }\n  set hideRequiredMarker(value: BooleanInput) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker = false;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  _canLabelFloat(): boolean {\n    return this.floatLabel !== 'never';\n  }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string {\n    return this._hintLabel;\n  }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  readonly _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the label element.\n  readonly _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._getDefaultFloatLabelState();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef<HTMLElement>;\n\n  @ContentChild(MatFormFieldControl) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n    //  We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n\n  @ContentChildren(MAT_ERROR, {descendants: true}) _errorChildren: QueryList<MatError>;\n  @ContentChildren(_MAT_HINT, {descendants: true}) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MAT_PREFIX, {descendants: true}) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MAT_SUFFIX, {descendants: true}) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir: Directionality,\n    @Optional()\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n    private _defaults: MatFormFieldDefaultOptions,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string,\n  ) {\n    super(elementRef);\n\n    this.floatLabel = this._getDefaultFloatLabelState();\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = _defaults?.appearance || 'legacy';\n    if (_defaults) {\n      this._hideRequiredMarker = Boolean(_defaults.hideRequiredMarker);\n      if (_defaults.color) {\n        this.color = this.defaultColor = _defaults.color;\n      }\n    }\n  }\n\n  /**\n   * Gets the id of the label element. If no label is present, returns `null`.\n   */\n  getLabelId(): string | null {\n    return this._hasFloatingLabel() ? this._labelId : null;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => this.updateOutlineGap());\n          });\n        } else {\n          this.updateOutlineGap();\n        }\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Determines whether a class from the AbstractControlDirective\n   * should be forwarded to the host element.\n   */\n  _shouldForward(prop: keyof AbstractControlDirective): boolean {\n    const control = this._control ? this._control.ngControl : null;\n    return control && control[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!((this._control && this._control.placeholder) || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!(this._labelChildNonStatic || this._labelChildStatic);\n  }\n\n  _shouldLabelFloat() {\n    return (\n      this._canLabelFloat() &&\n      ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat())\n    );\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return (\n      (this.appearance === 'legacy' && !this._hasLabel()) ||\n      (this._hasLabel() && !this._shouldLabelFloat())\n    );\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || (this.appearance === 'legacy' && this._hasPlaceholder());\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState\n      ? 'error'\n      : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat()) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled && this._label) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend')\n          .pipe(take(1))\n          .subscribe(() => {\n            this._showAlwaysAnimate = false;\n          });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (\n      this._control.placeholder &&\n      this._placeholderChild &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /** Gets the default float label state. */\n  private _getDefaultFloatLabelState(): FloatLabelType {\n    return (this._defaults && this._defaults.floatLabel) || 'auto';\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n      if (\n        this._control.userAriaDescribedBy &&\n        typeof this._control.userAriaDescribedBy === 'string'\n      ) {\n        ids.push(...this._control.userAriaDescribedBy.split(' '));\n      }\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren\n          ? this._hintChildren.find(hint => hint.align === 'start')\n          : null;\n        const endHint = this._hintChildren\n          ? this._hintChildren.find(hint => hint.align === 'end')\n          : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids.push(...this._errorChildren.map(error => error.id));\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n    const container = this._connectionContainerRef.nativeElement;\n    const outlineStartSelector = '.mat-form-field-outline-start';\n    const outlineGapSelector = '.mat-form-field-outline-gap';\n\n    // getBoundingClientRect isn't available on the server.\n    if (this.appearance !== 'outline' || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If there is no content, set the gap elements to zero.\n    if (!labelEl || !labelEl.children.length || !labelEl.textContent!.trim()) {\n      const gapElements = container.querySelectorAll(\n        `${outlineStartSelector}, ${outlineGapSelector}`,\n      );\n      for (let i = 0; i < gapElements.length; i++) {\n        gapElements[i].style.width = '0';\n      }\n      return;\n    }\n\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!this._isAttachedToDOM()) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const startEls = container.querySelectorAll(outlineStartSelector);\n    const gapEls = container.querySelectorAll(outlineGapSelector);\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be recalculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelChildren = labelEl.children;\n      const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (let i = 0; i < labelChildren.length; i++) {\n        labelWidth += (labelChildren[i] as HTMLElement).offsetWidth;\n      }\n      startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls[i].style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls[i].style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately =\n      false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Checks whether the form field is attached to the DOM. */\n  private _isAttachedToDOM(): boolean {\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement!.contains(element);\n  }\n}\n","<div class=\"mat-form-field-wrapper\">\n  <div class=\"mat-form-field-flex\" #connectionContainer\n       (click)=\"_control.onContainerClick && _control.onContainerClick($event)\">\n\n    <!-- Outline used for outline appearance. -->\n    <ng-container *ngIf=\"appearance == 'outline'\">\n      <div class=\"mat-form-field-outline\">\n        <div class=\"mat-form-field-outline-start\"></div>\n        <div class=\"mat-form-field-outline-gap\"></div>\n        <div class=\"mat-form-field-outline-end\"></div>\n      </div>\n      <div class=\"mat-form-field-outline mat-form-field-outline-thick\">\n        <div class=\"mat-form-field-outline-start\"></div>\n        <div class=\"mat-form-field-outline-gap\"></div>\n        <div class=\"mat-form-field-outline-end\"></div>\n      </div>\n    </ng-container>\n\n    <div\n      class=\"mat-form-field-prefix\"\n      *ngIf=\"_prefixChildren.length\"\n      (cdkObserveContent)=\"updateOutlineGap()\"\n      [cdkObserveContentDisabled]=\"appearance != 'outline'\">\n      <ng-content select=\"[matPrefix]\"></ng-content>\n    </div>\n\n    <div class=\"mat-form-field-infix\" #inputContainer>\n      <ng-content></ng-content>\n\n      <span class=\"mat-form-field-label-wrapper\">\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\n             read if it comes before the control in the DOM. -->\n        <label class=\"mat-form-field-label\"\n               (cdkObserveContent)=\"updateOutlineGap()\"\n               [cdkObserveContentDisabled]=\"appearance != 'outline'\"\n               [id]=\"_labelId\"\n               [attr.for]=\"_control.id\"\n               [attr.aria-owns]=\"_control.id\"\n               [class.mat-empty]=\"_control.empty && !_shouldAlwaysFloat()\"\n               [class.mat-form-field-empty]=\"_control.empty && !_shouldAlwaysFloat()\"\n               [class.mat-accent]=\"color == 'accent'\"\n               [class.mat-warn]=\"color == 'warn'\"\n               #label\n               *ngIf=\"_hasFloatingLabel()\"\n               [ngSwitch]=\"_hasLabel()\">\n\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\n          <ng-container *ngSwitchCase=\"false\">\n            <ng-content select=\"mat-placeholder\"></ng-content>\n            <span>{{_control.placeholder}}</span>\n          </ng-container>\n\n          <ng-content select=\"mat-label\" *ngSwitchCase=\"true\"></ng-content>\n\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\n          <span\n            class=\"mat-placeholder-required mat-form-field-required-marker\"\n            aria-hidden=\"true\"\n            *ngIf=\"!hideRequiredMarker && _control.required && !_control.disabled\">&#32;*</span>\n        </label>\n      </span>\n    </div>\n\n    <div class=\"mat-form-field-suffix\" *ngIf=\"_suffixChildren.length\">\n      <ng-content select=\"[matSuffix]\"></ng-content>\n    </div>\n  </div>\n\n  <!-- Underline used for legacy, standard, and box appearances. -->\n  <div class=\"mat-form-field-underline\"\n       *ngIf=\"appearance != 'outline'\">\n    <span class=\"mat-form-field-ripple\"\n          [class.mat-accent]=\"color == 'accent'\"\n          [class.mat-warn]=\"color == 'warn'\"></span>\n  </div>\n\n  <div class=\"mat-form-field-subscript-wrapper\"\n       [ngSwitch]=\"_getDisplayedMessages()\">\n    <div *ngSwitchCase=\"'error'\" [@transitionMessages]=\"_subscriptAnimationState\">\n      <ng-content select=\"mat-error\"></ng-content>\n    </div>\n\n    <div class=\"mat-form-field-hint-wrapper\" *ngSwitchCase=\"'hint'\"\n      [@transitionMessages]=\"_subscriptAnimationState\">\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\n      <div *ngIf=\"hintLabel\" [id]=\"_hintLabelId\" class=\"mat-hint\">{{hintLabel}}</div>\n      <ng-content select=\"mat-hint:not([align='end'])\"></ng-content>\n      <div class=\"mat-form-field-hint-spacer\"></div>\n      <ng-content select=\"mat-hint[align='end']\"></ng-content>\n    </div>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nexport const _MAT_HINT = new InjectionToken<MatHint>('MatHint');\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-form-field-hint-end]': 'align === \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  },\n  providers: [{provide: _MAT_HINT, useExisting: MatHint}],\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label',\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SUFFIX = new InjectionToken<MatSuffix>('MatSuffix');\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n  providers: [{provide: MAT_SUFFIX, useExisting: MatSuffix}],\n})\nexport class MatSuffix {}\n","import { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional } from '@angular/core';\nimport { AbstractControl, FormControl, Validators } from '@angular/forms';\nimport { LayoutComponentBase } from '@anglr/dynamic/layout';\nimport { LOGGER } from '@anglr/common';\nimport { DynamicOutput } from '@anglr/dynamic/relations';\nimport { FORM_COMPONENT_CONTROL } from '../../misc/tokens';\nimport { FormComponentControlType } from '../../misc/enums';\nimport { getControlForType, getFormControl } from '../../misc/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\n/**\n * Base component for form component\n */\n\nexport class FormComponentBase extends LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(_changeDetector, _element, _injector, _parentControl, _logger) {\n    super(_changeDetector, _element, _injector, _logger);\n    this._parentControl = _parentControl; //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n\n    this.control = new FormControl();\n  } //######################### public properties - inputs #########################\n\n  /**\n   * Form component value\n   */\n\n\n  set value(value) {\n    const oldValue = this.value;\n    this.valueOutput = value;\n\n    if (value !== oldValue) {\n      this.control?.patchValue(value);\n    }\n  }\n\n  get value() {\n    return this.valueOutput;\n  }\n  /**\n   * Indication whether form component is required\n   */\n\n\n  set required(value) {\n    this._required = value;\n\n    if (value === true) {\n      this.control?.addValidators(Validators.required);\n      return;\n    }\n\n    this.control?.removeValidators(Validators.required);\n  }\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * Indication whether form component is disabled\n   */\n\n\n  set disabled(value) {\n    this._disabled = value;\n\n    if (value === true) {\n      this.control?.disable();\n      return;\n    }\n\n    this.control?.enable();\n  }\n\n  get disabled() {\n    return this._disabled;\n  } //######################### protected methods - _onOptionsSet implementation #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsSet() {\n    if (!this.options) {\n      return;\n    }\n\n    this.controlSubscription?.unsubscribe();\n    this.controlSubscription = null;\n    this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value);\n\n    this._registerValidations();\n\n    this.controlSubscription = this.control?.valueChanges?.subscribe(value => {\n      this.valueOutput = value;\n    });\n  } //######################### protected methods #########################\n\n  /**\n   * Registers component-specific validators\n   */\n\n\n  _registerValidations() {} //######################### private methods #########################\n\n  /**\n   * Gets form component control for control name\n   * @param controlName Form component control name\n   * @param parentControl Parent form control\n   * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n   * @param initValue Initial value for control\n   * @returns Specified type of control\n   */\n\n\n  _getFormControl(controlName, parentControl, defaultControlType = FormComponentControlType.FormControl, initValue) {\n    let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n    if (!control) {\n      this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {\n        name: controlName\n      });\n      control = getControlForType(defaultControlType, initValue);\n    }\n\n    if (this.required) {\n      control.addValidators(Validators.required);\n    }\n\n    if (this.disabled) {\n      control.disable();\n    }\n\n    return control;\n  }\n\n}\n\nFormComponentBase.ɵfac = function FormComponentBase_Factory(t) {\n  return new (t || FormComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(FORM_COMPONENT_CONTROL, 8), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nFormComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FormComponentBase,\n  inputs: {\n    value: \"value\",\n    required: \"required\",\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n__decorate([DynamicOutput(), __metadata(\"design:type\", Object)], FormComponentBase.prototype, \"valueOutput\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i1.AbstractControl,\n      decorators: [{\n        type: Inject,\n        args: [FORM_COMPONENT_CONTROL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    valueOutput: []\n  });\n})();","export var FormComponentControlType;\n\n(function (FormComponentControlType) {\n  FormComponentControlType[\"FormControl\"] = \"FormControl\";\n  FormComponentControlType[\"FormArray\"] = \"FormArray\";\n  FormComponentControlType[\"FormGroup\"] = \"FormGroup\";\n})(FormComponentControlType || (FormComponentControlType = {}));","import { InjectionToken } from '@angular/core';\n/**\n * Injection token for form component control\n */\n\nexport const FORM_COMPONENT_CONTROL = new InjectionToken('FORM_COMPONENT_CONTROL');","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Dynamic module items provider for form module items\n */\n\nexport class FormDynamicModuleItemsProvider {\n  //######################### constructor #########################\n  constructor(_logger) {\n    this._logger = _logger;\n  } //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  tryToGet(source) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      switch (source.package) {\n        case 'form-components':\n          {\n            try {\n              _this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {\n                name: source.name,\n                package: source.package\n              });\n              const dynamicItemModule = yield import(`../../../../form/src/dynamicItems/${source.name}/type`);\n              return dynamicItemModule;\n            } catch (e) {\n              _this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {\n                name: source.name,\n                package: source.package\n              });\n            }\n\n            break;\n          }\n\n        default:\n          {\n            return null;\n          }\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nFormDynamicModuleItemsProvider.ɵfac = function FormDynamicModuleItemsProvider_Factory(t) {\n  return new (t || FormDynamicModuleItemsProvider)(i0.ɵɵinject(LOGGER, 8));\n};\n\nFormDynamicModuleItemsProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormDynamicModuleItemsProvider,\n  factory: FormDynamicModuleItemsProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormDynamicModuleItemsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Dynamic module types provider, for form types\n */\n\nexport class FormDynamicModuleTypesProvider {\n  //######################### constructor #########################\n  constructor(_logger) {\n    this._logger = _logger;\n  } //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  tryToGet(source) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {\n          moduleName: source.package\n        });\n\n        switch (source.package) {\n          case 'form-components':\n            return yield import('../../../../form/src/types');\n\n          default:\n            return null;\n        }\n      } catch (e) {\n        _this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {\n          moduleName: source.package\n        });\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nFormDynamicModuleTypesProvider.ɵfac = function FormDynamicModuleTypesProvider_Factory(t) {\n  return new (t || FormDynamicModuleTypesProvider)(i0.ɵɵinject(LOGGER, 8));\n};\n\nFormDynamicModuleTypesProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormDynamicModuleTypesProvider,\n  factory: FormDynamicModuleTypesProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormDynamicModuleTypesProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Dynamic module relations provider for form module types\n */\n\nexport class FormDynamicModuleRelationsProvider {\n  //######################### constructor #########################\n  constructor(_logger) {\n    this._logger = _logger;\n  } //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  tryToGet(source) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this._logger?.debug('FormDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {\n          moduleName: source.package\n        });\n\n        switch (source.package) {\n          case 'form-components':\n            return yield import('../../../../form/src/relations');\n\n          default:\n            return null;\n        }\n      } catch (e) {\n        _this._logger?.debug('FormDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {\n          moduleName: source.package\n        });\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nFormDynamicModuleRelationsProvider.ɵfac = function FormDynamicModuleRelationsProvider_Factory(t) {\n  return new (t || FormDynamicModuleRelationsProvider)(i0.ɵɵinject(LOGGER, 8));\n};\n\nFormDynamicModuleRelationsProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormDynamicModuleRelationsProvider,\n  factory: FormDynamicModuleRelationsProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormDynamicModuleRelationsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { LAYOUT_COMPONENTS_MODULE_PROVIDERS } from '@anglr/dynamic/layout';\nimport { LAYOUT_MODULE_TYPES_PROVIDERS } from '@anglr/dynamic/layout-editor';\nimport { RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS } from '@anglr/dynamic/relations-editor';\nimport { FormDynamicModuleItemsProvider, FormDynamicModuleRelationsProvider, FormDynamicModuleTypesProvider } from '../services';\nimport { RELATIONS_COMPONENTS_MODULE_PROVIDERS } from '../../../relations/src';\n/**\n * Provider for form components providers\n */\n\nexport const FORM_COMPONENTS_PROVIDER = {\n  provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n  useClass: FormDynamicModuleItemsProvider,\n  multi: true\n};\n/**\n * Provider for form dynamic layout module types provider\n */\n\nexport const FORM_MODULE_TYPES_PROVIDER = {\n  provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n  useClass: FormDynamicModuleTypesProvider,\n  multi: true\n};\n/**\n * Provider for form dynamic relations types provider\n */\n\nexport const FORM_RELATIONS_MODULE_TYPES_PROVIDER = {\n  provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n  useClass: FormDynamicModuleRelationsProvider,\n  multi: true\n};\n/**\n * Provider for form package relations nodes provider\n */\n\nexport const FORM_RELATIONS_NODES_PROVIDER = {\n  provide: RELATIONS_NODES_PROVIDERS,\n  useClass: FormDynamicModuleItemsProvider,\n  multi: true\n};\n/**\n * Provider for form package relations components provider\n */\n\nexport const FORM_RELATIONS_COMPONENTS_PROVIDER = {\n  provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n  useClass: FormDynamicModuleItemsProvider,\n  multi: true\n};","import { FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { provideStaticPackageSource } from '@anglr/dynamic';\nimport { FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, FORM_RELATIONS_COMPONENTS_PROVIDER, FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER } from './providers';\nimport { FormComponentControlType } from './enums';\n/**\n * Providers for layout form subpackage\n */\n\nexport function provideFormLayout() {\n  return [FORM_COMPONENTS_PROVIDER];\n}\n/**\n * Providers for layout form subpackage\n */\n\nexport function provideFormRelations() {\n  return [FORM_RELATIONS_COMPONENTS_PROVIDER];\n}\n/**\n * Default providers for form subpackage layout\n */\n\nexport function provideFormLayoutEditor() {\n  return [FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, provideStaticPackageSource('form-components')];\n}\n/**\n * Default providers for form subpackage relations\n */\n\nexport function provideFormRelationsEditor() {\n  return [FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER, provideStaticPackageSource('form-components')];\n}\n/**\n * Providers for layout relations editor form subpackage\n */\n\nexport function provideFormLayoutRelationsEditor() {\n  return [...provideFormRelationsEditor(), ...provideFormLayout()];\n}\n/**\n * Providers for layout relations form subpackage\n */\n\nexport function provideFormLayoutRelations() {\n  return [...provideFormLayout(), ...provideFormRelations()];\n}\nexport function getFormControl(controlName, parentControl, defaultControlType = FormComponentControlType.FormControl, defaultValue) {\n  if (!parentControl || !controlName) {\n    return getControlForType(defaultControlType, defaultValue);\n  }\n\n  const control = parentControl.get(controlName);\n  return control ?? getControlForType(defaultControlType, defaultValue);\n}\nexport function getControlForType(type, defaultValue) {\n  //TODO fix default value for form array\n  switch (type) {\n    case FormComponentControlType.FormArray:\n      return new FormArray([]);\n\n    case FormComponentControlType.FormGroup:\n      return new FormGroup(defaultValue ?? {});\n\n    default:\n      return new FormControl(defaultValue);\n  }\n}","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\n\nexport function LayoutEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'layoutEditorMetadata');\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport { isEmptyObject, nameof } from '@jscrpt/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Base component for layout component\n */\n\nexport class LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(changeDetector, componentElement, injector, logger) {\n    this.changeDetector = changeDetector;\n    this.componentElement = componentElement;\n    this.injector = injector;\n    this.logger = logger; //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n\n    this.extensions = [];\n    /**\n     * Indication whether initialization was already done\n     */\n\n    this.initialized = false;\n    /**\n     * Indication whether was component destroyed\n     */\n\n    this.destroyed = false;\n  } //######################### protected properties #########################\n\n  /**\n   * Gets element that is used within extension\n   */\n\n\n  get element() {\n    return this.componentElement;\n  }\n  /**\n   * Gets options that are used within extension\n   */\n\n\n  get extensionsOptions() {\n    return this.options;\n  } //######################### public methods - implementation of OnDestroy #########################\n\n  /**\n   * Called when component is destroyed\n   */\n\n\n  ngOnDestroy() {\n    if (this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n\n    for (const ext of this.extensions) {\n      ext.destroy();\n    }\n\n    this.onDestroy();\n  } //######################### public methods - implementation of LayoutComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.initialized) {\n        return;\n      }\n\n      _this.initialized = true;\n      const extensionsOptions = _this.extensionsOptions;\n      yield _this.onInit();\n      yield _this.onOptionsSet();\n\n      if (extensionsOptions) {\n        for (const extension of _this.extensions) {\n          yield extension.initialize(_this.injector, _this.element, _this);\n        }\n      }\n\n      yield _this.afterInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnChanges(changes) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      //options has changed\n      if (nameof('options') in changes) {\n        yield _this2.onOptionsSet();\n        const extensionsOptions = _this2.extensionsOptions; //set options in extensions\n\n        if (extensionsOptions) {\n          for (const extension of _this2.extensions) {\n            yield extension.optionsChange(extensionsOptions);\n          }\n        }\n\n        if (!_this2.initialized) {\n          return;\n        }\n\n        yield _this2.onOptionsChange();\n      }\n\n      delete changes[nameof('options')];\n\n      if (!isEmptyObject(changes)) {\n        _this2.onChanges(changes);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  registerExtensions(extensions) {\n    this.extensions = extensions;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this.changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialzation of component, options are already set\n   */\n\n\n  onInit() {}\n  /**\n   * Called right after initialization finished, including extesions\n   */\n\n\n  afterInit() {}\n  /**\n   * Called on change of options, after initialization\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Occurs when some property changes on component\n   * @param _changes - Changes that occured on component\n   */\n\n\n  onChanges(_changes) {}\n  /**\n   * Called everytime options are set, after initialization and later\n   */\n\n\n  onOptionsSet() {}\n  /**\n   * Called when component is being destroyed\n   */\n\n\n  onDestroy() {}\n\n}\n\nLayoutComponentBase.ɵfac = function LayoutComponentBase_Factory(t) {\n  return new (t || LayoutComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nLayoutComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LayoutComponentBase,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { isPresent } from '@jscrpt/common';\n/**\n * Extension that applies common component styling to component\n */\n\nexport class ComponentStylingExtension extends DynamicItemExtensionBase {\n  //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n  onInit() {\n    this._applyStyling();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsChange() {\n    this._applyStyling();\n  } //######################### protected methods #########################\n\n  /**\n   * Applies component styling to element\n   */\n\n\n  _applyStyling() {\n    const options = this.options;\n    const style = this.element?.nativeElement.style;\n\n    if (this.element) {\n      if (isPresent(this.lastCssClass)) {\n        for (const cssClass of this.lastCssClass.split(' ')) {\n          if (cssClass) {\n            this.element.nativeElement.classList.remove(cssClass);\n          }\n        }\n      }\n\n      this.lastCssClass = options?.cssClass;\n\n      if (options?.cssClass) {\n        for (const cssClass of options.cssClass.split(' ')) {\n          if (cssClass) {\n            this.element?.nativeElement.classList.add(cssClass);\n          }\n        }\n      }\n    }\n\n    if (isPresent(style)) {\n      if (options?.margin) {\n        if (isPresent(options.margin.bottom)) {\n          style.marginBottom = options.margin.bottom;\n        }\n\n        if (isPresent(options.margin.right)) {\n          style.marginRight = options.margin.right;\n        }\n\n        if (isPresent(options.margin.top)) {\n          style.marginTop = options.margin.top;\n        }\n\n        if (isPresent(options.margin.left)) {\n          style.marginLeft = options.margin.left;\n        }\n      }\n\n      if (options?.padding) {\n        if (isPresent(options.padding.bottom)) {\n          style.paddingBottom = options.padding.bottom;\n        }\n\n        if (isPresent(options.padding.right)) {\n          style.paddingRight = options.padding.right;\n        }\n\n        if (isPresent(options.padding.top)) {\n          style.paddingTop = options.padding.top;\n        }\n\n        if (isPresent(options.padding.left)) {\n          style.paddingLeft = options.padding.left;\n        }\n      }\n\n      if (options?.textStyling) {\n        if (isPresent(options.textStyling.fontSize)) {\n          style.fontSize = options.textStyling.fontSize;\n        }\n\n        if (isPresent(options.textStyling.fontWeight)) {\n          style.fontWeight = options.textStyling.fontWeight.toString();\n        }\n      }\n    }\n  }\n\n}","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\n\nexport function RelationsEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'relationsEditorMetadata');\n}","import { Subject } from 'rxjs';\n/**\n * Creates dynamic output for property\n */\n\nexport function DynamicOutput() {\n  return function (target, propertyKey) {\n    const prop = propertyKey;\n    Object.defineProperty(target, `${prop}Change`, {\n      get: function () {\n        if (!this[`ɵ${prop}Change`]) {\n          this[`ɵ${prop}Change`] = new Subject();\n        }\n\n        return this[`ɵ${prop}Change`];\n      }\n    });\n    Object.defineProperty(target, prop, {\n      get: function () {\n        return this[`ɵ${prop}`];\n      },\n      set: function (value) {\n        this[`ɵ${prop}`] = value;\n        this[`${prop}Change`].next();\n      }\n    });\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { RelationsComponentManager, RelationsProcessor } from '../../services';\n/**\n * Extension that allows registration of component for relations\n */\n\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase {\n  constructor() {\n    //######################### protected properties #########################\n    super(...arguments);\n    /**\n     * Instance of relations processor\n     */\n\n    this.relationsProcessor = null;\n    /**\n     * Instance of component manager\n     */\n\n    this.componentManager = null;\n  } //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.injector || !_this.metadata || !_this.instance) {\n        return;\n      }\n\n      _this.relationsProcessor ?? (_this.relationsProcessor = _this.injector.get(RelationsProcessor, null));\n      _this.componentManager ?? (_this.componentManager = _this.injector.get(RelationsComponentManager, null));\n\n      if (!_this.relationsProcessor || !_this.componentManager) {\n        return;\n      }\n\n      _this.componentManager.registerComponent(_this.metadata.id, _this.instance);\n\n      yield _this.relationsProcessor.initialized;\n\n      _this.relationsProcessor.updateRelations(_this.metadata.id);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onDestroy() {\n    if (!this.relationsProcessor || !this.componentManager || !this.metadata) {\n      return;\n    }\n\n    this.relationsProcessor.destroyComponent(this.metadata.id);\n    this.componentManager.unregisterComponent(this.metadata.id);\n  }\n\n}","//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata(metadataLoader, propertyName) {\n  if (ngDesignerMetadata) {\n    return function (target) {\n      target[propertyName] = metadataLoader();\n      return target;\n    };\n  }\n\n  return function (target) {\n    return target;\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Dynamic item extension base class\n */\nexport class DynamicItemExtensionBase {\n  //######################### constructor #########################\n  constructor(metadata) {\n    this.metadata = metadata;\n    /**\n     * Indication whether was extension initialized\n     */\n\n    this.initialized = false;\n  } //######################### public methods - implementation of DynamicItemExtension #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize(injector, element, instance) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.initialized = true;\n      _this.injector = injector;\n      _this.element = element;\n      _this.instance = instance;\n      yield _this.onInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  optionsChange(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.options = options;\n\n      if (!_this2.initialized) {\n        return;\n      }\n\n      yield _this2.onOptionsChange();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  destroy() {\n    this.onDestroy();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialization of component\n   */\n\n\n  onInit() {}\n  /**\n   * Called on change of options of component\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Called on destruction of component\n   */\n\n\n  onDestroy() {}\n\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","SwitchView","_viewContainerRef","_templateRef","_created","create","createEmbeddedView","destroy","clear","enforceState","created","NgSwitch","_defaultUsed","_caseCount","_lastCaseCheckIndex","_lastCasesMatched","ngSwitch","newValue","_ngSwitch","_updateDefaultCases","_addCase","_addDefault","view","_defaultViews","push","_matchCase","matched","useDefault","i","length","NgSwitchCase","viewContainer","templateRef","_view","ngDoCheck","ngSwitchCase","i0","NgSwitchDefault","mixinErrorState","base","args","super","errorState","updateErrorState","oldState","parent","_parentFormGroup","_parentForm","matcher","errorStateMatcher","_defaultErrorStateMatcher","control","ngControl","newState","isErrorState","stateChanges","next","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","ErrorStateMatcher","touched","MatFormFieldControl","MatFormFieldModule","CommonModule","MatCommonModule","ObserversModule","nextUniqueId","MAT_ERROR","InjectionToken","MatError","ariaLive","elementRef","id","nativeElement","setAttribute","provide","useExisting","matFormFieldAnimations","transitionMessages","trigger","state","style","opacity","transition","animate","MatPlaceholder","MAT_PREFIX","MatPrefix","_MatFormFieldBase","mixinColor","_elementRef","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","_changeDetectorRef","_dir","_defaults","_platform","_ngZone","_animationMode","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","Subject","_hideRequiredMarker","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","Boolean","hideRequiredMarker","color","defaultColor","_appearance","oldValue","coerceBooleanProperty","_shouldAlwaysFloat","_canLabelFloat","hintLabel","_processHints","_floatLabel","markForCheck","_control","_explicitFormFieldControl","_controlNonStatic","_controlStatic","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_connectionContainerRef","ngAfterContentInit","_validateControlChild","controlType","classList","add","pipe","startWith","subscribe","_validatePlaceholders","_syncDescribedByIds","valueChanges","takeUntil","runOutsideAngular","onStable","updateOutlineGap","merge","_prefixChildren","changes","_suffixChildren","_hintChildren","_errorChildren","change","requestAnimationFrame","ngAfterContentChecked","ngAfterViewInit","detectChanges","ngOnDestroy","complete","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChildNonStatic","_labelChildStatic","_shouldLabelFloat","shouldLabelFloat","_hideControlPlaceholder","_getDisplayedMessages","_animateAndLockLabel","_label","fromEvent","take","_validateHints","ids","userAriaDescribedBy","split","startHint","find","hint","align","endHint","map","error","setDescribedByIds","labelEl","container","outlineStartSelector","outlineGapSelector","isBrowser","children","textContent","trim","gapElements","querySelectorAll","width","_isAttachedToDOM","startWidth","gapWidth","startEls","gapEls","containerRect","getBoundingClientRect","height","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","offsetWidth","Math","abs","outlineGapPadding","rect","right","left","element","getRootNode","rootNode","document","documentElement","contains","i2","ANIMATION_MODULE_TYPE","MatLabel","_MAT_HINT","MAT_SUFFIX","i3","MatHint","MatSuffix","FormComponentBase","_changeDetector","_element","_injector","_parentControl","valueOutput","patchValue","required","_required","removeValidators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","_registerValidations","parentControl","defaultControlType","initValue","logger","name","t","type","inputs","features","Object","prototype","FormComponentControlType","FORM_COMPONENT_CONTROL","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","then","FormDynamicModuleItemsProvider","tryToGet","source","fn","_this","package","debug","e","self","arguments","apply","err","undefined","token","factory","FormDynamicModuleTypesProvider","moduleName","FormDynamicModuleRelationsProvider","useClass","multi","FORM_MODULE_TYPES_PROVIDER","provideFormLayoutEditor","getFormControl","defaultValue","get","getControlForType","LayoutEditorMetadata","metadataLoader","_asyncToGenerator","LayoutComponentBase","changeDetector","componentElement","injector","extensions","initialized","destroyed","extensionsOptions","ext","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","_this2","optionsChange","onOptionsChange","onChanges","registerExtensions","invalidateVisuals","_changes","ComponentStylingExtension","_applyStyling","lastCssClass","cssClass","remove","margin","bottom","marginBottom","marginRight","top","marginTop","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","RelationsEditorMetadata","DynamicOutput","target","propertyKey","defineProperty","set","RelationsRegistrationExtension","relationsProcessor","componentManager","metadata","instance","registerComponent","updateRelations","destroyComponent","unregisterComponent","DynamicClassMetadata","propertyName","DynamicItemExtensionBase"],"sourceRoot":""}