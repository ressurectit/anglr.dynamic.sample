{"version":3,"file":"4795.client.chunk.da2122952c46321af4c9.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../form/src/metadata/formComponentBase.model.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/radio/metadata/radio.model.ts","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/radio/metadata/radio.layoutMetadata.ts"],"sourcesContent":["import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormComponentControlType} from '../misc/enums';\nimport {FormComponentOptions} from '../misc/formComponentBase.options';\n\n/**\n * Base form component model for properties editor\n */\nexport class FormComponentBaseModel implements FormComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Control name')\n    @LayoutPropertyDescription('Form control name')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public controlName: string|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public controlType: FormComponentControlType = FormComponentControlType.FormControl;\n\n    //######################### constructor #########################\n    constructor(value: FormComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}",null,"import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {FormComponentBaseModel} from '@anglr/dynamic/form';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {MaterialRadioComponentOptions} from '../radio.options';\n\n\n/**\n * Material radio model for properties editor\n */\nexport class MaterialRadioModel extends FormComponentBaseModel implements MaterialRadioComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Options')\n    @LayoutPropertyDescription('Radio options')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public options: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: MaterialRadioComponentOptions|undefined|null)\n    {\n        super(value);\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialRadioComponentOptions} from '../radio.options';\nimport {MaterialRadioModel} from './radio.model';\n\n\n/**\n * Material text field layout metadata\n */\nexport class MaterialRadioLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<MaterialRadioComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<MaterialRadioComponentOptions> =\n    {\n        name: 'Radio',\n        description: 'Material radio',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: MaterialRadioModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<MaterialRadioModel>(['options', 'controlName']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            options: 'Radio'\n        },\n        group: 'Material form fields'\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["FormComponentBaseModel","constructor","value","controlName","controlType","FormComponentControlType","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","genericPropertiesControlFor","GenericPropertiesControl","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","ReactiveFormsModule","CastPipesModule","NumberInputModule","MaterialRadioModel","super","options","MaterialRadioLayoutEditorMetadata","metaInfo","name","description","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","defaultOptions","group","Object","freeze"],"sourceRoot":""}