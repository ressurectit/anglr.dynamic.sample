{"version":3,"file":"7033.client.chunk.8b57882bcf1c103193ca.js","mappings":"0WAMO,MAAMA,EAAoC,e,EAAA,G,EAA6D,mBAAY,WAAW,mEAAsDC,qCAAsC,E,+KAAA,kBAAhL,mC,yHCQ1C,IAAMC,EAAN,MAmBQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,CAC7B,CAmBAC,YAAsBC,GAAA,KAAAA,SAAAA,EAjCZ,KAAAC,aAA6BL,KAAKI,SAASE,IAAIC,EAAAA,EAmCzD,CAOaC,YAAYC,GAAsB,I,EAAA,c,EAAA,YAE3C,IAAGC,EAAAA,EAAAA,GAA+B,UAAWD,EAC7C,CACI,IAAI,EAAKV,iBAEL,OAGJ,MAAMY,QAAoB,EAAKN,aAAaO,SAAwB,EAAKb,iBAAiBc,GAAI,EAAKd,iBAAiBe,MAEpH,IAAIH,EAEA,OAGJ,IAEI,EAAKI,gBAAkBJ,EAAY,EAAKK,K,CAE5C,MAAMC,GAEFC,QAAQC,MAAMF,E,EAErB,E,gLACL,CAOOG,oBAEP,IAvDAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,OAAO,2DAQRD,EAAAA,EAAAA,IAAAA,EAACE,EAAAA,EAAAA,MAAe,qEAzCPzB,GAAsB,UAFlC0B,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwB7B,IAAqC,6BA8C1B8B,EAAAA,KA7CvB5B,GCZb,S,mFCWM,SAAUyB,EAAcI,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIxB,IAAK,WAOD,OALIN,KAAK,IAAI8B,aAET9B,KAAK,IAAI8B,WAAgB,IAAIG,EAAAA,GAG1BjC,KAAK,IAAI8B,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIxB,IAAK,WAED,OAAON,KAAK,IAAI8B,IACpB,EACAI,IAAK,SAAShC,GAKV,GAHAF,KAAK,IAAI8B,KAAU5B,GACnBiC,EAAAA,EAAAA,IAAmBnC,KAAM8B,GAEtBH,GAASS,KAERpC,KAAK,GAAG8B,WAAcO,WAG1B,CACI,MAAMjC,EAAYJ,KAA+BsC,WAEjD,IAAIlC,EAEA,OAGJ,MAAMmC,EAAmBnC,EAASE,IAAIkC,EAAAA,GAChCC,EAAiBrC,EAASE,IAAIoC,EAAAA,GAC9B7B,EAAK0B,EAAiBI,MAAM3C,MAElC,IAAIa,EAEA,OAGJ4B,EAAeG,aACf,CACIC,YAAahC,EACbiC,WAAYhB,G,CAGxB,IAGvBH,GAASoB,WAERC,EAAAA,EAAAA,IAAmBpB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/transformData/transformData.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/transformData/transformData.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/transformData/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Transform data relations metadata loader\n */\nexport const TransformDataRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/transformData.relationsMetadata')).TransformDataRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {CodeExecutor, DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {TransformDataRelationsMetadataLoader} from './transformData.metadata';\nimport {TransformDataRelationsOptions} from './transformData.options';\nimport {TransformData} from './transformData.interface';\n\n/**\n * Transform data relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(TransformDataRelationsMetadataLoader)\nexport class TransformDataRelations<TData = any, TTransformedData = any> implements RelationsComponent<TransformDataRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: TransformDataRelationsOptions|undefined|null;\n\n    /**\n     * Code executor used for execution o\n     */\n    protected codeExecutor: CodeExecutor = this.injector.get(CodeExecutor);\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): TransformDataRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: TransformDataRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be transformed\n     */\n    @Input()\n    public data: TData|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Transformed data\n     */\n    @DynamicOutput()\n    public transformedData: TTransformedData|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<TransformDataRelations>('data') in changes)\n        {\n            if(!this.relationsOptions)\n            {\n                return;\n            }\n\n            const transformer = await this.codeExecutor.loadData<TransformData>(this.relationsOptions.id, this.relationsOptions.code);\n\n            if(!transformer)\n            {\n                return;\n            }\n\n            try\n            {\n                this.transformedData = transformer(this.data);\n            }\n            catch(e)\n            {\n                console.error(e);\n            }\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {TransformDataRelations} from './transformData.relations';\n\nexport default TransformDataRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["TransformDataRelationsMetadataLoader","TransformDataRelationsEditorMetadata","TransformDataRelations","relationsOptions","this","ɵRelationsOptions","value","constructor","injector","codeExecutor","get","CodeExecutor","ngOnChanges","changes","nameof","transformer","loadData","id","code","transformedData","data","e","console","error","invalidateVisuals","__decorate","Input","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector","options","target","propertyKey","prop","Object","defineProperty","Subject","set","defineAssignedProp","sync","next","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}