{"version":3,"file":"5489.client.chunk.a5c5db17d5348335b65c.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoCustomComponentsRegister/demoCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/layout/layout.component.html","webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/misc/services/resolverStaticRegister/resolverStaticRegister.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+dynamicContent/resolverRelations/resolverRelations.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/resolverRelations/resolverRelations.component.html","webpack://ng-universal-demo/./app/pages/+dynamicContent/dynamicContent.routes.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/dynamicContent.module.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'CUSTOM_COMPONENTS';\n\n/**\n * Demo custom components register\n */\n@Injectable()\nexport class DemoCustomComponentsRegister extends CustomComponentsRegister\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggles template as registered custom component\n     * @param name - Name of template to be toggled\n     */\n    public toggleRegisteredComponent(name: string): void\n    {\n        const customComponents = this.getRegisteredComponents();\n        const index = customComponents.indexOf(name);\n\n\n        if(index >= 0)\n        {\n            customComponents.splice(index, 1);\n        }\n        else\n        {\n            customComponents.push(name);\n        }\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Gets registered components\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return this._store.get<string[]|null>(CUSTOM_COMPONENTS) ?? [];\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Component, ChangeDetectionStrategy, FactoryProvider, ClassProvider, ExistingProvider, OnInit, Inject} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutEditor, REFRESH_PALETTE_OBSERVABLES} from '@anglr/dynamic/layout-editor';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {CustomComponentsRegister, provideEditorLayoutCustomComponents} from '@anglr/dynamic/layout-relations';\nimport {provideBasicLayoutEditor, StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {generateId} from '@jscrpt/common';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoCustomComponentsRegister} from '../../../services/demoCustomComponentsRegister';\nimport {DemoLayoutPackageManager} from '../../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutEditor} from '../../../dynamicItems/utils';\n\n/**\n * Component used for displaying layout editor\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'layout.component.html',\n    styleUrls: ['layout.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout ?? null),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideBasicLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideSampleLayoutEditor(),\n        provideEditorLayoutCustomComponents([], DemoCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n        <ExistingProvider>\n        {\n            provide: DemoCustomComponentsRegister,\n            useExisting: CustomComponentsRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (register: DemoCustomComponentsRegister) => register.registeredChange,\n            deps: [DemoCustomComponentsRegister],\n            multi: true,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'layout/:id'})\n@Authorize('layoutEditor-page')\nexport class LayoutComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of layout template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: LayoutComponentMetadata|null = this.emptyMetadata;\n\n    /**\n     * Gets empty metadata\n     */\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [] as LayoutComponentMetadata[],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<LayoutComponentMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            this.metadata = this._store.getData(this._id)?.layout ?? this.emptyMetadata;\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.layout = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n}","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<layout-editor class=\"flex-1\" [metadata]=\"metadata\"></layout-editor>","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport DynamicDataResolverRelations from '../../../../../dynamicItems/dynamicDataResolver/type';\nimport ActivatedRouteSnapshotRelations from '../../../../../dynamicItems/activatedRouteSnapshot/type';\n\n/**\n * Static components register for resolver relations\n */\n@Injectable()\nexport class ResolverStaticRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        result[DynamicDataResolverRelations.relationsId] = DynamicDataResolverRelations;\n        result[ActivatedRouteSnapshotRelations.relationsId] = ActivatedRouteSnapshotRelations;\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy, OnInit, Inject, FactoryProvider, ClassProvider} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideRestLayoutRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {provideBasicLayoutRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutRelationsEditor} from '@anglr/dynamic/material-components';\nimport {LayoutManager, provideEditorRelationsCustomComponents, provideLayoutRelationsEditorWithStatic} from '@anglr/dynamic/layout-relations';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoCustomComponentsRegister} from '../../../services/demoCustomComponentsRegister';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutRelationsEditor} from '../../../dynamicItems/utils';\nimport {ResolverStaticRegister} from '../misc';\n\n/**\n * Component used for displaying relations editor\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relations.component.html',\n    styleUrls: ['relations.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations ?? []),\n            deps: [StoreDataService]\n        },\n        provideBasicLayoutRelationsEditor(),\n        provideMaterialLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideRestLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideSampleLayoutRelationsEditor(),\n        provideEditorRelationsCustomComponents(provideLayoutRelationsEditorWithStatic(ResolverStaticRegister), DemoCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'relations/:id'})\n@Authorize('relationsEditor-page')\nexport class RelationsComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of relations template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<RelationsNodeMetadata[]>,\n                private layoutManager: LayoutManager,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            const metadata = this._store.getData(this._id);\n            this.metadata = metadata?.relations ?? [];\n\n            if(metadata?.layout)\n            {\n                this.layoutManager.setLayout(metadata?.layout);\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.relations = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n}\n","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {Component, ChangeDetectionStrategy, OnInit, Inject, ClassProvider} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {provideRelationsEditorWithStatic, RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {provideHandlebarsRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideRestRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideTinyMceRelationsEditor} from '@anglr/dynamic/tinymce-components';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleRelationsEditor} from '../../../dynamicItems/utils';\nimport {ResolverStaticRegister} from '../misc';\n\n/**\n * Component used for displaying resolver relations editor\n */\n@Component(\n{\n    selector: 'resolver-relations-editor-view',\n    templateUrl: 'resolverRelations.component.html',\n    styleUrls: ['resolverRelations.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        provideHandlebarsRelationsEditor(),\n        provideRestRelationsEditor(),\n        provideTinyMceRelationsEditor(),\n        provideSampleRelationsEditor(),\n        provideRelationsEditorWithStatic(ResolverStaticRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n        createStoreDataServiceFactory('RESOLVER_RELATIONS_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'resolverRelations/:id'})\n@Authorize('resolverRelationsEditor-page')\nexport class ResolverRelationsComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of relations template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<RelationsNodeMetadata[]>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<RelationsNodeMetadata[]>,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            this.metadata = this._store.getData(this._id) ?? [];\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._metaManager.getMetadata();\n        \n        if(metadata)\n        {\n            this._store.setData(this._id, metadata);\n        }\n    }\n}\n","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {LayoutComponent} from './layout/layout.component';\nimport {RelationsComponent} from './relations/relations.component';\nimport {ResolverRelationsComponent} from './resolverRelations/resolverRelations.component';\n\nexport const components =\n[\n    LayoutComponent,\n    RelationsComponent,\n    ResolverRelationsComponent,\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './dynamicContent.routes';\nimport {EditorControlsSAComponent} from '../../components';\n\n/**\n * Module for dynamic content application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutRelationsEditorModule,\n        EditorControlsSAComponent,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class DynamicContentModule\n{\n}"],"names":["CUSTOM_COMPONENTS","DemoCustomComponentsRegister","CustomComponentsRegister","constructor","_store","super","_registeredChange","Subject","registeredChange","this","asObservable","toggleRegisteredComponent","name","customComponents","getRegisteredComponents","index","indexOf","splice","push","set","next","get","i0","PERMANENT_STORAGE","factory","DemoLayoutPackageManager","PackageManager","LayoutComponent","_route","_metaManager","history","_id","metadata","emptyMetadata","id","generateId","displayName","package","options","children","ngOnInit","params","subscribe","getData","layout","save","getMetadata","undefined","setData","METADATA_STATE_MANAGER","LAYOUT_HISTORY_MANAGER","selectors","features","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","deps","StoreDataService","provideLayoutEditor","provideBasicLayoutEditor","provideMaterialLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideSampleLayoutEditor","provideEditorLayoutCustomComponents","useClass","useExisting","REFRESH_PALETTE_OBSERVABLES","register","multi","createStoreDataServiceFactory","decls","vars","consts","template","ctx","ComponentRouteAuthorized","path","Authorize","ActivatedRoute","Object","MetadataHistoryManager","DemoRelationsPackageManager","ResolverStaticRegister","Register","getDefinedTypes","result","DynamicDataResolverRelations","ActivatedRouteSnapshotRelations","t","RelationsComponent","layoutManager","relations","setLayout","RELATIONS_HISTORY_MANAGER","RELATIONS_METADATA_STORAGE","provideBasicLayoutRelationsEditor","provideMaterialLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideRestLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideSampleLayoutRelationsEditor","provideEditorRelationsCustomComponents","provideLayoutRelationsEditorWithStatic","LayoutManager","ResolverRelationsComponent","provideHandlebarsRelationsEditor","provideRestRelationsEditor","provideTinyMceRelationsEditor","provideSampleRelationsEditor","provideRelationsEditorWithStatic","components","DynamicContentModule","DynamicLayoutRelationsEditorModule","EditorControlsSAComponent","ModuleRoutes"],"sourceRoot":""}