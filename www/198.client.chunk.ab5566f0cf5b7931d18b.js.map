{"version":3,"file":"198.client.chunk.ab5566f0cf5b7931d18b.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/common/authorize.decorator.ts","webpack://ng-universal-demo/../../../src/common/auth.guard.ts","webpack://ng-universal-demo/../../../src/common/componentRouteAuthorized.decorator.ts","webpack://ng-universal-demo/../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../src/misc/enums.ts","webpack://ng-universal-demo/../../../src/paginator/paginator.ts","webpack://ng-universal-demo/../../../src/plugins/dataLoader/types.ts","webpack://ng-universal-demo/../../../src/plugins/paging/pagingAbstract.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/paging/basic/basicPaging.component.html","webpack://ng-universal-demo/../../../src/plugins/paging/basic/basicPaging.component.ts","webpack://ng-universal-demo/../../../src/plugins/paging/basic/basicPaging.component.html","webpack://ng-universal-demo/../../../src/plugins/dataLoader/dataLoaderAbstract.component.ts","webpack://ng-universal-demo/../../../src/plugins/dataLoader/async/asyncDataLoader.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/bodyContentRendererAbstract.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/contentRenderer/table/body/basic/tableBodyContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/body/basic/tableBodyContentRenderer.component.ts","webpack://ng-universal-demo/../../../src/enums/orderByDirection.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/body/basic/tableBodyContentRenderer.component.html","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/contentRenderer/table/header/basic/tableHeaderContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/header/basic/tableHeaderContentRenderer.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/headerContentRendererAbstract.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/header/basic/tableHeaderContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/contentRendererAbstract.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/tableContentRenderer.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/contentRenderer/table/tableContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/tableContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/metadataSelector/no/noMetadataSelector.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/noDataRenderer/simple/simpleNoDataRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/noDataRenderer/simple/simpleNoDataRenderer.component.ts","webpack://ng-universal-demo/../../../src/plugins/noDataRenderer/simple/simpleNoDataRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/rowSelector/types.ts","webpack://ng-universal-demo/../../../src/plugins/rowSelector/basic/basicRowSelector.component.ts","webpack://ng-universal-demo/../../../src/plugins/gridInitializer/no/noGridInitializer.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/components/grid/grid.component.html","webpack://ng-universal-demo/../../../src/components/grid/grid.component.ts","webpack://ng-universal-demo/../../../src/components/grid/grid.component.html","webpack://ng-universal-demo/../../../src/components/metadata/basicTable/basicTableColumn.context.ts","webpack://ng-universal-demo/../../../src/components/metadata/basicTable/basicTableColumn.component.ts","webpack://ng-universal-demo/../../../src/components/metadata/basicTable/basicTableMetadataGatherer.component.ts","webpack://ng-universal-demo/../../../src/components/metadata/types.ts"],"sourcesContent":["import {Injector} from '@angular/core';\nimport {Dictionary, isBlank, isString, PromiseOr} from '@jscrpt/common';\n\n/**\n * Extended type with authorization permission definition\n */\nexport interface AuthorizationDecoratedComponent\n{\n    /**\n     * Definition of permissions required for authorization for all routes\n     */\n    permissions?: AuthorizeOptions;\n\n    /**\n     * Route specific permissions, can be applied only for specific route, overrides `permissions`\n     */\n    routeSpecificPermissions?: Dictionary<AuthorizeOptions>;\n}\n\n/**\n * Options passed to `Authorize` decorator\n */\nexport interface AuthorizeOptions\n{\n    /**\n     * Name of permission or array of permissions that is requested for displaying component\n     */\n    permission: string|string[];\n\n    /**\n     * Indication that AND condition should be used instead of OR condition if multiple permissions are provided\n     */\n    andCondition?: boolean;\n\n    /**\n     * Indication that provided string is set of loggical operations among permission names, if this is true andCondition is ignored\n     */\n    conditionString?: boolean;\n\n    /**\n     * Callback for additional condition that is added to evaluation of permission\n     */\n    addCondition?: (injector: Injector) => PromiseOr<boolean>;\n}\n\n/**\n * Used for setting required permission name for authentication\n * @param permission - Name of requested permission, array of permission names or AuthorizeOptions that is used for displaying of component\n * @param route - If provided route specific permission will be created applied only to specified route\n */\nexport function Authorize(permission: string|string[]|AuthorizeOptions, route?: string)\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        let options: AuthorizeOptions;\n\n        if(isString(permission) || Array.isArray(permission))\n        {\n            options =\n            {\n                permission\n            };\n        }\n        else\n        {\n            options = permission;\n        }\n\n        const typedTarget = target as unknown as AuthorizationDecoratedComponent;\n\n        if(isBlank(route))\n        {\n            typedTarget.permissions = options;\n        }\n        else\n        {\n            typedTarget.routeSpecificPermissions ??= {};\n            typedTarget.routeSpecificPermissions[route] = options;\n        }\n\n        return target;\n    };\n}","import {Injectable, Injector} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, Router, UrlTree, UrlSegmentGroup} from '@angular/router';\nimport {isBlank, flatMapArray} from '@jscrpt/common';\n\nimport {AuthorizeOptions} from './authorize.decorator';\nimport {AuthenticationService} from './authentication.service';\nimport {AuthorizationDecoratedComponent} from './authorize.decorator';\nimport {evaluatePermissions} from '../misc/utils';\n\n/**\n * Routing guard that is used for authorization of user\n */\n@Injectable({providedIn: 'root'})\nexport class AuthGuard implements CanActivate\n{\n    //######################### constructor #########################\n    constructor(private _authSvc: AuthenticationService,\n                private _injector: Injector,\n                private _router: Router)\n    {\n    }\n\n    //######################### implementation of CanActivate #########################\n\n    /**\n     * Tests whether component can be activated\n     * @param next - Information about next coming route\n     */\n    public async canActivate(next: ActivatedRouteSnapshot) : Promise<boolean>\n    {\n        const component = next.component as unknown as AuthorizationDecoratedComponent;\n        let authOptions: AuthorizeOptions|undefined;\n\n        //route specific auth options\n        if(next.routeConfig?.path &&\n           component.routeSpecificPermissions?.[next.routeConfig.path])\n        {\n            authOptions = component.routeSpecificPermissions[next.routeConfig.path];\n        }\n        //common auth options\n        else if(component.permissions)\n        {\n            authOptions = component.permissions;\n        }\n        \n        if(!authOptions)\n        {\n            return true;\n        }\n\n        let addCondition: boolean = true;\n\n        //evaluate add condition\n        if(authOptions.addCondition)\n        {\n            addCondition = await authOptions.addCondition(this._injector);\n        }\n\n        const userIdentity = this._authSvc.userIdentity;\n\n        if(isBlank(userIdentity))\n        {\n            throw new Error('AuthenticationService must be initialized before first use of AuthGuard');\n        }\n\n        const authorized = evaluatePermissions(userIdentity.permissions,\n                                               authOptions.permission,\n                                               authOptions.andCondition ?? false,\n                                               authOptions.conditionString ?? false,\n                                               addCondition);\n\n        const urlSegmentGroup = new UrlSegmentGroup(flatMapArray(next.pathFromRoot.map(itm => itm.url)), {});\n        const urlTree = new UrlTree();\n        urlTree.root = urlSegmentGroup;\n        urlTree.queryParams = {};\n        const nextPath = this._router.serializeUrl(urlTree);\n\n        //user is authenticated and not authorized\n        if(!authorized && userIdentity.isAuthenticated)\n        {\n            this._authSvc.showAccessDenied();\n\n            return false;\n        }\n        //not authorized, not authenticated, not on login page\n        else if(!authorized && !userIdentity.isAuthenticated && !this._authSvc.isAuthPage(nextPath))\n        {\n            this._authSvc.showAuthPage();\n            \n            return false;\n        }\n\n        return true;\n    }\n}","import {ComponentRoute, ComponentRouteDefinition} from '@anglr/common/router';\n\nimport {AuthGuard} from './auth.guard';\n\n/**\n * Defines route for component on which is this decorator applied, automatically adds `AuthGuard`\n * @param route - Definition of route\n */\nexport function ComponentRouteAuthorized(route: ComponentRouteDefinition): ClassDecorator\n{\n    route.canActivate ??= [];\n\n    //adds auth guard if there is no one\n    if(route.canActivate.indexOf(AuthGuard) < 0)\n    {\n        route.canActivate.push(AuthGuard);\n    }\n\n    return ComponentRoute(route);\n}\n","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","/**\n * Available paging position where should be rendered\n */\nexport enum PagingPosition\n{\n    /**\n     * Paging will be rendered above grid content\n     */\n    Top,\n\n    /**\n     * Paging will be rendered below grid content\n     */\n    Bottom\n}","/**\r\n * Class for paging evaluation\r\n */\r\nexport class Paginator\r\n{\r\n    //######################### private fields ######################### \r\n\r\n    /**\r\n     * First page set to paginator\r\n     */\r\n    private _base: number = 1;\r\n\r\n    /**\r\n     * Number of items per page\r\n     */\r\n    private _itemsPerPage: number = 10;\r\n\r\n    /**\r\n     * Index of current page\r\n     */\r\n    private _page: number = 1;\r\n\r\n    /**\r\n     * Number of all items to be used for counting paging\r\n     */\r\n    private _itemCount: number = 0;\r\n\r\n    //######################### public methods #########################\r\n\r\n    /**\r\n     * Sets current page number.\r\n     * @param page - Page number\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setPage(page: number): Paginator\r\n    {\r\n        this._page = page;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns current page number.\r\n     * @returns number Current page number\r\n     */\r\n    public getPage(): number\r\n    {\r\n        return this._base + this.getPageIndex();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Returns first page number.\r\n    /// </summary>\r\n    /// <returns>Number of first page</returns>\r\n    public GetFirstPage(): number\r\n    {\r\n        return this._base;\r\n    }\r\n\r\n    /**\r\n     * Returns last page number.\r\n     * @returns number Number of last page\r\n     */\r\n    public getLastPage(): number\r\n    {\r\n        return this._base + Math.max(0, this.getPageCount() - 1);\r\n    }\r\n\r\n    /**\r\n     * Sets first page (base) number.\r\n     * @param baseVal - Index of base page\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setBase(baseVal: number): Paginator\r\n    {\r\n        this._base = baseVal;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns first page (base) number.\r\n     * @returns number Index of base page\r\n     */\r\n    public getBase(): number\r\n    {\r\n        return this._base;\r\n    }\r\n\r\n    /**\r\n     * Gets indication whether is the current page the first one?\r\n     * @returns boolean True if current page is first one\r\n     */\r\n    public isFirst(): boolean\r\n    {\r\n        return this.getPageIndex() == 0;\r\n    }\r\n\r\n    /**\r\n     * Gets indication whether is the current page the last one?\r\n     * @returns boolean True if current page is last one, otherwise false\r\n     */\r\n    public isLast(): boolean\r\n    {\r\n        return this.getPageIndex() == (this.getPageCount() - 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of pages.\r\n     * @returns number Total number of pages\r\n     */\r\n    public getPageCount(): number\r\n    {\r\n        return Math.ceil(this._itemCount / this._itemsPerPage);\r\n    }\r\n\r\n    /**\r\n     * Sets the number of items to display on a single page.\r\n     * @param itemsPerPage - Number of items per page\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setItemsPerPage(itemsPerPage: number): Paginator\r\n    {\r\n        this._itemsPerPage = Math.max(1, itemsPerPage);\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items to display on a single page.\r\n     * @returns number Number of items per one page\r\n     */\r\n    public getItemsPerPage(): number\r\n    {\r\n        return this._itemsPerPage;\r\n    }\r\n\r\n    /**\r\n     * Sets the total number of items.\r\n     * @param itemCount - Count of items or -1 for infinity\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setItemCount(itemCount: number): Paginator\r\n    {\r\n        this._itemCount = itemCount == -1 ? Number.MAX_VALUE : Math.max(0, itemCount);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of items.\r\n     * @returns number Total number of items\r\n     */\r\n    public getItemCount(): number\r\n    {\r\n        return this._itemCount;\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute index of the first item on current page.\r\n     * @returns number Absolute index of first item\r\n     */\r\n    public getOffset(): number\r\n    {\r\n        return this.getPageIndex() * this._itemsPerPage;\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute index of the first item on current page in countdown paging.\r\n     * @returns number Countdown offset of first item\r\n     */\r\n    public getCountdownOffset(): number\r\n    {\r\n        return Math.max(0, this._itemCount - (this.getPageIndex() + 1) * this._itemsPerPage);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items on current page.\r\n     * @returns number Number of items on page\r\n     */\r\n    public getLength(): number\r\n    {\r\n        return Math.min(this._itemsPerPage, this._itemCount - this.getPageIndex() * this._itemsPerPage);\r\n    }\r\n\r\n    /**\r\n     * Gets indexes for items on current page (zero-based indexes)\r\n     * @returns number Array of items indexes\r\n     */\r\n    public getIndexesPerPage(): number[]\r\n    {\r\n        const result: number[] = [];\r\n\r\n        if(isNaN(this.getOffset()))\r\n        {\r\n            for(let x = 0; x < this.getItemCount(); x++)\r\n            {\r\n                result.push(x);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for(let x = this.getOffset(); x < this.getOffset() + this.getLength(); x++)\r\n            {\r\n                result.push(x);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets list of page numbers with specified dispersion\r\n     * @param dispersion - Number identifying dispersion\r\n     * @returns number Page numbers according specified dispersion\r\n     */\r\n    public getPagesWithDispersion(dispersion: number): number[]\r\n    {\r\n        const currentPage = this.getPage();\r\n        const pageCount = this.getPageCount();\r\n        const numberOfPages = Math.min(pageCount, Math.max(0, dispersion) * 2 + 1) - 1;\r\n        let startingPage = Math.max(this._base, currentPage - dispersion);\r\n\r\n        if ((currentPage + dispersion) > pageCount)\r\n        {\r\n            startingPage = pageCount - numberOfPages;\r\n        }\r\n\r\n        let x: number;\r\n        const endingPage = startingPage + numberOfPages;\r\n\r\n        const result: number[] = [];\r\n\r\n        for (x = startingPage; x <= endingPage; x++)\r\n        {\r\n            result.push(x);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets list of page numbers with specified dispersion, pages are trimmed if current page is near beginning or end\r\n     * @param dispersion - Number identifying dispersion\r\n     * @returns number Page numbers according specified dispersion\r\n     */\r\n    public getPagesWithTrimDispersion(dispersion: number): number[]\r\n    {\r\n        const currentPage = this.getPage();\r\n        const lastPage = this.getLastPage();\r\n        const startingPage = Math.max(this._base, currentPage - dispersion);\r\n        let x: number;\r\n        const endingPage = Math.min(lastPage, currentPage + dispersion);\r\n\r\n        const result: number[] = [];\r\n        \r\n        for (x = startingPage; x <= endingPage; x++)\r\n        {\r\n            result.push(x);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets list of page numbers generated with uniform distribution\r\n     * @param numberOfPages - Number of pages that are going to be uniformly distributed between first and last page (including)\r\n     * @returns number Uniformly distributed page numbers\r\n     */\r\n    public getPagesWithUniformDistribution(numberOfPages: number): number[]\r\n    {\r\n        numberOfPages = Math.max(1, numberOfPages - 1);\r\n        const pageCount = this.getPageCount();\r\n        numberOfPages = Math.min(numberOfPages, pageCount - 1);\r\n        const step = pageCount / numberOfPages;\r\n        let page = this.GetFirstPage();\r\n        let x;\r\n\r\n        const result: number[] = [];\r\n\r\n        for (x = 0; x < numberOfPages; x++)\r\n        {\r\n            result.push(Math.round(page));\r\n\r\n            page += step;\r\n        }\r\n\r\n        result.push(pageCount);\r\n        \r\n        return result;\r\n    }\r\n\r\n    //######################### protected methods #########################\r\n\r\n    /**\r\n     * Returns zero-based page number.\r\n     * @returns number Zero-based page number\r\n     */\r\n    protected getPageIndex(): number\r\n    {\r\n        return Math.min(Math.max(0, this._page - this._base), Math.max(0, this.getPageCount() - 1));\r\n    }\r\n}","import {InjectionToken} from '@angular/core';\n\nimport {DataLoaderOptions} from './dataLoader.interface';\n\n/**\n * Possible states of data loader\n */\nexport enum DataLoaderState\n{\n    /**\n     * Loader has not loaded any data yet, this is initial state before first try for loading data\n     */\n    NotLoadedYet,\n\n    /**\n     * This state is present during loading of data when there are no data present\n     */\n    NoDataLoading,\n\n    /**\n     * This state is present any time loader is loading new data, while some data were already loaded\n     */\n    DataLoading,\n\n    /**\n     * This state is present when there are no data available after loading of data\n     */\n    NoData,\n\n    /**\n     * Loader loaded and have some data to be displayed\n     */\n    Loaded\n}\n\n/**\n * Constant used for accessing data loader in grid\n */\nexport const DATA_LOADER = 'DATA_LOADER';\n\n/**\n * Token for injecting options for data loader\n */\nexport const DATA_LOADER_OPTIONS: InjectionToken<DataLoaderOptions> = new InjectionToken<DataLoaderOptions>('DATA_LOADER_OPTIONS');","import {EventEmitter, ChangeDetectorRef, Injectable, Inject, Optional, Input, Output, OnDestroy, ElementRef} from '@angular/core';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {PagingOptions, Paging} from './paging.interface';\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {GridPluginGeneric} from '../../misc';\nimport {DataLoader, DataResponse} from '../dataLoader';\nimport {DATA_LOADER} from '../dataLoader/types';\nimport {GridInitializer} from '../gridInitializer';\nimport {GRID_INITIALIZER} from '../gridInitializer/types';\n\n/**\n * Abstract class that represents any paging component\n */\n@Injectable()\nexport abstract class PagingAbstractComponent<TCssClasses = any, TOptions extends PagingOptions<TCssClasses> = any> implements Paging, GridPluginGeneric<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for changes in data\n     */\n    protected _dataChangedSubscription: Subscription;\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Options specific to paging implementation\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Data loader used within grid\n     */\n    protected _dataLoader?: DataLoader<DataResponse>;\n\n    //######################### public properties #########################\n\n    /**\n     * Zero based index of first displayed item on page\n     */\n    public abstract get firstItemIndex(): number;\n\n    /**\n     * Gets or sets options specific to paging implementation\n     */\n    @Input()\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n\n        this.optionsSet();\n    }\n\n    /**\n     * Gets or sets index of currently selected page\n     */\n    public abstract get page(): number;\n    public abstract set page(page: number);\n\n    /**\n     * Gets or sets number of items currently used for paging\n     */\n    public abstract get itemsPerPage(): number;\n    public abstract set itemsPerPage(itemsPerPage: number);\n\n    /**\n     * Gets or sets number of all items that are paged with current filter criteria\n     */\n    public abstract get totalCount(): number;\n    public abstract set totalCount(totalCount: number);\n\n    /**\n     * Grid plugin instances available for this plugin\n     */\n    public gridPlugins: GridPluginInstances;\n\n    //######################### public properties - events #########################\n\n    /**\n     * Occurs when index of currently selected page has been changed\n     */\n    @Output()\n    public pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /**\n     * Occurs when number of items per page currently selected has been changed\n     */\n    @Output()\n    public itemsPerPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances)\n    {\n        this.gridPlugins = gridPlugins;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._dataChangedSubscription)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Method that initialize paging component, this method can be used for initialization if paging used dynamicaly\n     */\n    public initialize(): void\n    {\n        const gridInitializer = this.gridPlugins[GRID_INITIALIZER] as GridInitializer;\n        let initialPage = this._options.initialPage;\n        let initialItemsPerPage = this._options.initialItemsPerPage;\n\n        if(gridInitializer)\n        {\n            gridInitializer.initialize();\n\n            const page = gridInitializer.getPage();\n\n            if(isPresent(page))\n            {\n                initialPage = page;\n            }\n\n            const itemsPerPage = gridInitializer.getItemsPerPage();\n\n            if(isPresent(itemsPerPage))\n            {\n                initialItemsPerPage = itemsPerPage;\n            }\n        }\n\n        this.page = initialPage;\n        this.itemsPerPage = initialItemsPerPage;\n\n        const dataLoader: DataLoader<DataResponse> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse>;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader && dataLoader)\n        {\n            this._dataLoader = dataLoader;\n            this.totalCount = this._dataLoader.result.totalCount;\n\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() =>\n            {\n                this.totalCount = this._dataLoader.result.totalCount;\n                this.invalidateVisuals();\n            });\n        }\n\n        this._initialized = true;\n    }\n\n    /**\n     * Initialize options\n     */\n    public initOptions()\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Method called when options are set, allowing to do something after that when overriden\n     */\n    protected optionsSet()\n    {\n    }\n}",null,"import {Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef} from '@angular/core';\nimport {Paginator, isPresent, extend} from '@jscrpt/common';\n\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {PagingAbstractComponent} from '../pagingAbstract.component';\nimport {BasicPagingOptions, BasicPaging, CssClassesBasicPaging} from './basicPaging.interface';\nimport {PAGING_OPTIONS} from '../types';\nimport {GridInitializer} from '../../gridInitializer';\nimport {GRID_INITIALIZER} from '../../gridInitializer/types';\n\n/**\n * Items per page single item\n */\nexport class ItemsPerPageItem\n{\n    /**\n     * Indication that item is active\n     */\n    public isActive: boolean;\n\n    /**\n     * Value of item\n     */\n    public value: number;\n}\n\n/**\n * Default options for paging\n * @internal\n */\nconst defaultOptions: BasicPagingOptions =\n{\n    initialItemsPerPage: 10,\n    initialPage: 1,\n    itemsPerPageValues: [],\n    pagesDispersion: 4,\n    cssClasses:\n    {\n        pagingUl: 'pagination pagination-sm margin-sm-vertical',\n        itemsPerPageDiv: 'pull-right',\n        displayedItemsCountSpan: 'items-count',\n        itemsPerPageUl: 'pagination pagination-sm margin-sm-vertical'\n    }\n};\n\n/**\n * Component used for rendering basic simple paging\n */\n@Component(\n{\n    selector: 'ng-basic-paging',\n    templateUrl: 'basicPaging.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\n        `.items-count\n        {\n            float: left;\n            margin-right: 8px;\n            line-height: 42px;\n        }\n        .pointer-cursor\n        {\n            cursor: pointer;\n        }`\n    ]\n})\nexport class BasicPagingComponent extends PagingAbstractComponent<CssClassesBasicPaging, BasicPagingOptions> implements BasicPaging\n{\n    //######################### protected fields #########################\n\n    /**\n     * Paginator used for getting page numbers\n     */\n    protected _paginator: Paginator = new Paginator();\n\n    /**\n     * Index of currently selected page\n     */\n    protected _page: number;\n\n    /**\n     * Number of items currently used for paging\n     */\n    protected _itemsPerPage: number;\n\n    /**\n     * Number of all items that are paged with current filter criteria\n     */\n    protected _totalCount: number;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Text displaying items count\n     * @internal\n     */\n    public displayedItemsCount: string = '';\n\n    /**\n     * Array of pages that are rendered\n     * @internal\n     */\n    public pages: {isActive: boolean; isDisabled: boolean; title: string; page: number}[] = [];\n\n    /**\n     * Array of items per page that are rendered\n     * @internal\n     */\n    public itemsPerPageItems: ItemsPerPageItem[] = [];\n\n    //######################### public properties #########################\n\n    /**\n     * Zero based index of first displayed item on page\n     */\n    public get firstItemIndex(): number\n    {\n        const offset = this._paginator.getOffset();\n\n        return isNaN(offset) ? 0 : offset;\n    }\n\n    /**\n     * Indication whether plugin is already initialized\n     */\n    public get initialized(): boolean\n    {\n        return this._initialized;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets index of currently selected page\n     */\n    @Input()\n    public get page(): number\n    {\n        return this._page;\n    }\n    public set page(page: number)\n    {\n        this._page = page;\n        this._paginator.setPage(page);\n        this._generatePages();\n        this._setDisplayedItemsCount();\n        (this.gridPlugins[GRID_INITIALIZER] as GridInitializer).setPage(this._page);\n    }\n\n    /**\n     * Gets or sets number of items currently used for paging\n     */\n    @Input()\n    public get itemsPerPage(): number\n    {\n        return this._itemsPerPage;\n    }\n    public set itemsPerPage(itemsPerPage: number)\n    {\n        this._itemsPerPage = itemsPerPage;\n        this._paginator.setItemsPerPage(itemsPerPage);\n        this._generatePages();\n        this._generateItemsPerPage();\n        this._setDisplayedItemsCount();\n        (this.gridPlugins[GRID_INITIALIZER] as GridInitializer).setItemsPerPage(this._itemsPerPage);\n    }\n\n    /**\n     * Gets or sets number of all items that are paged with current filter criteria\n     */\n    @Input()\n    public get totalCount(): number\n    {\n        return this._totalCount;\n    }\n    public set totalCount(totalCount: number)\n    {\n        this._totalCount = totalCount;\n        this._paginator.setItemCount(totalCount);\n        this._generatePages();\n        this._setDisplayedItemsCount();\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances,\n                @Inject(PAGING_OPTIONS) @Optional() options?: BasicPagingOptions)\n    {\n        super(pluginElement, changeDetector, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n        this.optionsSet();\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Sets page for current paging\n     * @param page - Page index to be set\n     * @internal\n     */\n    public setPage(page: {isActive: boolean; isDisabled: boolean; page: number})\n    {\n        if(page.isActive || page.isDisabled)\n        {\n            return;\n        }\n\n        this.page = page.page;\n        this.pageChange.emit(this.page);\n    }\n\n    /**\n     * Sets items per page for current paging\n     * @param itemsPerPage - Number of items per page\n     * @internal\n     */\n    public setItemsPerPage(itemsPerPage: ItemsPerPageItem)\n    {\n        if(itemsPerPage.isActive)\n        {\n            return;\n        }\n\n        this.itemsPerPage = itemsPerPage.value;\n        this.itemsPerPageChange.emit(this.itemsPerPage);\n    }\n\n    /**\n     * Converts number to text that is going to be rendered for ItemsPerPage\n     * @param value - Text that is returned for items per page\n     * @internal\n     */\n    public renderItemsPerPageText(value: number): string\n    {\n        return isNaN(value) ? '&infin;' : value.toString();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method that initialize paging component, this method can be used for initialization if paging used dynamicaly\n     */\n    public override initialize()\n    {\n        super.initialize();\n\n        this._paginator.setPage(this._page);\n        this._paginator.setItemsPerPage(this._itemsPerPage);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Generates rendered pages\n     */\n    protected _generatePages()\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        const pageCount = this._paginator.getPageCount() || 1;\n\n        //Applied when displaying all items\n        if(isNaN(pageCount))\n        {\n            if(this._page != 1)\n            {\n                this._page = 1;\n                this._paginator.setPage(1);\n                this.pageChange.emit(1);\n            }\n\n            this.pages = [];\n\n            return;\n        }\n\n        if(!isNaN(pageCount) && pageCount < this._page)\n        {\n            this.setPage(\n            {\n                page: pageCount,\n                isActive: false,\n                isDisabled: false\n            });\n        }\n\n        this.pages = [];\n\n        this.pages.push(\n        {\n            isActive: false,\n            isDisabled: this._paginator.isFirst(),\n            title: '&laquo;',\n            page: this._paginator.GetFirstPage()\n        });\n\n        this._paginator.getPagesWithTrimDispersion(this.options.pagesDispersion).forEach(page =>\n        {\n            this.pages.push(\n            {\n                isActive: this._paginator.getPage() == page,\n                isDisabled: false,\n                title: page.toString(),\n                page: page\n            });\n        });\n\n        this.pages.push(\n        {\n            isActive: false,\n            isDisabled: this._paginator.isLast(),\n            title: '&raquo;',\n            page: this._paginator.getLastPage()\n        });\n    }\n\n    /**\n     * Generates rendered items per page\n     */\n    protected _generateItemsPerPage()\n    {\n        this.itemsPerPageItems.forEach(itm => itm.isActive = itm.value == this.itemsPerPage || (isNaN(itm.value) && isNaN(this.itemsPerPage)));\n    }\n\n    /**\n     * Sets displayed items count\n     */\n    protected _setDisplayedItemsCount()\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        const displayedItems = this._paginator.getOffset() + this._paginator.getLength();\n\n        this.displayedItemsCount = '';\n\n        if(isNaN(displayedItems) && isPresent(this._totalCount))\n        {\n            this.displayedItemsCount = this._totalCount.toString();\n        }\n        else if(!isNaN(displayedItems) && isPresent(this._totalCount))\n        {\n            this.displayedItemsCount = `${displayedItems}/${this._totalCount}`;\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * Method called when options are set, allowing to do something after that when overriden\n     */\n    protected override optionsSet()\n    {\n        this.itemsPerPageItems = this.options.itemsPerPageValues.map(itm =>\n        {\n            return {\n                value: itm,\n                isActive: false\n            };\n        });\n\n        this._generateItemsPerPage();\n    }\n}","<div>\r\n    <ul [ngClass]=\"options?.cssClasses?.pagingUl\">\r\n        <li *ngFor=\"let page of pages\" [ngClass]=\"{disabled: page.isDisabled, active: page.isActive, 'pointer-cursor': !page.isDisabled && !page.isActive}\">\r\n            <a (click)=\"setPage(page)\">\r\n                <span [innerHtml]=\"page.title\"></span>\r\n            </a>\r\n        </li>\r\n    </ul>\r\n\r\n    <div [ngClass]=\"options?.cssClasses?.itemsPerPageDiv\" *ngIf=\"initialized && !!itemsPerPageItems && itemsPerPageItems.length > 0\">\r\n        <span [ngClass]=\"options?.cssClasses?.displayedItemsCountSpan\">{{displayedItemsCount}}</span>\r\n\r\n        <ul [ngClass]=\"options?.cssClasses?.itemsPerPageUl\">\r\n            <li *ngFor=\"let itemsPerPage of itemsPerPageItems\" [ngClass]=\"{active: itemsPerPage.isActive, 'pointer-cursor': !itemsPerPage.isActive}\">\r\n                <a (click)=\"setItemsPerPage(itemsPerPage)\">\r\n                    <span [innerHtml]=\"renderItemsPerPageText(itemsPerPage.value)\"></span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>","import {Injectable, Inject, Optional, OnDestroy, EventEmitter, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subscription, Subject} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {DataLoader, DataLoaderOptions} from './dataLoader.interface';\nimport {Paging} from '../paging';\nimport {PAGING} from '../paging/types';\nimport {ContentRenderer} from '../contentRenderer';\nimport {CONTENT_RENDERER} from '../contentRenderer/types';\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {GridPluginGeneric} from '../../misc';\nimport {DataLoaderState} from './types';\n\n/**\n * Abstract class that represents any data loader component\n */\n@Injectable()\nexport abstract class DataLoaderAbstractComponent<TOptions extends DataLoaderOptions = any, TOrdering = any, TResult = any> implements DataLoader<TResult>, GridPluginGeneric<TOptions>, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Last page used for loading data\n     */\n    private _lastPage: number;\n\n    /**\n     * Last items per page used for loading data\n     */\n    private _lastItemsPerPage: number;\n\n    /**\n     * Last ordering used for loading data\n     */\n    private _lastOrdering: TOrdering;\n\n    //######################### protected fields #########################\n\n    /**\n     * Options for 'AsyncDataLoader'\n     */\n    protected _options: TOptions;\n\n    /**\n     * Paging used in grid\n     */\n    protected _paging: Paging;\n\n    /**\n     * Current state of data loader\n     */\n    protected _state: DataLoaderState = DataLoaderState.NotLoadedYet;\n\n    /**\n     * Subscription for page change in paging\n     */\n    protected _pageChangedSubscription: Subscription;\n\n    /**\n     * Subscription for items per page change in paging\n     */\n    protected _itemsPerPageChangedSubscription: Subscription;\n\n    /**\n     * Subscription for ordering change in content renderer\n     */\n    protected _orderingChangedSubscription: Subscription;\n\n    /**\n     * Content renderer used for rendering data\n     */\n    protected _contentRenderer: ContentRenderer<TOrdering>;\n\n    /**\n     * Subject for debounce dataCallback\n     */\n    protected _debounceSubject: Subject<boolean> = new Subject<boolean>();\n\n    /**\n     * Subscription for debounce dataCallback\n     */\n    protected _debounceSubscription: Subscription = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Current state of data loader\n     */\n    public get state(): DataLoaderState\n    {\n        return this._state;\n    }\n\n    /**\n     * Gets or sets options for 'DataLoader'\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Current result of data loader\n     */\n    public abstract get result(): TResult;\n\n    /**\n     * Indication that data has changed\n     */\n    public resultChange: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Indication that data loader state has changed\n     */\n    public stateChange: EventEmitter<void> =  new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._debounceSubscription)\n        {\n            this._debounceSubscription.unsubscribe();\n            this._debounceSubscription = null;\n        }\n\n        if(this._pageChangedSubscription)\n        {\n            this._pageChangedSubscription.unsubscribe();\n            this._pageChangedSubscription = null;\n        }\n\n        if(this._itemsPerPageChangedSubscription)\n        {\n            this._itemsPerPageChangedSubscription.unsubscribe();\n            this._itemsPerPageChangedSubscription = null;\n        }\n\n        if(this._orderingChangedSubscription)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n        }\n    }\n\n    //######################### public methodes - implements DataLoader #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        this._registerDebounce();\n\n        const paging: Paging = this.gridPlugins[PAGING] as Paging;\n\n        if(this._paging && this._paging != paging)\n        {\n            this._pageChangedSubscription.unsubscribe();\n            this._pageChangedSubscription = null;\n            this._itemsPerPageChangedSubscription.unsubscribe();\n            this._itemsPerPageChangedSubscription = null;\n\n            this._paging = null;\n        }\n\n        if(!this._paging)\n        {\n            this._paging = paging;\n\n            this._pageChangedSubscription = this._paging.pageChange.subscribe(() => this._debounceSubject.next());\n            this._itemsPerPageChangedSubscription = this._paging.itemsPerPageChange.subscribe(() => this._debounceSubject.next());\n        }\n\n        const contentRenderer: ContentRenderer<TOrdering> = this.gridPlugins[CONTENT_RENDERER] as ContentRenderer<TOrdering>;\n\n        if(this._contentRenderer && this._contentRenderer != contentRenderer)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n\n            this._contentRenderer = null;\n        }\n\n        if(!this._contentRenderer)\n        {\n            this._contentRenderer = contentRenderer;\n\n            this._orderingChangedSubscription = this._contentRenderer.orderingChange.subscribe(() => this._debounceSubject.next());\n        }\n\n        if(this._options.autoLoadData)\n        {\n            this.loadData();\n        }\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals()\n    {\n    }\n\n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    public loadData(force?: boolean)\n    {\n        this._debounceSubject.next(force);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    protected abstract _loadData(force?: boolean);\n\n    /**\n     * Check for changes on input\n     */\n    protected _checkChanges(): boolean\n    {\n        if(this._paging.page != this._lastPage ||\n           this._paging.itemsPerPage != this._lastItemsPerPage ||\n           this._contentRenderer.ordering != this._lastOrdering)\n        {\n            this._lastPage = this._paging.page;\n            this._lastItemsPerPage = this._paging.itemsPerPage;\n            this._lastOrdering = this._contentRenderer.ordering;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Registers debounce subject\n     */\n    private _registerDebounce()\n    {\n        if(this._debounceSubscription)\n        {\n            this._debounceSubscription.unsubscribe();\n            this._debounceSubscription = null;\n        }\n\n        this._debounceSubscription = this._debounceSubject\n            .asObservable()\n            .pipe(debounceTime(this._options.debounceDataCallback))\n            .subscribe(force => this._loadData(force));\n    }\n}","import {Component, ChangeDetectionStrategy, Inject, Optional, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {DataResponse} from '../dataLoader.interface';\nimport {DATA_LOADER_OPTIONS, DataLoaderState} from '../types';\nimport {AsyncDataLoaderOptions, AsyncDataLoader} from './asyncDataLoader.interface';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {DataLoaderAbstractComponent} from '../dataLoaderAbstract.component';\n\n/**\n * Default options for async data loader\n * @internal\n */\nconst defaultOptions: AsyncDataLoaderOptions =\n{\n    autoLoadData: true,\n    debounceDataCallback: 30,\n    dataCallback: () => new Promise<any>(() => {})\n};\n\n/**\n * Data loader that allows asynchronous data loading\n * \n * @example\n * If you want to use async data loader you have to provide at least `dataCallback`.\n * \n * Sample grid options\n * ``` typescript\n * var gridOptions =\n * {\n *     plugins:\n *     {\n *         dataLoader:\n *         {\n *             type: AsyncDataLoaderComponent, //this is default value could be omitted\n *             options: <AsyncDataLoaderOptions<DataType, SimpleOrdering>>\n *             {\n *                 dataCallback: this._getData.bind(this)\n *             }\n *         }\n *     }\n * };\n * ```\n * \n * @example\n * data callback should look like this\n * ``` typescript\n * private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<DataType>>\n * {\n *     let result = await this._dataSvc\n *         .getData(\n *         {\n *             page: (page - 1),\n *             size: itemsPerPage\n *         }).toPromise();\n * \n *     return {\n *         data: result.content,\n *         totalCount: result.totalElements\n *     };\n * }\n * ```\n */\n@Component(\n{\n    selector: 'ng-async-data-loader',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AsyncDataLoaderComponent<TData = any, TOrdering = any> extends DataLoaderAbstractComponent<AsyncDataLoaderOptions<TData, TOrdering>, TOrdering, DataResponse<TData>> implements AsyncDataLoader<TData>\n{\n    //######################### private fields #########################\n\n    /**\n     * Current result of data loader\n     */\n    private _result?: DataResponse<TData> =\n    {\n        data: [],\n        totalCount: 0\n    };\n\n    //######################### public properties #########################\n\n    /**\n     * Current result of data loader\n     */\n    public get result(): DataResponse<TData>\n    {\n        return this._result;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances,\n                @Inject(DATA_LOADER_OPTIONS) @Optional() options?: AsyncDataLoaderOptions<TData, TOrdering>)\n    {\n        super(pluginElement, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### protected methodes - implements DataLoaderAbstractComponent #########################\n    \n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    protected async _loadData(force?: boolean)\n    {\n        if(!force && !this._checkChanges())\n        {\n            return;\n        }\n\n        this._state = (this._result && this._result.data && this._result.data.length) ? DataLoaderState.DataLoading : DataLoaderState.NoDataLoading;\n        this.stateChange.emit();\n\n        const result = await this._options.dataCallback(this._paging.page, this._paging.itemsPerPage, this._contentRenderer.ordering);\n\n        this._state = (result && result.data && result.data.length) ? DataLoaderState.Loaded : DataLoaderState.NoData;\n        this.stateChange.emit();\n\n        this._paging.totalCount = result.totalCount;\n        this._paging.invalidateVisuals();\n        this._result = result;\n        this.resultChange.emit();\n    }\n}","import {ChangeDetectorRef, Inject, Injectable, ElementRef, Optional} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {BodyContentRenderer, BodyContentRendererOptions} from './contentRenderer.interface';\nimport {Paging} from '../paging';\nimport {PAGING} from '../paging/types';\nimport {GridPluginGeneric} from '../../misc';\n\n//TODO - compute classes before rendering\n//TOOD - mergeClasses as pipe\n\n/**\n * Abstract component for body content renderer\n */\n@Injectable()\nexport class BodyContentRendererAbstractComponent<TData = any, TOptions extends BodyContentRendererOptions<TCssClasses> = any, TMetadata = any, TCssClasses = any> implements BodyContentRenderer<TData, TMetadata>, GridPluginGeneric<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for body content renderer\n     */\n    protected _options: TOptions;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Starting index of currently displayed items\n     */\n    public startingIndex: number = 0;\n\n    //######################### public properties - implementation of BodyContentRenderer #########################\n\n    /**\n     * Options for body content renderer\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Data that are rendered\n     */\n    public data: TData[];\n\n    /**\n     * Metadata used for rendering\n     */\n    public metadata: TMetadata;\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances)\n    {\n    }\n\n    //######################### public methods - implementation of CssDivsBodyContentRenderer<TData, BasicTableColumn> #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this.startingIndex = (this.gridPlugins[PAGING] as Paging).firstItemIndex;\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Merges css classes specified as strings\n     */\n    public mergeStringClasses(...classes: string[])\n    {\n        const result = [];\n\n        classes.forEach(cls => cls ? (result.push(cls)) : null);\n\n        return result;\n    }\n}",null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Optional, Inject, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {BasicTableColumn, BasicTableMetadata} from '../../../../../components/metadata';\nimport {TableBodyContentRendererOptions} from '../../tableContentRenderer.interface';\nimport {GridPluginInstances} from '../../../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../../../components/grid/types';\nimport {BODY_CONTENT_RENDERER_OPTIONS} from '../../../types';\nimport {BodyContentRendererAbstractComponent} from '../../../bodyContentRendererAbstract.component';\n\n/**\n * Default options for 'TableBodyContentRendererComponent'\n * @internal\n */\nconst defaultOptions: TableBodyContentRendererOptions =\n{\n};\n\n/**\n * Component used for rendering tbody for 'TableContentRenderer'\n */\n@Component(\n{\n    selector: 'tbody.content-renderer',\n    templateUrl: 'tableBodyContentRenderer.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableBodyContentRendererComponent<TData = any> extends BodyContentRendererAbstractComponent<TData, TableBodyContentRendererOptions, BasicTableMetadata<BasicTableColumn<TData>>, any>\n{\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances,\n                @Inject(BODY_CONTENT_RENDERER_OPTIONS) @Optional() options: TableBodyContentRendererOptions)\n    {\n        super(pluginElement, changeDetector, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}","/**\r\n * Directions for ordering\r\n */\r\nexport enum OrderByDirection\r\n{\r\n    /**\r\n     * Items are ordered ascending\r\n     */\r\n    Ascending,\r\n    \r\n    /**\r\n     * Items are ordered descending\r\n     */\r\n    Descending\r\n}","<tr *ngFor=\"let datum of data; let index=index\">\r\n    <ng-template ngFor [ngForOf]=\"metadata?.columns\" let-meta>\r\n        <td [ngClass]=\"meta?.cellClass\"\r\n            [attr.data-header-title]=\"meta?.title\">\r\n            <ng-template [ngIf]=\"!meta?.bodyTemplate\" [ngIfElse]=\"bodyTemplate\">\r\n                {{datum[meta?.name]}}\r\n            </ng-template>\r\n\r\n            <ng-template #bodyTemplate [ngTemplateOutlet]=\"meta?.bodyTemplate\" [ngTemplateOutletContext]=\"meta?.getColumnContext(datum, meta, index, startingIndex)\">\r\n            </ng-template>\r\n        </td>\r\n    </ng-template>\r\n</tr>",null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, HostBinding, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {TableHeaderContentRendererOptions} from '../../tableContentRenderer.interface';\nimport {HEADER_CONTENT_RENDERER_OPTIONS} from '../../../types';\nimport {HeaderContentRendererAbstractComponent} from '../../../headerContentRendererAbstract.component';\nimport {GRID_PLUGIN_INSTANCES} from '../../../../../components/grid/types';\nimport {GridPluginInstances} from '../../../../../components/grid';\n\n/**\n * Default options for 'TableHeaderContentRendererComponent'\n * @internal\n */\nconst defaultOptions: TableHeaderContentRendererOptions =\n{\n    cssClasses:\n    {\n        thead: '',\n        thDefault: 'header-default',\n        thOrderable: 'header-orderable',\n        spanContent: 'header-content',\n        spanOrdering: 'header-ordering',\n        spanOrderingDirection:\n        {\n            none: 'fa fa-sort',\n            asc: 'fa fa-sort-up',\n            desc: 'fa fa-sort-down'\n        }\n    }\n};\n\n/**\n * Component used for rendering table header in table content renderer\n */\n@Component(\n{\n    selector: 'thead.content-renderer',\n    templateUrl: 'tableHeaderContentRenderer.component.html',\n    styleUrls: ['tableHeaderContentRenderer.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableHeaderContentRendererComponent<TData = any> extends HeaderContentRendererAbstractComponent<TData, TableHeaderContentRendererOptions>\n{\n    //######################### public properties - host #########################\n\n    /**\n     * Css class applied to header itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.thead;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(HEADER_CONTENT_RENDERER_OPTIONS) @Optional() options: TableHeaderContentRendererOptions,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances)\n    {\n        super(pluginElement, gridPlugins, changeDetector);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}","import {EventEmitter, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {OrderByDirection, extend} from '@jscrpt/common';\n\nimport {GridPluginInstances} from '../../components/grid';\nimport {HeaderContentRenderer, SimpleOrdering, BasicOrderableColumn, HeaderContentRendererOptions, CssClassesHeaderContentRenderer} from './contentRenderer.interface';\nimport {GridPluginGeneric} from '../../misc';\nimport {BasicTableMetadata} from '../../components/metadata';\nimport {GridInitializer} from '../gridInitializer';\nimport {GRID_INITIALIZER} from '../gridInitializer/types';\nimport {deserializeSimpleOrdering, serializeSimpleOrdering} from './types';\n\n/**\n * Abstract component for header content renderer\n */\nexport abstract class HeaderContentRendererAbstractComponent<TData = any, TOptions extends HeaderContentRendererOptions<CssClassesHeaderContentRenderer> = any> implements HeaderContentRenderer<SimpleOrdering, BasicTableMetadata<BasicOrderableColumn<TData>>>, GridPluginGeneric<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for header content renderer\n     */\n    protected _options: TOptions;\n\n    /**\n     * Current ordering state\n     */\n    protected _ordering: SimpleOrdering = null;\n\n    /**\n     * Instance of grid initializer\n     */\n    protected _gridInitializer: GridInitializer = null;\n\n    //######################### public properties - implementation of TableHeaderContentRenderer #########################\n\n    /**\n     * Options for header content renderer\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Metadata used for rendering\n     */\n    public metadata: BasicTableMetadata<BasicOrderableColumn<TData>>;\n\n    /**\n     * Current ordering state\n     */\n    public get ordering(): SimpleOrdering\n    {\n        if(!this._ordering)\n        {\n            this._ordering = deserializeSimpleOrdering(this._gridInitializer.getOrdering());\n\n            this._initializeOrderingCss();\n        }\n\n        return this._ordering;\n    }\n    public set ordering(ordering: SimpleOrdering)\n    {\n        this._gridInitializer.setOrdering(serializeSimpleOrdering(ordering));\n        this._ordering = ordering;\n    }\n\n    /**\n     * Occurs when ordering has changed\n     */\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                public gridPlugins: GridPluginInstances,\n                protected _changeDetector: ChangeDetectorRef)\n    {\n    }\n\n    //######################### public methods - implementation of TableHeaderContentRenderer #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this.orderingChange.emit();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        this._gridInitializer = this.gridPlugins[GRID_INITIALIZER] as GridInitializer;\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Resets metadata to defaults\n     * @param force - Indication whether forcibly reset ordering, otherwise it is reset only if column is not present in displayed metadata\n     */\n    public resetMetadata(force: boolean = false): void\n    {\n        //sets initial css classes for all columns\n        this._resetOrdering();\n\n        //only if current ordering column was removed from metadata or forced\n        if(force || !(!!this.ordering?.orderBy && this.metadata?.columns?.find(itm => itm.name == this.ordering.orderBy && itm.ordering)))\n        {\n            this.ordering = null;\n            this._resetOrdering();\n        }\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Merges css classes specified as strings\n     */\n    public mergeStringClasses(...classes: string[])\n    {\n        const result = [];\n\n        classes.forEach(cls => cls ? (result.push(cls)) : null);\n\n        return result;\n    }\n\n    /**\n     * Applies ordering for specified column\n     * @param meta - Metadata for column that was selected for ordering\n     */\n    public orderBy(meta: BasicOrderableColumn<TData>)\n    {\n        if(!meta.ordering)\n        {\n            return;\n        }\n\n        //no ordering, or ordering different column\n        if(!this.ordering || this.ordering.orderBy != meta.name)\n        {\n            this._resetOrdering();\n\n            this.ordering =\n            {\n                orderByDirection: OrderByDirection.Ascending,\n                orderBy: meta.name\n            };\n\n            meta.orderingClass = this.options.cssClasses.spanOrderingDirection.asc;\n            this.orderingChange.emit();\n        }\n        else if(this.ordering.orderByDirection == OrderByDirection.Ascending)\n        {\n            this.ordering =\n            {\n                orderByDirection: OrderByDirection.Descending,\n                orderBy: meta.name\n            };\n\n            meta.orderingClass = this.options.cssClasses.spanOrderingDirection.desc;\n            this.orderingChange.emit();\n        }\n        else\n        {\n            this.ordering = null;\n            meta.orderingClass = this.options.cssClasses.spanOrderingDirection.none;\n            this.orderingChange.emit();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Resets ordering to none\n     */\n    protected _resetOrdering()\n    {\n        this.metadata.columns.forEach(meta => meta.orderingClass = this.options.cssClasses.spanOrderingDirection.none);\n    }\n\n    /**\n     * Initialize ordering css\n     */\n    protected _initializeOrderingCss()\n    {\n        //initialize css for ordering if set\n        if(this._ordering?.orderBy)\n        {\n            const meta = this.metadata?.columns?.find(itm => itm.name == this._ordering.orderBy);\n\n            if(meta)\n            {\n                switch(this._ordering.orderByDirection)\n                {\n                    case OrderByDirection.Ascending:\n                    {\n                        meta.orderingClass = this.options.cssClasses.spanOrderingDirection.asc;\n\n                        break;\n                    }\n                    default:\n                    //case OrderByDirection.Descendant:\n                    {\n                        meta.orderingClass = this.options.cssClasses.spanOrderingDirection.desc;\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}","<tr>\r\n    <th *ngFor=\"let meta of metadata?.columns; let index=index\" \r\n        [ngClass]=\"mergeStringClasses(options?.cssClasses?.thDefault, meta?.headerClass, meta?.ordering ? options?.cssClasses?.thOrderable : null)\" \r\n        [style.width]=\"meta?.width\"\r\n        (click)=\"orderBy(meta)\"\r\n        [title]=\"meta?.headerTooltip || meta?.title\">\r\n        <ng-template [ngIf]=\"meta?.titleVisible\">\r\n            <ng-template [ngIf]=\"!meta?.headerTemplate\" [ngIfElse]=\"headerTemplate\">\r\n                <span [ngClass]=\"options?.cssClasses?.spanContent\">{{meta?.title}}</span>\r\n            </ng-template>\r\n\r\n            <ng-template #headerTemplate [ngTemplateOutlet]=\"meta?.headerTemplate\" [ngTemplateOutletContext]=\"meta?.getColumnContext(null, meta, index, 0)\">\r\n            </ng-template>\r\n\r\n            <span *ngIf=\"meta?.ordering\" [ngClass]=\"mergeStringClasses(options?.cssClasses?.spanOrdering, meta?.orderingClass)\"></span>\r\n        </ng-template>\r\n    </th>\r\n</tr>","import {EventEmitter, Inject, OnDestroy, resolveForwardRef, Directive, ElementRef, Optional, HostBinding} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {ContentRendererPlugins, ContentRendererOptions, ContentRenderer, HeaderContentRenderer, BodyContentRenderer, CssClassesContentRenderer} from './contentRenderer.interface';\nimport {BODY_CONTENT_RENDERER, HEADER_CONTENT_RENDERER} from './types';\nimport {MetadataSelector} from '../metadataSelector';\nimport {METADATA_SELECTOR} from '../metadataSelector/types';\nimport {DataResponse, DataLoader} from '../dataLoader';\nimport {DATA_LOADER} from '../dataLoader/types';\nimport {GridPluginGeneric} from '../../misc';\n\n/**\n * Abstract component for content renderers\n */\n@Directive()\nexport class ContentRendererAbstractComponent<TOrdering = any, TData = any, TMetadata = any, TOptions extends ContentRendererOptions<CssClassesContentRenderer, ContentRendererPlugins> = any> implements ContentRenderer<TOrdering>, OnDestroy, GridPluginGeneric<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for content renderer\n     */\n    protected _options: TOptions;\n\n    /**\n     * Metadata selector currently used\n     */\n    protected _metadataSelector: MetadataSelector<TMetadata>;\n\n    /**\n     * Data loader currently used\n     */\n    protected _dataLoader: DataLoader<DataResponse<TData>>;\n\n    /**\n     * Subscription listening for metadata changes\n     */\n    protected _metadataChangedSubscription: Subscription;\n\n    /**\n     * Subscription listening for data changes\n     */\n    protected _dataChangedSubscription: Subscription;\n\n    /**\n     * Subscription listening for ordering changes\n     */\n    protected _orderingChangedSubscription: Subscription;\n\n    //######################### public properties - implementation of TableContentRenderer #########################\n\n    /**\n     * Options for content renderer\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Information about current ordering state\n     */\n    public get ordering(): TOrdering\n    {\n        const headerRenderer: HeaderContentRenderer<TOrdering, TMetadata> = this.gridPlugins[HEADER_CONTENT_RENDERER] as HeaderContentRenderer<TOrdering, TMetadata>;\n\n        return headerRenderer ? headerRenderer.ordering : null;\n    }\n    public set ordering(ordering: TOrdering)\n    {\n        const headerRenderer: HeaderContentRenderer<TOrdering, TMetadata> = this.gridPlugins[HEADER_CONTENT_RENDERER] as HeaderContentRenderer<TOrdering, TMetadata>;\n\n        if(headerRenderer)\n        {\n            headerRenderer.ordering = ordering;\n        }\n\n        headerRenderer.invalidateVisuals();\n    }\n\n    /**\n     * Indication that ordering has changed\n     */\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### public properties - hosts #########################\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.containerDiv;\n    }\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._metadataChangedSubscription)\n        {\n            this._metadataChangedSubscription.unsubscribe();\n            this._metadataChangedSubscription = null;\n        }\n\n        if(this._orderingChangedSubscription)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n        }\n\n        if(this._dataChangedSubscription)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods - implementation of TableContentRenderer #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._invalidateVisuals();\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        const metadataSelector: MetadataSelector<TMetadata> = this.gridPlugins[METADATA_SELECTOR] as MetadataSelector<TMetadata>;\n\n        if(this._metadataSelector && this._metadataSelector != metadataSelector)\n        {\n            this._metadataChangedSubscription.unsubscribe();\n            this._metadataChangedSubscription = null;\n            this._metadataSelector = null;\n        }\n\n        if(!this._metadataSelector)\n        {\n            this._metadataSelector = metadataSelector;\n\n            this._metadataChangedSubscription = this._metadataSelector.metadataChange.subscribe(() => this._invalidateVisuals());\n        }\n\n        const dataLoader: DataLoader<DataResponse<TData>> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse<TData>>;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader)\n        {\n            this._dataLoader = dataLoader;\n\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() => this._invalidateVisuals());\n        }\n\n        this.gridPlugins[HEADER_CONTENT_RENDERER].initialize();\n        this.gridPlugins[BODY_CONTENT_RENDERER].initialize();\n\n        this._invalidateVisuals();\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n        if(this._options.plugins)\n        {\n            if(this._options.plugins.bodyRenderer)\n            {\n                this._options.plugins.bodyRenderer.type = resolveForwardRef(this._options.plugins.bodyRenderer.type);\n\n                if(this._options.plugins.bodyRenderer.instance &&\n                   this._options.plugins.bodyRenderer.instance != this.gridPlugins[BODY_CONTENT_RENDERER])\n                {\n                    this.gridPlugins[BODY_CONTENT_RENDERER] = this._options.plugins.bodyRenderer.instance;\n                    this._options.plugins.bodyRenderer.instance.gridPlugins = this.gridPlugins;\n                }\n\n                if(this.gridPlugins[BODY_CONTENT_RENDERER])\n                {\n                    if(this._options.plugins && this._options.plugins.bodyRenderer && this._options.plugins.bodyRenderer.options)\n                    {\n                        this.gridPlugins[BODY_CONTENT_RENDERER].options = this._options.plugins.bodyRenderer.options;\n                    }\n\n                    this.gridPlugins[BODY_CONTENT_RENDERER].initOptions();\n                }\n            }\n\n            if(this._options.plugins.headerRenderer)\n            {\n                this._options.plugins.headerRenderer.type = resolveForwardRef(this._options.plugins.headerRenderer.type);\n\n                if(this._options.plugins.headerRenderer.instance &&\n                   this._options.plugins.headerRenderer.instance != this.gridPlugins[HEADER_CONTENT_RENDERER])\n                {\n                    this.gridPlugins[HEADER_CONTENT_RENDERER] = this._options.plugins.headerRenderer.instance;\n                    this._options.plugins.headerRenderer.instance.gridPlugins = this.gridPlugins;\n\n                    if(this._orderingChangedSubscription)\n                    {\n                        this._orderingChangedSubscription.unsubscribe();\n                        this._orderingChangedSubscription = null;\n                    }\n\n                    this._orderingChangedSubscription = this._options.plugins.headerRenderer.instance.orderingChange.subscribe(() => this.orderingChange.emit());\n                }\n\n                if(this.gridPlugins[HEADER_CONTENT_RENDERER])\n                {\n                    if(this._options.plugins && this._options.plugins.headerRenderer && this._options.plugins.headerRenderer.options)\n                    {\n                        this.gridPlugins[HEADER_CONTENT_RENDERER].options = this._options.plugins.headerRenderer.options;\n                    }\n\n                    this.gridPlugins[HEADER_CONTENT_RENDERER].initOptions();\n                }\n            }\n        }\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Sets body renderer component\n     * @param bodyRenderer - Created body renderer that is rendered\n     * @internal\n     */\n    public setBodyRendererComponent(bodyRenderer: BodyContentRenderer<TData, TMetadata>)\n    {\n        if(!bodyRenderer)\n        {\n            return;\n        }\n\n        this.gridPlugins[BODY_CONTENT_RENDERER] = bodyRenderer;\n\n        if(this._options.plugins && this._options.plugins.bodyRenderer && this._options.plugins.bodyRenderer.options)\n        {\n            bodyRenderer.options = this._options.plugins.bodyRenderer.options;\n        }\n\n        bodyRenderer.initOptions();\n\n        if(this._options.plugins && this._options.plugins.bodyRenderer && this._options.plugins.bodyRenderer.instanceCallback)\n        {\n            this._options.plugins.bodyRenderer.instanceCallback(bodyRenderer);\n        }\n    }\n\n    /**\n     * Sets header renderer component\n     * @param headerRenderer - Created header renderer that is rendered\n     * @internal\n     */\n    public setHeaderRendererComponent(headerRenderer: HeaderContentRenderer<TOrdering, TMetadata>)\n    {\n        if(!headerRenderer)\n        {\n            return;\n        }\n\n        this.gridPlugins[HEADER_CONTENT_RENDERER] = headerRenderer;\n\n        if(this._options.plugins && this._options.plugins.headerRenderer && this._options.plugins.headerRenderer.options)\n        {\n            headerRenderer.options = this._options.plugins.headerRenderer.options;\n        }\n\n        headerRenderer.initOptions();\n\n        if(this._options.plugins && this._options.plugins.headerRenderer && this._options.plugins.headerRenderer.instanceCallback)\n        {\n            this._options.plugins.headerRenderer.instanceCallback(headerRenderer);\n        }\n\n        if(this._orderingChangedSubscription)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n        }\n\n        this._orderingChangedSubscription = headerRenderer.orderingChange.subscribe(() => this.orderingChange.emit());\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Invalidates visuals, redraw template\n     */\n    protected _invalidateVisuals()\n    {\n        const bodyRenderer: BodyContentRenderer<TData, TMetadata> = this.gridPlugins[BODY_CONTENT_RENDERER] as BodyContentRenderer<TData, TMetadata>;\n        const headerRenderer: HeaderContentRenderer<TOrdering, TMetadata> = this.gridPlugins[HEADER_CONTENT_RENDERER] as HeaderContentRenderer<TOrdering, TMetadata>;\n\n        if(headerRenderer.metadata != this._metadataSelector.metadata)\n        {\n            headerRenderer.metadata = this._metadataSelector.metadata;\n            headerRenderer.resetMetadata();\n            headerRenderer.invalidateVisuals();\n        }\n\n        if(bodyRenderer.data != this._dataLoader.result.data || bodyRenderer.metadata != this._metadataSelector.metadata)\n        {\n            bodyRenderer.data = this._dataLoader.result.data;\n            bodyRenderer.metadata = this._metadataSelector.metadata;\n            bodyRenderer.invalidateVisuals();\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, Inject, Optional, OnDestroy, HostBinding, forwardRef, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {TableContentRendererOptions} from './tableContentRenderer.interface';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {CONTENT_RENDERER_OPTIONS} from '../types';\nimport {PluginDescription} from '../../../misc';\nimport {TableBodyContentRendererComponent} from './body/basic/tableBodyContentRenderer.component';\nimport {TableHeaderContentRendererComponent} from './header/basic/tableHeaderContentRenderer.component';\nimport {ContentRendererAbstractComponent} from '../contentRendererAbstract.component';\nimport {BodyContentRenderer, HeaderContentRenderer} from '../contentRenderer.interface';\n\n/**\n * Default options for 'TableContentRendererComponent'\n * @internal\n */\nconst defaultOptions: TableContentRendererOptions =\n{\n    cssClasses:\n    {\n        table: 'table table-condensed table-striped table-hover',\n        containerDiv: 'table-container'\n    },\n    plugins:\n    {\n        bodyRenderer: <PluginDescription<BodyContentRenderer>>\n        {\n            type: forwardRef(() => TableBodyContentRendererComponent)\n        },\n        headerRenderer: <PluginDescription<HeaderContentRenderer>>\n        {\n            type: forwardRef(() => TableHeaderContentRendererComponent)\n        }\n    }\n};\n\n/**\n * Component used for 'TableContentRendererComponent'\n */\n@Component(\n{\n    selector: 'div.table-content-renderer',\n    templateUrl: 'tableContentRenderer.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableContentRendererComponent<TOrdering = any, TData = any, TMetadata = any> extends ContentRendererAbstractComponent<TOrdering, TData, TMetadata, TableContentRendererOptions> implements OnDestroy\n{\n    //######################### public properties - hosts #########################\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public override get cssClass(): string\n    {\n        return this._options.cssClasses.containerDiv;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances,\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: TableContentRendererOptions)\n    {\n        super(pluginElement, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}",null,"<table [ngClass]=\"options?.cssClasses?.table\">\r\n    <ng-template [ngComponentOutletEx]=\"options?.plugins?.headerRenderer?.type\" (ngComponentOutletExCreated)=\"setHeaderRendererComponent($event)\"></ng-template>\r\n    <ng-template [ngComponentOutletEx]=\"options?.plugins?.bodyRenderer?.type\" (ngComponentOutletExCreated)=\"setBodyRendererComponent($event)\"></ng-template>\r\n</table>","import {Component, ChangeDetectionStrategy, EventEmitter, OnDestroy, ElementRef} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {NoMetadataSelector, NoMetadataSelectorOptions} from './noMetadataSelector.interface';\nimport {MetadataGatherer} from '../../../components/metadata';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GridPluginGeneric} from '../../../misc';\n\n/**\n * Plugin component for metadata selector, which does not allows selection of metadata\n */\n@Component(\n{\n    selector: 'ng-no-metadata-selector',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NoMetadataSelectorComponent<TMetadata = any> implements NoMetadataSelector<TMetadata>, GridPluginGeneric<NoMetadataSelectorOptions>, OnDestroy\n{\n    /**\n     * Subscription for metadata changes\n     */\n    private _metadataChangedSubscription: Subscription;\n\n    /**\n     * Indication whether gahterer has been initialized\n     */\n    private _gathererInitialized: boolean = false;\n\n    /**\n     * Instance of metadata gatherer, which is used for getting initial metadata\n     */\n    private _metadataGatherer: MetadataGatherer<TMetadata>;\n\n    //######################### public properties - implementation of NoMetadataSelector #########################\n\n    /**\n     * Options for metadata selector\n     */\n    public options: NoMetadataSelectorOptions;\n\n    /**\n     * Instance of metadata gatherer, which is used for getting initial metadata\n     */\n    public get metadataGatherer(): MetadataGatherer<TMetadata>\n    {\n        return this._metadataGatherer;\n    }\n    public set metadataGatherer(gatherer: MetadataGatherer<TMetadata>)\n    {\n        if(this._metadataGatherer != gatherer)\n        {\n            this._gathererInitialized = false;\n        }\n\n        this._metadataGatherer = gatherer;\n    }\n\n    /**\n     * Current metadata that are used for rendering\n     */\n    public metadata: TMetadata;\n\n    /**\n     * Occurs when metadata changed\n     */\n    public metadataChange: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Grid plugin instances available for this plugin\n     */\n    public gridPlugins: GridPluginInstances;\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of NoMetadataSelector #########################\n\n    /**\n     * Shows metadata selector\n     */\n    public show(): void\n    {\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        if(!this._gathererInitialized)\n        {\n            if(this._metadataChangedSubscription)\n            {\n                this._metadataChangedSubscription.unsubscribe();\n                this._metadataChangedSubscription = null;\n            }\n\n            this._metadataChangedSubscription = this.metadataGatherer.metadataChange.subscribe(() =>\n            {\n                this.metadata = this.metadataGatherer.getMetadata();\n\n                this.metadataChange.emit();\n            });\n        }\n\n        this.metadata = this.metadataGatherer.getMetadata();\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals()\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._metadataChangedSubscription)\n        {\n            this._metadataChangedSubscription.unsubscribe();\n            this._metadataChangedSubscription = null;\n        }\n    }\n}",null,"import {Inject, Component, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, OnDestroy} from '@angular/core';\nimport {STRING_LOCALIZATION, StringLocalization} from '@anglr/common';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NO_DATA_RENDERER_OPTIONS} from '../types';\nimport {GridPluginGeneric} from '../../../misc';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {DataLoader, DataResponse} from '../../dataLoader';\nimport {DATA_LOADER, DataLoaderState} from '../../dataLoader/types';\nimport {SimpleNoDataRenderer, CssClassesSimpleNoDataRenderer, SimpleNoDataRendererOptions} from './simpleNoDataRenderer.interface';\nimport {NoDataRendererTexts} from '../noDataRenderer.interface';\n\n//TODO - change texts for texts options with localizations\n\n/**\n * Default options for no data renderer\n * @internal\n */\nconst defaultOptions: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer> =\n{\n    texts:\n    {\n        loading: 'Loading ...',\n        noData: 'No data available.',\n        notLoaded: 'No data loaded yet'\n    },\n    cssClasses:\n    {\n        wrapperDiv: 'simple-no-data',\n        textSpan: 'simple-no-data-text'\n    }\n};\n\n/**\n * Component for basic simple no data renderer\n */\n@Component(\n{\n    selector: 'ng-simple-no-data',\n    templateUrl: 'simpleNoDataRenderer.component.html',\n    styleUrls: ['simpleNoDataRenderer.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SimpleNoDataRendererComponent implements SimpleNoDataRenderer, GridPluginGeneric<SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for grid plugin\n     */\n    protected _options: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>;\n\n    /**\n     * Data loader currently used\n     */\n    protected _dataLoader: DataLoader<DataResponse>;\n\n    /**\n     * Subscription for changes in state of data loader\n     */\n    protected _stateChangedSubscription: Subscription;\n\n    /**\n     * Subscription for changes in texts\n     */\n    protected _textsChangedSubscription: Subscription;\n\n    /**\n     * Object containing available texts\n     */\n    protected _texts: NoDataRendererTexts = {};\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Currently displayed text\n     */\n    public text: string;\n\n    //######################### public properties - implementation of NoDataRenderer #########################\n\n    /**\n     * Options for grid plugin\n     */\n    public get options(): SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>\n    {\n        return this._options;\n    }\n    public set options(options: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>)\n    {\n        this._options = extend(true, this._options, options);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\n                @Inject(STRING_LOCALIZATION) protected _stringLocalization: StringLocalization,\n                public pluginElement: ElementRef,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(NO_DATA_RENDERER_OPTIONS) @Optional() options?: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._stateChangedSubscription)\n        {\n            this._stateChangedSubscription.unsubscribe();\n            this._stateChangedSubscription = null;\n        }\n\n        if(this._textsChangedSubscription)\n        {\n            this._textsChangedSubscription.unsubscribe();\n            this._textsChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods - implementation of NoDataRenderer #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        const dataLoader: DataLoader<DataResponse> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse>;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._stateChangedSubscription.unsubscribe();\n            this._stateChangedSubscription = null;\n\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader)\n        {\n            this._dataLoader = dataLoader;\n\n            this._stateChangedSubscription = this._dataLoader.stateChange.subscribe(() => this._processLoaderState());\n        }\n\n        this._textsChangedSubscription = this._stringLocalization.textsChange.subscribe(() => this._initTexts());\n        this._initTexts();\n        \n        this.invalidateVisuals();\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process current loader state\n     */\n    protected _processLoaderState()\n    {\n        if(!this._dataLoader)\n        {\n            return;\n        }\n\n        switch(this._dataLoader.state)\n        {\n            case DataLoaderState.NoDataLoading:\n            {\n                this.text = this._texts.loading;\n\n                break;\n            }\n            case DataLoaderState.NoData:\n            {\n                this.text = this._texts.noData;\n\n                break;\n            }\n            case DataLoaderState.NotLoadedYet:\n            {\n                this.text = this._texts.notLoaded;\n\n                break;\n            }\n            default:\n            //case DataLoaderState.Loaded:\n            //case DataLoaderState.DataLoading:\n            {\n                this.text = null;\n\n                break;\n            }\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize texts\n     */\n    protected _initTexts()\n    {\n        Object.keys(this.options.texts).forEach(key =>\n        {\n            this._texts[key] = this._stringLocalization.get(this.options.texts[key]);\n        });\n\n        this._processLoaderState();\n    }\n}","<div [ngClass]=\"options?.cssClasses?.wrapperDiv\" *ngIf=\"!!text\">\r\n    <span [ngClass]=\"options?.cssClasses?.textSpan\" *ngIf=\"!options?.template; else options?.template\">{{text}}</span>\r\n</div>","import {InjectionToken} from '@angular/core';\n\nimport {RowSelectorOptions, RowSelector} from './rowSelector.interface';\nimport {Grid} from '../../components/grid';\n\n/**\n * Token for injecting options for row selector\n */\nexport const ROW_SELECTOR_OPTIONS: InjectionToken<RowSelectorOptions> = new InjectionToken<RowSelectorOptions>('ROW_SELECTOR_OPTIONS');\n\n/**\n * Constant used for accessing row selector in grid\n */\nexport const ROW_SELECTOR = 'ROW_SELECTOR';\n\n/**\n * Applies block of row selection to grid, if row was not selected checkbox change event will be blocked\n * @param grid - Instance of grid which is used\n * @param itm - Data item for row\n * @param event - Mouse event that occured\n */\nexport function applyRowSelectionBlock<TItem>(grid: Grid, itm: TItem, event: MouseEvent)\n{\n    const rowSelector = grid.getPlugin<RowSelector>(ROW_SELECTOR);\n\n    if(!rowSelector.isSelected(itm) && (event.target as HTMLInputElement).checked)\n    {\n        event.preventDefault();\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, EventEmitter, Inject, Optional, OnDestroy} from '@angular/core';\nimport {extend, isBlank} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {GridPluginGeneric} from '../../../misc';\nimport {DataLoader} from '../../dataLoader';\nimport {DATA_LOADER} from '../../dataLoader/types';\nimport {ROW_SELECTOR_OPTIONS} from '../types';\nimport {BasicRowSelectorOptions, BasicRowSelector} from './basicRowSelector.interface';\n\n/**\n * Default options for row selector\n * @internal\n */\nconst defaultOptions: BasicRowSelectorOptions =\n{\n    getRowId: null,\n    autoResetOnDataChange: false,\n    multiSelection: true,\n    getRowData: null\n};\n\n/**\n * Component used for handling row selection\n *\n * This component requires `ContentRenderer` which supports row selection, one possible use is with `TableContentRendererComponent` with `AdvancedTableBodyContentRendererComponent`, any\n * other `ContentRenderer` that supports row selection can be used\n *\n * Working with `BasicRowSelectorComponent` from code should be done using extensions methods\n *\n * @example\n * If you want to use row selection you must provide at least `getRowId`, you can use `getRowData` for obtaining selected data in requested format see below example:\n * \n * ``` typescript\n * var gridOptions =\n * {\n *     plugins:\n *     {\n *         contentRenderer:\n *         {\n *             options: <TableContentRendererOptions>\n *             {\n *                 plugins:\n *                 {\n *                     bodyRenderer:\n *                     {\n *                         type: AdvancedTableBodyContentRendererComponent\n *                     }\n *                 }\n *             }\n *         },\n *         rowSelector:\n *         {\n *             options: <RowSelectorOptions<SelectedDataType, DataType, string>>\n *             {\n *                 getRowId: item => item.uuid,\n *                 getRowData: item =>\n *                 {\n *                     return {\n *                         uuid: item.uuid,\n *                         myNumber: item.myNumber,\n *                         myString: item.myString\n *                     };\n *                 }\n *             }\n *         }\n *     }\n * };\n * ```\n *\n * @example\n * Example usage with `AdvancedTableBodyContentRendererComponent`\n * \n * ``` html\n * <ng-grid #grid [gridOptions]=\"gridOptions\">\n *     <basic-table-metadata>\n *         <basic-table-column id=\"uuid\" name=\"uuid\" title=\"Id\"></basic-table-column>\n *         <basic-table-column id=\"myNumber\" name=\"myNumber\" title=\"Number value\"></basic-table-column>\n *         <basic-table-column id=\"myString\" name=\"myString\" title=\"String value\"></basic-table-column>\n *\n *         <basic-table-column id=\"rowSelection\" name=\"rowSelection\" title=\"Row selection\">\n *             <!-- selection of all rows in header -->\n *             <ng-template #headerTemplate>\n *                 <input type=\"checkbox\" (click)=\"toggleAllSelected($event.target.checked, $event)\" [checked]=\"selectedAll\">\n *             </ng-template>\n *\n *             <!-- selection of single row -->\n *             <ng-template #bodyTemplate let-item let-rowSelector=\"rowSelector\" let-isSelected=\"isSelected\">\n *                 <input type=\"checkbox\" (click)=\"rowSelector.selectItem(item, $event.target.checked)\" [checked]=\"isSelected\">\n *             </ng-template>\n *         </basic-table-column>\n *     </basic-table-metadata>\n * </ng-grid>\n * ```\n *\n * @example\n * Selecting all items in code\n * \n * ``` typescript\n * public selectedAll: boolean = false;\n * \n * (at)ViewChild('grid')\n * public grid: GridComponent;\n * \n * public ngAfterViewInit()\n * {\n *     this._setSelectedFlags();\n *\n *     let dataLoader = this.grid.getPlugin<DataLoader<DataResponse>>(DATA_LOADER);\n *     let rowSelector = this.grid.getPlugin<RowSelector>(ROW_SELECTOR);\n *\n *     rowSelector.selectedChange.subscribe(() => this._setSelectedFlags());\n *     dataLoader.resultChange.subscribe(() => this._setSelectedFlags());\n * }\n *\n * public toggleAllSelected(value: boolean)\n * {\n *     this.grid.execute(selectAllOnPage(value));\n * }\n *\n * private _setSelectedFlags()\n * {\n *     this.selectedAll = this.grid.executeAndReturn(areSelectedAllOnPage());\n *\n *     this._changeDetector.detectChanges();\n * }\n * ```\n */\n@Component(\n{\n    selector: 'ng-basic-row-selector',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BasicRowSelectorComponent<TSelectedData = any, TData = any, TId = any> implements BasicRowSelector<TSelectedData, TData, TId>, GridPluginGeneric<BasicRowSelectorOptions<TSelectedData, TData, TId>>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for grid plugin\n     */\n    protected _options: BasicRowSelectorOptions<TSelectedData, TData, TId>;\n\n    /**\n     * Data loader used for loading data\n     */\n    protected _dataLoader: DataLoader;\n\n    /**\n     * Subscription for data changes\n     */\n    protected _dataChangedSubscription: Subscription;\n\n    //######################### public properties - implementation of RowSelector #########################\n\n    /**\n     * Options for grid plugin\n     */\n    public get options(): BasicRowSelectorOptions<TSelectedData, TData, TId>\n    {\n        return this._options;\n    }\n    public set options(options: BasicRowSelectorOptions<TSelectedData, TData, TId>)\n    {\n        this._options = extend(true, this._options, options) as BasicRowSelectorOptions<TSelectedData, TData, TId>;\n    }\n\n    /**\n     * Array of currently selected row ids\n     */\n    public selectedIds: TId[] = [];\n\n    /**\n     * Array of currently selected row data\n     */\n    public selectedData: TSelectedData[] = [];\n\n    /**\n     * Occurs when selection has changed\n     */\n    public selectedChange?: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(@Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\n                public pluginElement: ElementRef,\n                @Inject(ROW_SELECTOR_OPTIONS) @Optional() options?: BasicRowSelectorOptions<TSelectedData, TData, TId>)\n    {\n        this._options = extend(true, {}, defaultOptions, options) as BasicRowSelectorOptions<TSelectedData, TData, TId>;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._dataChangedSubscription)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods - implementation of RowSelector #########################\n\n    /**\n     * Resets current selection\n     * @param emit - Indication whether emit selection change\n     */\n    public resetSelection(emit: boolean = true)\n    {\n        this.selectedIds = [];\n        this.selectedData = [];\n\n        if(emit)\n        {\n            this.selectedChange.emit();\n        }\n    }\n\n    /**\n     * Adds item to selection (or remove it from selection if deselect is true)\n     * @param item - Item that is going to be selected\n     * @param select - Indication whether select specified item, defaults to true\n     */\n    public selectItem(item: TData, select: boolean = true)\n    {\n        if(isBlank(this.options.getRowId))\n        {\n            throw new Error('Missing \"getRowId\" method in options before first use!');\n        }\n\n        if(!this.options.multiSelection)\n        {\n            this.resetSelection(false);\n        }\n\n        const id = this.options.getRowId(item);\n        const index = this.selectedIds.indexOf(id);\n\n        //select if not selected\n        if(select && index < 0)\n        {\n            this.selectedIds.push(id);\n            this.selectedData.push(this.options.getRowData(item));\n\n            this.selectedChange.emit();\n        }\n        //remove from selection if selected\n        else if(!select && index >= 0)\n        {\n            this.selectedIds.splice(index, 1);\n            this.selectedData.splice(index, 1);\n            this.selectedIds = [...this.selectedIds];\n            this.selectedData = [...this.selectedData];\n\n            this.selectedChange.emit();\n        }\n    }\n\n    /**\n     * Gets indication whether item is currently selected\n     * @param item - Item that is tested for current selection\n     */\n    public isSelected(item: TData): boolean\n    {\n        if(isBlank(this.options.getRowId))\n        {\n            throw new Error('Missing \"getRowId\" method in options before first use!');\n        }\n\n        const id = this.options.getRowId(item);\n\n        return this.selectedIds.indexOf(id) > -1;\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        const dataLoader: DataLoader = this.gridPlugins[DATA_LOADER] as DataLoader;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader)\n        {\n            this._dataLoader = dataLoader;\n\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() =>\n            {\n                if(this.options.autoResetOnDataChange)\n                {\n                    this.resetSelection(false);\n                }\n            });\n        }\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n        if(!this.options.getRowData)\n        {\n            this.options.getRowData = this.options.getRowId as any;\n        }\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\n\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GridPluginGeneric} from '../../../misc';\nimport {NoGridInitializer, NoGridInitializerOptions} from './noGridInitializer.interface';\n\n\n/**\n * Component used for rendering no grid initializer\n */\n@Component(\n{\n    selector: 'ng-no-grid-initializer',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NoGridInitializerComponent implements NoGridInitializer, GridPluginGeneric<NoGridInitializerOptions>\n{\n    //######################### public properties - implementation of NoGridInitializer #########################\n\n    /**\n     * Element that represents plugin\n     */\n    public pluginElement: ElementRef;\n\n    /**\n     * Options for grid plugin\n     */\n    public options: NoGridInitializerOptions;\n\n    /**\n     * Grid plugin instances available for this plugin\n     */\n    public gridPlugins: GridPluginInstances;\n\n    //######################### public methods - implementation of NoGridInitializer #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    /**\n     * Gets stored page\n     */\n    public getPage(): number\n    {\n        return null;\n    }\n\n    /**\n     * Sets current page when changed\n     * @param page - Page to be stored\n     */\n    public setPage()\n    {\n    }\n\n    /**\n     * Gets stored items per page\n     */\n    public getItemsPerPage(): number\n    {\n        return null;\n    }\n\n    /**\n     * Sets current items per page when changed\n     * @param itemsPerPage - Items per page to be stored\n     */\n    public setItemsPerPage()\n    {\n    }\n\n    /**\n     * Gets stored ordering\n     */\n    public getOrdering(): string\n    {\n        return null;\n    }\n\n    /**\n     * Sets current ordering when changed\n     * @param ordering - Ordering as string to be stored\n     */\n    public setOrdering(): void\n    {\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Inject, Optional, Type, Input, OnInit, AfterViewInit, ContentChild, forwardRef, resolveForwardRef, ChangeDetectorRef, FactoryProvider} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Observable, BehaviorSubject} from 'rxjs';\n\nimport {GridPluginInstances, Grid, GridFunction} from './grid.interface';\nimport {GRID_PLUGIN_INSTANCES} from './types';\nimport {GridOptions, PluginDescription, GridPlugin} from '../../misc';\nimport {GRID_OPTIONS, PAGING_TYPE, DATA_LOADER_TYPE, CONTENT_RENDERER_TYPE, METADATA_SELECTOR_TYPE, NO_DATA_RENDERER_TYPE, ROW_SELECTOR_TYPE, GRID_INITIALIZER_TYPE} from '../../misc/types';\nimport {PagingPosition} from '../../misc/enums';\nimport {Paging} from '../../plugins/paging';\nimport {BasicPagingComponent} from '../../plugins/paging/components';\nimport {PAGING} from '../../plugins/paging/types';\nimport {MetadataGatherer} from '../metadata';\nimport {METADATA_GATHERER} from '../metadata/types';\nimport {DataLoader} from '../../plugins/dataLoader';\nimport {AsyncDataLoaderComponent} from '../../plugins/dataLoader/components';\nimport {DATA_LOADER} from '../../plugins/dataLoader/types';\nimport {ContentRenderer} from '../../plugins/contentRenderer';\nimport {TableContentRendererComponent} from '../../plugins/contentRenderer/components';\nimport {CONTENT_RENDERER} from '../../plugins/contentRenderer/types';\nimport {MetadataSelector} from '../../plugins/metadataSelector';\nimport {NoMetadataSelectorComponent} from '../../plugins/metadataSelector/components';\nimport {METADATA_SELECTOR} from '../../plugins/metadataSelector/types';\nimport {NoDataRenderer} from '../../plugins/noDataRenderer';\nimport {SimpleNoDataRendererComponent} from '../../plugins/noDataRenderer/components';\nimport {NO_DATA_RENDERER} from '../../plugins/noDataRenderer/types';\nimport {RowSelector} from '../../plugins/rowSelector';\nimport {BasicRowSelectorComponent} from '../../plugins/rowSelector/components';\nimport {ROW_SELECTOR} from '../../plugins/rowSelector/types';\nimport {GridInitializer} from '../../plugins/gridInitializer';\nimport {NoGridInitializerComponent} from '../../plugins/gridInitializer/components';\nimport {GRID_INITIALIZER} from '../../plugins/gridInitializer/types';\n\n//TODO - make grid css class customizable\n\n/**\n * Default 'GridOptions'\n * @internal\n */\nconst defaultOptions: GridOptions =\n{\n    autoInitialize: true,\n    pagingPosition: PagingPosition.Bottom,\n    plugins:\n    {\n        paging: <PluginDescription<Paging>>\n        {\n            type: forwardRef(() => BasicPagingComponent)\n        },\n        metadataSelector: <PluginDescription<MetadataSelector>>\n        {\n            type: forwardRef(() => NoMetadataSelectorComponent)\n        },\n        dataLoader: <PluginDescription<DataLoader>>\n        {\n            type: forwardRef(() => AsyncDataLoaderComponent)\n        },\n        contentRenderer: <PluginDescription<ContentRenderer>>\n        {\n            type: forwardRef(() => TableContentRendererComponent)\n        },\n        noDataRenderer: <PluginDescription<NoDataRenderer>>\n        {\n            type: forwardRef(() => SimpleNoDataRendererComponent)\n        },\n        rowSelector: <PluginDescription<RowSelector>>\n        {\n            type: forwardRef(() => BasicRowSelectorComponent)\n        },\n        gridInitializer: <PluginDescription<GridInitializer>>\n        {\n            type: forwardRef(() => NoGridInitializerComponent)\n        }\n    }\n};\n\n/**\n * Grid component used for rendering grid\n */\n@Component(\n{\n    selector: 'ng-grid',\n    templateUrl: 'grid.component.html',\n    styleUrls: ['grid.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: GRID_PLUGIN_INSTANCES,\n            useFactory: () => {return {};}\n        }\n    ]\n})\nexport class GridComponent implements OnInit, AfterViewInit, Grid\n{\n    //######################### private fields #########################\n\n    /**\n     * Grid options\n     */\n    private _gridOptions: GridOptions;\n\n    /**\n     * Subject used for indication that grid was initialized\n     */\n    private _initializedSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets grid options\n     */\n    @Input()\n    public get gridOptions(): GridOptions\n    {\n        return this._gridOptions;\n    }\n    public set gridOptions(options: GridOptions)\n    {\n        this._gridOptions = extend(true, this._gridOptions, options);\n    }\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs every time when grid is initialized or reinitialized\n     */\n    public get initialized(): Observable<boolean>\n    {\n        return this._initializedSubject.asObservable();\n    }\n\n    //######################### public properties - children #########################\n\n    /**\n     * Metadata gatherer instance\n     * @internal\n     */\n    @ContentChild(METADATA_GATHERER)\n    public metadataGatherer: MetadataGatherer;\n\n    //######################### constructors #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) private _pluginInstances: GridPluginInstances,\n                @Inject(GRID_OPTIONS) @Optional() options?: GridOptions,\n                @Inject(PAGING_TYPE) @Optional() pagingType?: Type<Paging>,\n                @Inject(GRID_INITIALIZER_TYPE) @Optional() gridInitializerType?: Type<GridInitializer>,\n                @Inject(DATA_LOADER_TYPE) @Optional() dataLoaderType?: Type<DataLoader>,\n                @Inject(CONTENT_RENDERER_TYPE) @Optional() contentRendererType?: Type<ContentRenderer>,\n                @Inject(METADATA_SELECTOR_TYPE) @Optional() metadataSelectorType?: Type<MetadataSelector>,\n                @Inject(NO_DATA_RENDERER_TYPE) @Optional() noDataRendererType?: Type<NoDataRenderer>,\n                @Inject(ROW_SELECTOR_TYPE) @Optional() rowSelectorType?: Type<RowSelector>)\n    {\n        const opts: GridOptions = extend({}, options);\n\n        if(!opts.plugins)\n        {\n            opts.plugins = {};\n        }\n\n        if(pagingType)\n        {\n            if(!opts.plugins.paging)\n            {\n                opts.plugins.paging = {};\n            }\n\n            opts.plugins.paging.type = pagingType;\n        }\n\n        if(gridInitializerType)\n        {\n            if(!opts.plugins.gridInitializer)\n            {\n                opts.plugins.gridInitializer = {};\n            }\n\n            opts.plugins.gridInitializer.type = gridInitializerType;\n        }\n\n        if(dataLoaderType)\n        {\n            if(!opts.plugins.dataLoader)\n            {\n                opts.plugins.dataLoader = {};\n            }\n\n            opts.plugins.dataLoader.type = dataLoaderType;\n        }\n        \n        if(contentRendererType)\n        {\n            if(!opts.plugins.contentRenderer)\n            {\n                opts.plugins.contentRenderer = {};\n            }\n\n            opts.plugins.contentRenderer.type = contentRendererType;\n        }\n\n        if(metadataSelectorType)\n        {\n            if(!opts.plugins.metadataSelector)\n            {\n                opts.plugins.metadataSelector = {};\n            }\n\n            opts.plugins.metadataSelector.type = metadataSelectorType;\n        }\n\n        if(noDataRendererType)\n        {\n            if(!opts.plugins.noDataRenderer)\n            {\n                opts.plugins.noDataRenderer = {};\n            }\n\n            opts.plugins.noDataRenderer.type = noDataRendererType;\n        }\n\n        if(rowSelectorType)\n        {\n            if(!opts.plugins.rowSelector)\n            {\n                opts.plugins.rowSelector = {};\n            }\n\n            opts.plugins.rowSelector.type = rowSelectorType;\n        }\n\n        this._gridOptions = extend(true, {}, defaultOptions, opts);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this.initOptions();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        if(this._gridOptions.autoInitialize)\n        {\n            this.initialize();\n        }\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Sets paging component\n     * @param paging - Created paging that is rendered\n     * @internal\n     */\n    public setPagingComponent(paging: Paging)\n    {\n        if(!paging)\n        {\n            return;\n        }\n\n        this._pluginInstances[PAGING] = paging;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.paging && this._gridOptions.plugins.paging.options)\n        {\n            paging.options = this._gridOptions.plugins.paging.options;\n        }\n\n        paging.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.paging && this._gridOptions.plugins.paging.instanceCallback)\n        {\n            this._gridOptions.plugins.paging.instanceCallback(paging);\n        }\n    }\n\n    /**\n     * Sets grid initializer component\n     * @param gridInitializer - Created grid initializer that is used\n     * @internal\n     */\n    public setGridInitializerComponent(gridInitializer: GridInitializer)\n    {\n        if(!gridInitializer)\n        {\n            return;\n        }\n\n        this._pluginInstances[GRID_INITIALIZER] = gridInitializer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.gridInitializer && this._gridOptions.plugins.gridInitializer.options)\n        {\n            gridInitializer.options = this._gridOptions.plugins.gridInitializer.options;\n        }\n\n        gridInitializer.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.gridInitializer && this._gridOptions.plugins.gridInitializer.instanceCallback)\n        {\n            this._gridOptions.plugins.gridInitializer.instanceCallback(gridInitializer);\n        }\n    }\n\n    /**\n     * Sets metadata selector component\n     * @param metadataSelector - Created metadata selector that is used\n     * @internal\n     */\n    public setMetadataSelectorComponent(metadataSelector: MetadataSelector)\n    {\n        if(!metadataSelector)\n        {\n            return;\n        }\n\n        this._pluginInstances[METADATA_SELECTOR] = metadataSelector;\n\n        metadataSelector.metadataGatherer = this.metadataGatherer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.metadataSelector && this._gridOptions.plugins.metadataSelector.options)\n        {\n            metadataSelector.options = this._gridOptions.plugins.metadataSelector.options;\n        }\n\n        metadataSelector.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.metadataSelector && this._gridOptions.plugins.metadataSelector.instanceCallback)\n        {\n            this._gridOptions.plugins.metadataSelector.instanceCallback(metadataSelector);\n        }\n    }\n\n    /**\n     * Sets data loader component\n     * @param dataLoader - Created data loader that is used\n     * @internal\n     */\n    public setDataLoaderComponent(dataLoader: DataLoader)\n    {\n        if(!dataLoader)\n        {\n            return;\n        }\n\n        this._pluginInstances[DATA_LOADER] = dataLoader;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.dataLoader && this._gridOptions.plugins.dataLoader.options)\n        {\n            dataLoader.options = this._gridOptions.plugins.dataLoader.options;\n        }\n\n        dataLoader.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.dataLoader && this._gridOptions.plugins.dataLoader.instanceCallback)\n        {\n            this._gridOptions.plugins.dataLoader.instanceCallback(dataLoader);\n        }\n    }\n\n    /**\n     * Sets content renderer component\n     * @param contentRenderer - Created content renderer that is rendered\n     * @internal\n     */\n    public setContentRendererComponent(contentRenderer: ContentRenderer)\n    {\n        if(!contentRenderer)\n        {\n            return;\n        }\n\n        this._pluginInstances[CONTENT_RENDERER] = contentRenderer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.contentRenderer && this._gridOptions.plugins.contentRenderer.options)\n        {\n            contentRenderer.options = this._gridOptions.plugins.contentRenderer.options;\n        }\n\n        contentRenderer.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.contentRenderer && this._gridOptions.plugins.contentRenderer.instanceCallback)\n        {\n            this._gridOptions.plugins.contentRenderer.instanceCallback(contentRenderer);\n        }\n    }\n\n    /**\n     * Sets no data renderer component\n     * @param noDataRenderer - Created no data renderer that is rendered\n     * @internal\n     */\n    public setNoDataRendererComponent(noDataRenderer: NoDataRenderer)\n    {\n        if(!noDataRenderer)\n        {\n            return;\n        }\n\n        this._pluginInstances[NO_DATA_RENDERER] = noDataRenderer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.noDataRenderer && this._gridOptions.plugins.noDataRenderer.options)\n        {\n            noDataRenderer.options = this._gridOptions.plugins.noDataRenderer.options;\n        }\n\n        noDataRenderer.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.noDataRenderer && this._gridOptions.plugins.noDataRenderer.instanceCallback)\n        {\n            this._gridOptions.plugins.noDataRenderer.instanceCallback(noDataRenderer);\n        }\n    }\n\n    /**\n     * Sets row selector component\n     * @param rowSelector - Created row selector that is rendered\n     * @internal\n     */\n    public setRowSelectorComponent(rowSelector: RowSelector)\n    {\n        if(!rowSelector)\n        {\n            return;\n        }\n\n        this._pluginInstances[ROW_SELECTOR] = rowSelector;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.rowSelector && this._gridOptions.plugins.rowSelector.options)\n        {\n            rowSelector.options = this._gridOptions.plugins.rowSelector.options;\n        }\n\n        rowSelector.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.rowSelector && this._gridOptions.plugins.rowSelector.instanceCallback)\n        {\n            this._gridOptions.plugins.rowSelector.instanceCallback(rowSelector);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize component, automatically called once if not blocked by options\n     */\n    public initialize()\n    {\n        this._pluginInstances[ROW_SELECTOR].initialize();\n        this._pluginInstances[METADATA_SELECTOR].initialize();\n        this._pluginInstances[GRID_INITIALIZER].initialize();\n        this._pluginInstances[PAGING].initialize();\n        this._pluginInstances[CONTENT_RENDERER].initialize();\n        this._pluginInstances[NO_DATA_RENDERER].initialize();\n        this._pluginInstances[DATA_LOADER].initialize();\n\n        this._initializedSubject.next(true);\n    }\n\n    /**\n     * Initialize options, automaticaly called during init phase, but can be used to reinitialize GridOptions\n     */\n    public initOptions()\n    {\n        if(this._gridOptions.plugins)\n        {\n            if(this._gridOptions.plugins.paging)\n            {\n                this._gridOptions.plugins.paging.type = resolveForwardRef(this._gridOptions.plugins.paging.type);\n\n                if(this._gridOptions.plugins.paging.instance &&\n                   this._gridOptions.plugins.paging.instance != this._pluginInstances[PAGING])\n                {\n                    this._pluginInstances[PAGING] = this._gridOptions.plugins.paging.instance;\n                    this._gridOptions.plugins.paging.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[PAGING])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.paging && this._gridOptions.plugins.paging.options)\n                    {\n                        this._pluginInstances[PAGING].options = this._gridOptions.plugins.paging.options;\n                    }\n\n                    this._pluginInstances[PAGING].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.gridInitializer)\n            {\n                this._gridOptions.plugins.gridInitializer.type = resolveForwardRef(this._gridOptions.plugins.gridInitializer.type);\n\n                if(this._gridOptions.plugins.gridInitializer.instance &&\n                   this._gridOptions.plugins.gridInitializer.instance != this._pluginInstances[GRID_INITIALIZER])\n                {\n                    this._pluginInstances[GRID_INITIALIZER] = this._gridOptions.plugins.gridInitializer.instance;\n                    this._gridOptions.plugins.gridInitializer.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[GRID_INITIALIZER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.gridInitializer && this._gridOptions.plugins.gridInitializer.options)\n                    {\n                        this._pluginInstances[GRID_INITIALIZER].options = this._gridOptions.plugins.gridInitializer.options;\n                    }\n\n                    this._pluginInstances[GRID_INITIALIZER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.dataLoader)\n            {\n                this._gridOptions.plugins.dataLoader.type = resolveForwardRef(this._gridOptions.plugins.dataLoader.type);\n\n                if(this._gridOptions.plugins.dataLoader.instance &&\n                   this._gridOptions.plugins.dataLoader.instance != this._pluginInstances[DATA_LOADER])\n                {\n                    this._pluginInstances[DATA_LOADER] = this._gridOptions.plugins.dataLoader.instance;\n                    this._gridOptions.plugins.dataLoader.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[DATA_LOADER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.dataLoader && this._gridOptions.plugins.dataLoader.options)\n                    {\n                        this._pluginInstances[DATA_LOADER].options = this._gridOptions.plugins.dataLoader.options;\n                    }\n\n                    this._pluginInstances[DATA_LOADER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.contentRenderer)\n            {\n                this._gridOptions.plugins.contentRenderer.type = resolveForwardRef(this._gridOptions.plugins.contentRenderer.type);\n\n                if(this._gridOptions.plugins.contentRenderer.instance &&\n                   this._gridOptions.plugins.contentRenderer.instance != this._pluginInstances[CONTENT_RENDERER])\n                {\n                    this._pluginInstances[CONTENT_RENDERER] = this._gridOptions.plugins.contentRenderer.instance;\n                    this._gridOptions.plugins.contentRenderer.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[CONTENT_RENDERER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.contentRenderer && this._gridOptions.plugins.contentRenderer.options)\n                    {\n                        this._pluginInstances[CONTENT_RENDERER].options = this._gridOptions.plugins.contentRenderer.options;\n                    }\n\n                    this._pluginInstances[CONTENT_RENDERER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.metadataSelector)\n            {\n                this._gridOptions.plugins.metadataSelector.type = resolveForwardRef(this._gridOptions.plugins.metadataSelector.type);\n\n                if(this._gridOptions.plugins.metadataSelector.instance &&\n                   this._gridOptions.plugins.metadataSelector.instance != this._pluginInstances[METADATA_SELECTOR])\n                {\n                    this._pluginInstances[METADATA_SELECTOR] = this._gridOptions.plugins.metadataSelector.instance;\n                    this._gridOptions.plugins.metadataSelector.instance.gridPlugins = this._pluginInstances;\n                    this._gridOptions.plugins.metadataSelector.instance.metadataGatherer = this.metadataGatherer;\n                }\n\n                if(this._pluginInstances[METADATA_SELECTOR])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.metadataSelector && this._gridOptions.plugins.metadataSelector.options)\n                    {\n                        this._pluginInstances[METADATA_SELECTOR].options = this._gridOptions.plugins.metadataSelector.options;\n                    }\n\n                    this._pluginInstances[METADATA_SELECTOR].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.noDataRenderer)\n            {\n                this._gridOptions.plugins.noDataRenderer.type = resolveForwardRef(this._gridOptions.plugins.noDataRenderer.type);\n\n                if(this._gridOptions.plugins.noDataRenderer.instance &&\n                   this._gridOptions.plugins.noDataRenderer.instance != this._pluginInstances[NO_DATA_RENDERER])\n                {\n                    this._pluginInstances[NO_DATA_RENDERER] = this._gridOptions.plugins.noDataRenderer.instance;\n                    this._gridOptions.plugins.noDataRenderer.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[NO_DATA_RENDERER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.noDataRenderer && this._gridOptions.plugins.noDataRenderer.options)\n                    {\n                        this._pluginInstances[NO_DATA_RENDERER].options = this._gridOptions.plugins.noDataRenderer.options;\n                    }\n\n                    this._pluginInstances[NO_DATA_RENDERER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.rowSelector)\n            {\n                this._gridOptions.plugins.rowSelector.type = resolveForwardRef(this._gridOptions.plugins.rowSelector.type);\n\n                if(this._gridOptions.plugins.rowSelector.instance &&\n                   this._gridOptions.plugins.rowSelector.instance != this._pluginInstances[ROW_SELECTOR])\n                {\n                    this._pluginInstances[ROW_SELECTOR] = this._gridOptions.plugins.rowSelector.instance;\n                    this._gridOptions.plugins.rowSelector.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[ROW_SELECTOR])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.rowSelector && this._gridOptions.plugins.rowSelector.options)\n                    {\n                        this._pluginInstances[ROW_SELECTOR].options = this._gridOptions.plugins.rowSelector.options;\n                    }\n\n                    this._pluginInstances[ROW_SELECTOR].initOptions();\n                }\n            }\n        }\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Gets instance of plugin by its id\n     * @param pluginId - Id of plugin, use constants\n     */\n    public getPlugin<PluginType extends GridPlugin>(pluginId: string): PluginType\n    {\n        return this._pluginInstances[pluginId] as PluginType;\n    }\n\n    /**\n     * Sets GridPluginInstances into GridPlugin\n     * @param plugin - Grid plugin to be filled with grid GridPluginInstances\n     */\n    public setGridPluginInstances(plugin: GridPlugin)\n    {\n        plugin.gridPlugins = this._pluginInstances;\n    }\n\n    /**\n     * Executes actions on grid\n     * @param actions - Array of actions that are executed over grid\n     */\n    public execute(...actions: ((grid: GridComponent) => void)[])\n    {\n        if(!actions)\n        {\n            return;\n        }\n\n        actions.forEach(action => action(this));\n    }\n\n    /**\n     * Executes function on grid and returns result\n     * @param func - Function that is executed and its result is returned\n     */\n    public executeAndReturn<TResult>(func: GridFunction<TResult>): TResult\n    {\n        if(!func)\n        {\n            return null;\n        }\n\n        return func(this);\n    }\n}","<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.metadataSelector?.type\" (ngComponentOutletExCreated)=\"setMetadataSelectorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.dataLoader?.type\" (ngComponentOutletExCreated)=\"setDataLoaderComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.rowSelector?.type\" (ngComponentOutletExCreated)=\"setRowSelectorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.gridInitializer?.type\" (ngComponentOutletExCreated)=\"setGridInitializerComponent($event)\"></ng-template>\r\n\r\n<ng-template [ngIf]=\"gridOptions?.pagingPosition == 0\">\r\n    <ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.paging?.type\" (ngComponentOutletExCreated)=\"setPagingComponent($event)\"></ng-template>\r\n</ng-template>\r\n\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.contentRenderer?.type\" (ngComponentOutletExCreated)=\"setContentRendererComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.noDataRenderer?.type\" (ngComponentOutletExCreated)=\"setNoDataRendererComponent($event)\"></ng-template>\r\n\r\n<ng-template [ngIf]=\"gridOptions?.pagingPosition == 1\">\r\n    <ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.paging?.type\" (ngComponentOutletExCreated)=\"setPagingComponent($event)\"></ng-template>\r\n</ng-template>","import {BasicTableColumn} from './basicTable.interface';\n\n/**\n * Context for basic table column template\n */\nexport class BasicTableColumnContext<TData = any>\n{\n    //######################### public properties #########################\n\n    /**\n     * Gets row index of displayed item\n     * @returns number\n     */\n    public get rowIndex(): number\n    {\n        return this.startingIndex + this.index;\n    }\n\n    //######################### constructor #########################\n    \n    /**\n     * Creates instance of BasicTableColumnContext\n     * @param $implicit - Data of current row\n     * @param column - Object of column metadata itself\n     * @param index - Index of rendered row in current page\n     * @param startingIndex - Starting index of currently displayed items\n     */\n    constructor(public $implicit: TData, \n                public column: BasicTableColumn<TData>, \n                public index: number, \n                public startingIndex: number)\n    {\n    }\n}","import {Component, ChangeDetectionStrategy, Input, TemplateRef, ContentChild} from '@angular/core';\n\nimport {BasicTableColumn} from './basicTable.interface';\nimport {BasicTableColumnContext} from '../types';\n\n/**\n * Component for gathering information about basic table column\n */\n@Component(\n{\n    selector: 'basic-table-column',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BasicTableColumnComponent<TData = any> implements BasicTableColumn<TData>\n{\n    //######################### public properties - inputs #########################\n    /**\n     * Unique identifier of column\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Name of property which is assigned to this column\n     */\n    @Input()\n    public name: string;\n\n    /**\n     * Title of column that is displayed in grid header\n     */\n    @Input()\n    public title: string;\n\n    /**\n     * Text that is displayed in tooltip over grid header\n     */\n    @Input()\n    public headerTooltip: string;\n\n    /**\n     * Indication whether should be title visible in header\n     */\n    @Input()\n    public titleVisible: boolean = true;\n\n    /**\n     * Indication that this column can be used for ordering\n     */\n    @Input()\n    public ordering: boolean;\n\n    /**\n     * Indication that this column is visible in grid\n     */\n    @Input()\n    public visible: boolean = true;\n\n    /**\n     * Width as style string, value is exactly same (require units)\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Css class that is applied to column header\n     */\n    @Input()\n    public headerClass: string;\n\n    /**\n     * Css class that is applied to each column cell\n     */\n    @Input()\n    public cellClass: string;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Template that is used for rendering of cell header\n     */\n    @ContentChild('headerTemplate')\n    public headerTemplate: TemplateRef<BasicTableColumnContext<TData>>;\n\n    /**\n     * Template that is used for rendering of cell body\n     */\n    @ContentChild('bodyTemplate')\n    public bodyTemplate: TemplateRef<BasicTableColumnContext<TData>>;\n\n    //######################### public methods - helper #########################\n\n    /**\n     * Gets basic table column context\n     */\n    public getColumnContext(data: TData, column: BasicTableColumn<TData>, index: number, startingIndex: number): BasicTableColumnContext<TData>\n    {\n        return new BasicTableColumnContext(data, column, index, startingIndex);\n    }\n}","import {ExistingProvider, Component, ChangeDetectionStrategy, EventEmitter, forwardRef, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\n\nimport {MetadataGatherer} from '../metadata.interface';\nimport {METADATA_GATHERER} from '../types';\nimport {BasicTableColumn, BasicTableMetadata} from './basicTable.interface';\nimport {BasicTableColumnComponent} from './basicTableColumn.component';\n\n/**\n * Component that is used for gathering metadata for basic table\n *\n * @example\n * This is metadata gatherer which works with `BasicTableColumnComponent`\n *\n * Here is sample of use of available options for `BasicTableMetadataGathererComponent` with `BasicTableColumnComponent`\n *\n * ``` html\n * <ng-grid #grid [gridOptions]=\"gridOptions\" class=\"clearfix\" fixedHeader>\n *     <basic-table-metadata>\n *         <!-- Basic usage, id must be unique -->\n *         <!-- if custom template is not provided name is used for getting data -->\n *         <!-- title is displayed in header of grid -->\n *         <basic-table-column id=\"colId\" name=\"colId\" title=\"Id\"></basic-table-column>\n *\n *         <!-- Tooltip that is displayed on hover on column header -->\n *         <!-- This column can be used for ordering -->\n *         <basic-table-column id=\"colId2\" name=\"colId2\" title=\"Col 2\" headerTooltip=\"This is tooltip text\" [ordering]=\"true\"></basic-table-column>\n *\n *         <!-- Title in header is no displayed -->\n *         <!-- Column width set to fixed max 60px -->\n *         <basic-table-column id=\"colId3\" name=\"colId3\" title=\"Col 3\" [titleVisible]=\"false\" width=\"60px\"></basic-table-column>\n *\n *         <!-- Column default behavior will be that it will not be rendered -->\n *         <basic-table-column id=\"colId5\" name=\"colId5\" title=\"Col 5\" [visible]=\"false\"></basic-table-column>\n *\n *         <!-- Column will have custom css class applied to header and each cell -->\n *         <basic-table-column id=\"colId6\" name=\"colId6\" title=\"Col 6\" headerClass=\"header-css-class\" cellClass=\"cell-css-class\"></basic-table-column>\n *\n *         <!-- Column with custom template for header and each cell -->\n *         <basic-table-column id=\"colId7\" name=\"colId7\" title=\"Custom col\">\n *             <!-- Custom header template -->\n *             <ng-template #headerTemplate>\n *                 <div title=\"This is custom tooltip\">Custom column</div>\n *             </ng-template>\n *\n *             <!-- Custom body cell template -->\n *             <ng-template #bodyTemplate let-item let-index=\"index\" let-rowIndex=\"rowIndex\" let-column=\"column\" let-startingIndex=\"startingIndex\">\n *                 <div>\n*                      <div>{{item?.dateItem?.format('L')}} 'item' is row object from data</div>\n*                      <div>{{index}} index is zero based index of row for all items</div>\n*                      <div>{{rowIndex}} rowIndex is zero based index of row for current page</div>\n*                      <div>{{column}} column is object of 'BasicTableColumnComponent'</div>\n*                      <div>{{startingIndex}} startingIndex starting zero based index of current page</div>\n *                 </div>\n *             </ng-template>\n *         </basic-table-column>\n *     </basic-table-metadata>\n * </ng-grid>\n * ```\n */\n@Component(\n{\n    selector: 'ng-grid > basic-table-metadata',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: METADATA_GATHERER,\n            useExisting: forwardRef(() => BasicTableMetadataGathererComponent)\n        }\n    ]\n})\nexport class BasicTableMetadataGathererComponent<TData = any> implements AfterContentInit, MetadataGatherer<BasicTableMetadata<BasicTableColumn<TData>>>\n{\n    //######################### public properties - implementation of MetadataGatherer<BasicTableColumn[]> #########################\n\n    /**\n     * Information that metadata for grid has changed\n     */\n    public metadataChange: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### public properties - children #########################\n\n    /**\n     * Gets all columns defined in gatherer\n     * @internal\n     */\n    @ContentChildren(BasicTableColumnComponent)\n    public columns: QueryList<BasicTableColumnComponent<TData>>;\n\n    //######################### public methods - implementation of MetadataGatherer<BasicTableColumn[]> #########################\n\n    /**\n     * Gets current metadata for grid\n     */\n    public getMetadata(): BasicTableMetadata<BasicTableColumn<TData>>\n    {\n        return {\n            columns: this.columns.toArray()\n        };\n    }\n\n    //######################### public methods - implementation of AfterContentInit #########################\n\n    /**\n     * Called when content was initialized\n     */\n    public ngAfterContentInit()\n    {\n        this.columns.changes.subscribe(() =>\n        {\n            this.metadataChange.emit();\n        });\n    }\n}","/**\n * Token for getting component that is used as metadata gatherer\n */\nexport class METADATA_GATHERER\n{\n}\n\nexport * from './basicTable/basicTableColumn.context';\nexport * from './groupedTable/headerTableGroup.context';"],"names":["Authorize","permission","route","target","options","isString","Array","isArray","typedTarget","isBlank","permissions","routeSpecificPermissions","AuthGuard","constructor","_authSvc","_injector","_router","canActivate","next","component","authOptions","routeConfig","path","addCondition","userIdentity","Error","authorized","evaluatePermissions","andCondition","conditionString","urlSegmentGroup","UrlSegmentGroup","flatMapArray","pathFromRoot","map","itm","url","urlTree","UrlTree","root","queryParams","nextPath","serializeUrl","isAuthenticated","showAccessDenied","isAuthPage","showAuthPage","ComponentRouteAuthorized","indexOf","push","ComponentRoute","i1","rt","routeDecoratedComponent","routeValues","Object","defineProperty","enumerable","configurable","writable","value","PagingPosition","Paginator","_base","_itemsPerPage","_page","_itemCount","setPage","page","this","getPage","getPageIndex","GetFirstPage","getLastPage","Math","max","getPageCount","setBase","baseVal","getBase","isFirst","isLast","ceil","setItemsPerPage","itemsPerPage","getItemsPerPage","setItemCount","itemCount","Number","MAX_VALUE","getItemCount","getOffset","getCountdownOffset","getLength","min","getIndexesPerPage","result","isNaN","x","getPagesWithDispersion","dispersion","currentPage","pageCount","numberOfPages","startingPage","endingPage","getPagesWithTrimDispersion","lastPage","getPagesWithUniformDistribution","step","round","DataLoaderState","DATA_LOADER_OPTIONS","InjectionToken","PagingAbstractComponent","pluginElement","_changeDetector","gridPlugins","_initialized","pageChange","EventEmitter","itemsPerPageChange","_options","extend","optionsSet","ngOnDestroy","_dataChangedSubscription","unsubscribe","invalidateVisuals","detectChanges","initialize","gridInitializer","GRID_INITIALIZER","initialPage","initialItemsPerPage","isPresent","dataLoader","_dataLoader","totalCount","resultChange","subscribe","initOptions","i0","GRID_PLUGIN_INSTANCES","defaultOptions","itemsPerPageValues","pagesDispersion","cssClasses","pagingUl","itemsPerPageDiv","displayedItemsCountSpan","itemsPerPageUl","BasicPagingComponent","changeDetector","super","_paginator","displayedItemsCount","pages","itemsPerPageItems","firstItemIndex","offset","initialized","_generatePages","_setDisplayedItemsCount","_generateItemsPerPage","_totalCount","isActive","isDisabled","emit","renderItemsPerPageText","toString","title","forEach","displayedItems","PAGING_OPTIONS","DataLoaderAbstractComponent","_state","NotLoadedYet","_debounceSubject","Subject","_debounceSubscription","stateChange","state","_pageChangedSubscription","_itemsPerPageChangedSubscription","_orderingChangedSubscription","_registerDebounce","paging","PAGING","_paging","contentRenderer","CONTENT_RENDERER","_contentRenderer","orderingChange","autoLoadData","loadData","force","_checkChanges","_lastPage","_lastItemsPerPage","ordering","_lastOrdering","asObservable","pipe","debounceTime","debounceDataCallback","_loadData","dataCallback","Promise","AsyncDataLoaderComponent","_result","data","length","DataLoading","NoDataLoading","Loaded","NoData","BodyContentRendererAbstractComponent","startingIndex","mergeStringClasses","classes","cls","TableBodyContentRendererComponent","OrderByDirection","BODY_CONTENT_RENDERER_OPTIONS","thead","thDefault","thOrderable","spanContent","spanOrdering","spanOrderingDirection","none","asc","desc","TableHeaderContentRendererComponent","_ordering","_gridInitializer","deserializeSimpleOrdering","getOrdering","_initializeOrderingCss","setOrdering","serializeSimpleOrdering","resetMetadata","_resetOrdering","orderBy","metadata","columns","find","name","meta","orderByDirection","Ascending","Descending","orderingClass","cssClass","HEADER_CONTENT_RENDERER_OPTIONS","ContentRendererAbstractComponent","headerRenderer","HEADER_CONTENT_RENDERER","containerDiv","_metadataChangedSubscription","_invalidateVisuals","metadataSelector","METADATA_SELECTOR","_metadataSelector","metadataChange","BODY_CONTENT_RENDERER","plugins","bodyRenderer","type","resolveForwardRef","instance","setBodyRendererComponent","instanceCallback","setHeaderRendererComponent","table","forwardRef","TableContentRendererComponent","CONTENT_RENDERER_OPTIONS","NoMetadataSelectorComponent","_gathererInitialized","metadataGatherer","_metadataGatherer","gatherer","show","getMetadata","texts","loading","noData","notLoaded","wrapperDiv","textSpan","SimpleNoDataRendererComponent","_stringLocalization","_texts","_stateChangedSubscription","_textsChangedSubscription","_processLoaderState","textsChange","_initTexts","text","keys","key","get","STRING_LOCALIZATION","NO_DATA_RENDERER_OPTIONS","ROW_SELECTOR_OPTIONS","getRowId","autoResetOnDataChange","multiSelection","getRowData","BasicRowSelectorComponent","selectedIds","selectedData","selectedChange","resetSelection","selectItem","item","select","id","index","splice","isSelected","NoGridInitializerComponent","autoInitialize","pagingPosition","Bottom","noDataRenderer","rowSelector","GridComponent","_pluginInstances","pagingType","gridInitializerType","dataLoaderType","contentRendererType","metadataSelectorType","noDataRendererType","rowSelectorType","_initializedSubject","BehaviorSubject","opts","_gridOptions","gridOptions","ngOnInit","ngAfterViewInit","setPagingComponent","setGridInitializerComponent","setMetadataSelectorComponent","setDataLoaderComponent","setContentRendererComponent","setNoDataRendererComponent","NO_DATA_RENDERER","setRowSelectorComponent","getPlugin","pluginId","setGridPluginInstances","plugin","execute","actions","action","executeAndReturn","func","GRID_OPTIONS","PAGING_TYPE","GRID_INITIALIZER_TYPE","DATA_LOADER_TYPE","CONTENT_RENDERER_TYPE","METADATA_SELECTOR_TYPE","NO_DATA_RENDERER_TYPE","ROW_SELECTOR_TYPE","METADATA_GATHERER","provide","useFactory","BasicTableColumnContext","$implicit","column","rowIndex","BasicTableColumnComponent","titleVisible","visible","getColumnContext","BasicTableMetadataGathererComponent","toArray","ngAfterContentInit","changes","useExisting"],"sourceRoot":""}