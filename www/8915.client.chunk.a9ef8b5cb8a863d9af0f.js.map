{"version":3,"file":"8915.client.chunk.a9ef8b5cb8a863d9af0f.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/dynamicItems/gridTable/gridTable.metadata.ts","webpack://ng-universal-demo/./app/dynamicItems/gridTable/gridTable.component.html","webpack://ng-universal-demo/./app/dynamicItems/gridTable/gridTable.component.ts","webpack://ng-universal-demo/./app/dynamicItems/gridTable/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {GridTableComponentOptions} from './gridTable.options';\n\n/**\n * Grid table layout metadata loader\n */\nexport const GridTableLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridTableComponentOptions>> = async () => new (await import('./metadata/gridTable.layoutMetadata')).GridTableLayoutEditorMetadata();\n\n/**\n * Grid table relations metadata loader\n */\nexport const GridTableRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/gridTable.relationsMetadata')).GridTableRelationsEditorMetadata();\n","<ng-grid [gridOptions]=\"gridOptions\">\n    <basic-table-metadata>\n        <basic-table-column id=\"name\" name=\"name\" title=\"Name\"></basic-table-column>\n        <basic-table-column id=\"surname\" name=\"surname\" title=\"Surname\"></basic-table-column>\n        <basic-table-column id=\"email\" name=\"email\" title=\"E-mail\"></basic-table-column>\n\n        <basic-table-column id=\"detail\" title=\"detail\" [titleVisible]=\"false\">\n            <ng-template #bodyTemplate let-row>\n                <a [routerLink]=\"['../detail', row.id]\">detail</a>\n            </ng-template>\n        </basic-table-column>\n    </basic-table-metadata>\n</ng-grid>","import {Component, ChangeDetectionStrategy, SimpleChanges, ViewChild, AfterViewInit} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {Grid, GridComponent, GridModule, GridOptions, NoPagingComponent, SimpleOrdering, SyncDataLoaderComponent, SyncDataLoaderOptions} from '@anglr/grid';\nimport {setSyncData} from '@anglr/grid/extensions';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {GridTableComponentOptions} from './gridTable.options';\nimport {GridTableLayoutMetadataLoader, GridTableRelationsMetadataLoader} from './gridTable.metadata';\n\n/**\n * Component used for displaying grid table\n */\n@Component(\n{\n    selector: 'grid-table',\n    templateUrl: 'gridTable.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        GridModule,\n        RouterModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(GridTableRelationsMetadataLoader)\n@LayoutEditorMetadata(GridTableLayoutMetadataLoader)\nexport class GridTableSAComponent<TData = any> extends LayoutComponentBase<GridTableComponentOptions> implements LayoutComponent<GridTableComponentOptions>, AfterViewInit\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be displayed in grid\n     */\n    public data: TData[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of grid options\n     */\n    protected gridOptions: GridOptions =\n    {\n        plugins:\n        {\n            dataLoader:\n            {\n                //use sync data loader as grid data loader plugin\n                type: SyncDataLoaderComponent,\n                options: <SyncDataLoaderOptions<TData, SimpleOrdering>>\n                {\n                    //all data used in data loader\n                    data: [],\n                }\n            },\n            paging:\n            {\n                type: NoPagingComponent,\n            }\n        }\n    };\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of grid\n     */\n    @ViewChild(GridComponent)\n    protected grid: Grid|undefined|null;\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        if(this.data.length && this.grid)\n        {\n            this.grid.execute(setSyncData(this.data, true));\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        if(nameof<GridTableSAComponent>('data') in changes && this.grid)\n        {\n            this.grid.execute(setSyncData(this.data, true));\n        }\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {GridTableSAComponent} from './gridTable.component';\n\nexport default GridTableSAComponent;\n\n\nexport const extensions = [RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["GridTableLayoutMetadataLoader","GridTableLayoutEditorMetadata","GridTableRelationsMetadataLoader","GridTableRelationsEditorMetadata","i0","GridTableSAComponent","LayoutComponentBase","constructor","data","gridOptions","plugins","dataLoader","type","SyncDataLoaderComponent","options","paging","NoPagingComponent","ngAfterViewInit","this","length","grid","execute","setSyncData","onChanges","changes","nameof","selectors","viewQuery","GridComponent","GridModule","RouterModule","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}