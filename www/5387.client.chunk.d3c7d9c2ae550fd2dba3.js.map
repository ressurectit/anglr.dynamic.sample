{"version":3,"file":"5387.client.chunk.d3c7d9c2ae550fd2dba3.js","mappings":"uJAQM,SAAUA,EAAqBC,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,oOCHO,MAAME,EAAwC,e,EAAA,G,EAAgG,mBAAY,WAAW,iCAA0DC,yCAA0C,E,+KAAA,kBAA3N,mC,qECArD,iBAiBO,IAAMC,EAAN,cAA8CC,EAAAA,I,6DAAxCD,KAA+B,GAA/BA,EAA+B,E,qBAA/BA,EAA+B,uE,+GCzB4B,K,qEAAf,gBDmBjDE,EAAAA,GAAkC,iEAM7BF,GAA+B,UAF3CG,EAAAA,EAAAA,IAAwDC,GAAWA,GAASC,QAAU,CAACD,GAASC,SAAW,MAC3GV,EAAAA,EAAAA,GAAqBG,IACTE,GEvBb,S,scCSM,MAAgBC,EAwBJK,cAEV,OAAOC,KAAKC,gBAChB,CAKcC,wBAEV,OAAOF,KAAKH,OAChB,CAUAM,YAAsBC,EACAH,EACAI,EAC4BC,GAH5B,KAAAF,eAAAA,EACA,KAAAH,iBAAAA,EACA,KAAAI,SAAAA,EAC4B,KAAAC,OAAAA,EAzCxC,KAAAC,WAA+C,GAK/C,KAAAC,aAAuB,EAKvB,KAAAC,WAAqB,CAiC/B,CAOOC,cAEH,IAAGV,KAAKS,UAAR,CAKAT,KAAKS,WAAY,EAEjB,IAAI,MAAME,KAAOX,KAAKO,WAElBI,EAAIC,UAGRZ,KAAKa,W,CACT,CAOaC,WAAQ,iCAEjB,GAAG,EAAKN,YAEJ,OAGJ,EAAKA,aAAc,EACnB,MAAMN,EAAoB,EAAKA,kBAK/B,SAHM,EAAKa,eACL,EAAKC,eAERd,EAEC,IAAI,MAAMe,KAAa,EAAKV,iBAElBU,EAAUC,WAAW,EAAKb,SAAU,EAAKN,QAAS,SAI1D,EAAKoB,WAAY,GArBN,EAsBrB,CAKaC,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACU,EAAKL,eAEX,MAAMd,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMe,KAAa,EAAKV,iBAElBU,EAAUM,cAAcrB,GAItC,IAAI,EAAKM,YAEL,aAGE,EAAKgB,iB,QAGRH,GAAQC,EAAAA,EAAAA,GAAsC,aAEjDG,EAAAA,EAAAA,IAAcJ,IAEd,EAAKK,UAAUL,EAClB,GA/B0C,EAgC/C,CAKOM,mBAAmBpB,GAEtBP,KAAKO,WAAaA,CACtB,CAKOqB,oBAEH5B,KAAKI,eAAeyB,eACxB,CAOUd,SAEV,CAKUI,YAEV,CAKUK,kBAEV,CAMUE,UAAUI,GAEpB,CAKUd,eAEV,CAKUH,YAEV,E,iCAvMkBnB,GAAmB,gCAgDjBqC,EAAAA,GAAM,K,kBAhDRrC,EAAmB,gB","sources":["webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholderContainer/placeholderContainer.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholderContainer/placeholderContainer.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-relations/src/dynamicItems/placeholderContainer/placeholderContainer.component.html","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholderContainer/type.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {PlaceholderContainerComponentOptions} from './placeholderContainer.options';\n\n/**\n * Placeholder container layout metadata loader\n */\nexport const PlaceholderContainerLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<PlaceholderContainerComponentOptions>> = async () => new (await import('./metadata/placeholderContainer.layoutMetadata')).PlaceholderContainerLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PlaceholderContainerComponentOptions} from './placeholderContainer.options';\nimport {PlaceholderContainerLayoutMetadataLoader} from './placeholderContainer.metadata';\n\n/**\n * Component used for displaying placeholder container\n */\n@Component(\n{\n    selector: 'placeholder-container',\n    templateUrl: 'placeholderContainer.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<PlaceholderContainerComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorMetadata(PlaceholderContainerLayoutMetadataLoader)\nexport class PlaceholderContainerSAComponent extends LayoutComponentBase<PlaceholderContainerComponentOptions> implements LayoutComponent<PlaceholderContainerComponentOptions>\n{\n}",null,"import {PlaceholderContainerSAComponent} from './placeholderContainer.component';\n\nexport default PlaceholderContainerSAComponent;","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","PlaceholderContainerLayoutMetadataLoader","PlaceholderContainerLayoutEditorMetadata","PlaceholderContainerSAComponent","LayoutComponentBase","LayoutComponentRendererSADirective","DescendantsGetter","options","content","element","this","componentElement","extensionsOptions","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER"],"sourceRoot":""}