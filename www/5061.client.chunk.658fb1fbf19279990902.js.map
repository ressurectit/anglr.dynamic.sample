{"version":3,"file":"5061.client.chunk.658fb1fbf19279990902.js","mappings":"gYAMO,MAAMA,EAAiC,e,EAAA,G,EAA6D,mBAAY,WAAW,mEAAmDC,kCAAmC,E,+KAAA,kBAA1K,mCCQvC,IAAMC,EAAN,MA6BQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EAEzBF,KAAKG,YACT,CAUAC,YAAYC,GAHL,KAAAC,QAAsB,CAAC,EAK1BN,KAAKO,mBAAqBF,EAASG,IAAIC,EAAAA,GACvCT,KAAKU,0BAA4BL,EAASG,IAAIG,EAAAA,EAClD,CAOOC,YAAYC,GAEXb,KAAKD,mBAKNC,KAAKD,iBAAiBe,aAElBC,EAAAA,EAAAA,GAA4B,aAAcF,GAEzCb,KAAKgB,YAKNhB,KAAKiB,SAEJC,aAAalB,KAAKiB,SAGtBjB,KAAKiB,QAAUE,YAAW,IAAMnB,KAAKgB,YAAYhB,KAAKD,iBAAiBqB,aAAe,IAE9F,CAKOC,oBAEP,CAOUlB,aAEN,GAAGH,KAAKD,kBAEDC,KAAKD,iBAAiBuB,gBAAkBC,MAAMC,QAAQxB,KAAKD,iBAAiBuB,gBAE3E,IAAI,MAAMG,KAAYzB,KAAKD,iBAAiBuB,eAExCI,OAAOC,eAAe3B,KACAyB,EACA,CACIjB,IAAK,WAED,OAAOR,KAAK,IAAIyB,IACpB,EACAG,IAAK,SAAS1B,GAEVF,KAAK,IAAIyB,KAAcvB,GACvB2B,EAAAA,EAAAA,IAAmB7B,KAAMyB,EAC7B,IAG1BC,OAAOC,eAAe3B,KACA,GAAGyB,UACH,CACIvB,MAAO4B,EAAAA,KAIjCC,EAAAA,EAAAA,IAAmB/B,KAAMyB,EAIzC,CAKUT,WAEN,MAAMgB,EAAKhC,KAAKU,0BAA0BuB,MAAMjC,OAE7CkC,EAAAA,EAAAA,IAAUF,IAEThC,KAAKO,mBAAmB4B,oBAAoBH,GAAI,EAExD,GA9ISlC,GAAmB,UAF/BsC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBzC,IAAkC,6BAiDjC0C,EAAAA,KAhDbxC,GCZb,S","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/syncValues.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/syncValues.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Sync values relations metadata loader\n */\nexport const SyncValuesRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/syncValues.relationsMetadata')).SyncValuesRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, PureRelationsComponent, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {NEVER} from 'rxjs';\n\nimport {SyncValuesRelationsMetadataLoader} from './syncValues.metadata';\nimport {SyncValuesRelationsOptions} from './syncValues.options';\n\n/**\n * Sync values relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(SyncValuesRelationsMetadataLoader)\nexport class SyncValuesRelations implements RelationsComponent<SyncValuesRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: SyncValuesRelationsOptions|undefined|null;\n\n    /**\n     * Current relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor;\n\n    /**\n     * Current relations component manager instance\n     */\n    protected relationsComponentManager: RelationsComponentManager;\n\n    /**\n     * Timeout reference\n     */\n    protected timeout: number|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): SyncValuesRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: SyncValuesRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Trigger object\n     */\n    public trigger: VoidObject = {};\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.relationsProcessor = injector.get(RelationsProcessor);\n        this.relationsComponentManager = injector.get(RelationsComponentManager);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(!this.relationsOptions)\n        {\n            return;\n        }\n\n        if(this.relationsOptions.triggerSync)\n        {\n            if(nameof<SyncValuesRelations>('trigger') in changes)\n            {\n                this.sendData();\n            }\n        }\n        else\n        {\n            if(this.timeout)\n            {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout(() => this.sendData(), this.relationsOptions.idleTimeout ?? 0) as any;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.syncProperties && Array.isArray(this.relationsOptions.syncProperties))\n            {\n                for(const property of this.relationsOptions.syncProperties)\n                {\n                    Object.defineProperty(this,\n                                          property,\n                                          {\n                                              get: function()\n                                              {\n                                                  return this[`ɵ${property}`];\n                                              },\n                                              set: function(value:any)\n                                              {\n                                                  this[`ɵ${property}`] = value;\n                                                  defineAssignedProp(this, property);\n                                              }\n                                          });\n\n                    Object.defineProperty(this,\n                                          `${property}Change`,\n                                          {\n                                              value: NEVER,\n                                          });\n                                          \n                    //TODO: make this configurable\n                    defineSkipInitProp(this, property);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sends output data\n     */\n    protected sendData(): void\n    {\n        const id = this.relationsComponentManager.getId(this);\n\n        if(isPresent(id))\n        {\n            this.relationsProcessor.transferOutputsData(id, false);\n        }\n    }\n}","import {SyncValuesRelations} from './syncValues.relations';\n\nexport default SyncValuesRelations;"],"names":["SyncValuesRelationsMetadataLoader","SyncValuesRelationsEditorMetadata","SyncValuesRelations","relationsOptions","this","ɵRelationsOptions","value","initialize","constructor","injector","trigger","relationsProcessor","get","RelationsProcessor","relationsComponentManager","RelationsComponentManager","ngOnChanges","changes","triggerSync","nameof","sendData","timeout","clearTimeout","setTimeout","idleTimeout","invalidateVisuals","syncProperties","Array","isArray","property","Object","defineProperty","set","defineAssignedProp","NEVER","defineSkipInitProp","id","getId","isPresent","transferOutputsData","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}