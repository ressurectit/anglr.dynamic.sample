{"version":3,"file":"8972.client.chunk.a0ed2a454390ca21da14.js","mappings":"gNAOM,MAAOA,EAUTC,YAAYC,GAHL,KAAAC,SAAkC,GAKrCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BF,EAC/B,ECXE,MAAOI,EA4BTL,cArBO,KAAAM,SACP,CACIC,KAAM,aACNC,YAAa,kDACbC,MAAO,OACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWb,EACXc,mBACA,EACIC,EAAAA,EAAAA,GAAyC,WAAYC,EAAAA,QAUrEC,OAAOC,OAAOb,KAClB,E,qWCnBE,MAAOc,UAA6DC,EAAAA,EAiBtEnB,YAAYoB,EACAC,EACUC,GAElBC,MAAMH,EAAgBC,GAFJ,KAAAC,OAAAA,CAGtB,CAOgBE,iBAAc,I,EAAA,c,EAAA,YAE1B,IAAGC,EAAAA,EAAAA,IAAQ,EAAKC,YAAc,EAAKC,cAE/B,OAGJ,MAAMC,QAAeC,EAAAA,EAAAA,GAAc,EAAKP,OAAOQ,KAA8EC,EAAAA,EAC7H,CACIC,MAAO,cACPC,MAAO,OACPC,OAAQ,OACRC,KACA,CACIC,QAAS,EAAKC,MAAMC,IAAI,EAAKZ,WAAWzB,OAAS,GACjD0B,cAAe,EAAKA,iBAGzBY,eAEH,IAAGC,EAAAA,EAAAA,IAAUZ,GACb,CACI,MAAMa,EAAU,EAAKJ,MAAMC,IAAI,EAAKZ,UAEjCe,aAAmBC,EAAAA,IAElBD,EAAQE,SAASf,EAAOQ,Q,CAE/B,E,gLACL,EAQE,SAAUtB,EAAiCY,EAAyCC,GAEtF,MAUMiB,UAA8C1B,EAVpDlB,c,oBAgBoB,KAAA0B,SAAkCA,EAMlC,KAAAC,cAA8CA,C,EAGlE,O,6DAfMiB,KAAqB,GAArBA,EAAqB,E,qBAArBA,EAAqB,oI,yNCnGoF,kBAAgB,I,gCACjG,M,mCAAP,sCDiHhBA,C,kCA7FE1B,GAAoC,6B,kBAApCA,EAAoC,yI,yNCrBkE,kBAAgB,I,gCACjG,M,mCAAP,qC,+YCarB,MAAgBC,EAwBlBnB,YAAsB6C,EACAC,GADA,KAAAD,gBAAAA,EACA,KAAAC,WAAAA,EAlBZ,KAAAC,cAAwB,EAc3B,KAAApC,mBAA2F,IAMlG,CAOaqC,WAAQ,iCAEd,EAAKD,eAKR,EAAKA,cAAe,QAEd,EAAKE,cAAc,GATR,EAUrB,CAOaC,aAAU,uCAEb,EAAKF,UAAW,GAFH,EAGvB,CAKOG,oBAEH/C,KAAKyC,gBAAgBO,eACzB,CAOUH,cAEV,E,iCAvEkB9B,GAAqB,oB,kBAArBA,EAAqB,8D,mCCTpC,MAAMJ,EAA0B,I,SAAIsC,GAAc,aAAc,OAAOC,GAEnEA,EAAOC,YAAYC,YAAc,I","sources":["webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataBlock/metadata/dataBlock.model.ts","webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataBlock/metadata/dataBlock.layoutMetadata.ts","webpack://ng-universal-demo/../../../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../../../src/modules/codeEditor/misc/types/languageModels/handlebarsLanguageModel.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {DataBlockComponentOptions} from '../dataBlock.options';\n\n/**\n * Data block model for properties editor\n */\nexport class DataBlockModel implements DataBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public template: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: DataBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {codePropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {HandlebarsLanguageModel} from '@anglr/dynamic';\n\nimport {DataBlockComponentOptions} from '../dataBlock.options';\nimport {DataBlockModel} from './dataBlock.model';\n\n/**\n * Data block layout metadata\n */\nexport class DataBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<DataBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<DataBlockComponentOptions> =\n    {\n        name: 'Data block',\n        description: 'Data block - allows displaying data in template',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: DataBlockModel,\n                    propertiesControls:\n                    [\n                        codePropertiesControlFor<DataBlockModel>('template', HandlebarsLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel, CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result.content);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}",null,"import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {LanguageModel} from './languageModel';\n\n/**\n * Handlebars language model for code editor\n */\nexport const HandlebarsLanguageModel = new LanguageModel('handlebars', 'hbs', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});"],"names":["DataBlockModel","constructor","value","template","mapValuesToThis","this","DataBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","codePropertiesControlFor","HandlebarsLanguageModel","Object","freeze","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","dialog","super","showCodeEditor","isBlank","property","languageModel","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","form","get","afterClosed","isPresent","control","FormControl","setValue","CodePropertiesControl","_changeDetector","_extractor","_initialized","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","LanguageModel","editor","getModel","getValue"],"sourceRoot":""}