{"version":3,"file":"5437.client.chunk.f01a70e3c62e4cc7efd8.js","mappings":"ygBA0BM,MAAOA,UAAoCC,EAAAA,EAG7CC,YAAYC,EACAC,EACUC,GAElBC,MAAMH,EAAgBC,GAFJ,KAAAC,OAAAA,CAGrB,CAOeE,iBAAc,I,EAAA,c,EAAA,YAE1B,MAAMC,QAAeC,EAAAA,EAAAA,GAAc,EAAKJ,OAAOK,KAA8EC,EAAAA,EAC7H,CACIC,MAAO,cACPC,MAAO,OACPC,OAAQ,OACRC,KACA,CACIC,QAAS,EAAKC,UAAUC,kBAAkBC,UAAY,GACtDC,cAAeC,EAAAA,KAGpBC,gBAEAC,EAAAA,EAAAA,IAAUf,IAEN,EAAKS,UAAUC,mBAEd,EAAKD,SAASC,iBAAiBC,SAAWX,EAAOQ,QACjD,EAAKQ,QAAQC,cApBK,E,gLAuB7B,E,iCAtCQzB,GAAAA,EAAAA,EAA2B0B,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,G,oBAA3B1B,E,0gBC1Bb,6B,KAEA,U,CAAA,U,CAAA,U,CAAA,W,KAIgB,2B,KACA,S,IAAK,c,cAGT,W,KACI,2B,KACA,U,IAAK,W,gBAIb,W,CAAA,W,CAAA,U,IAEa,a,YACL,6B,gBAKZ,gB,IAA8D,2BAAS,kBAAT,I,KAC1D,W,IAAM,e,sBAzBS,W,CAAA,mC,IAMc,G,IAAA,mC,CAAA,wB,CAAA,Y,IAKA,G,IAAA,mC,CAAA,wB,CAAA,Y,IAQC,G,IAAA,mC,CAAA,wB,CAAA,Y,gBDC9B2B,EAAAA,EACAC,EAAAA,EACAC,EAAAA,G,oCEdF,MAAOC,EAoBT5B,cAbO,KAAA6B,SACP,CACIC,KAAM,gBACNC,YAAa,6BACbC,MAAO,QAMJ,KAAAC,eAAsCnC,EAKzCoC,OAAOC,OAAOC,KACjB,E,mCC1BE,MAAMjB,EAA0B,I,SAAIkB,GAAc,aAAc,OAAOC,GAEnEA,EAAOC,YAAYC,YAAc,I","sources":["webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.html","webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataTemplate/metadata/dataTemplate.relationsMetadata.ts","webpack://ng-universal-demo/../../../src/modules/codeEditor/misc/types/languageModels/handlebarsLanguageModel.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {HandlebarsLanguageModel, CodeEditorDialogData, CodeEditorDialogComponent, CodeEditorContent} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {DataTemplateRelationsOptions} from '../dataTemplate.options';\n\n/**\n * Relations node component for data template\n */\n@Component(\n{\n    selector: 'data-template-node',\n    templateUrl: 'dataTemplateNode.component.html',\n    // styleUrls: ['dataTemplateNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTemplateNodeSAComponent extends RelationsNodeBase<DataTemplateRelationsOptions> implements RelationsNode<DataTemplateRelationsOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.relationsOptions?.template ?? '',\n                languageModel: HandlebarsLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.template = result.content;\n                this.history.getNewState();\n            }\n        }\n    }\n}",null,"import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DataTemplateNodeSAComponent} from '../node/dataTemplateNode.component';\n\n/**\n * Data template relations metadata\n */\nexport class DataTemplateRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Data template',\n        description: 'Renders data into template',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DataTemplateNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {LanguageModel} from './languageModel';\n\n/**\n * Handlebars language model for code editor\n */\nexport const HandlebarsLanguageModel = new LanguageModel('handlebars', 'hbs', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});"],"names":["DataTemplateNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","metadata","relationsOptions","template","languageModel","HandlebarsLanguageModel","afterClosed","isPresent","history","getNewState","i0","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","DataTemplateRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","LanguageModel","editor","getModel","getValue"],"sourceRoot":""}