{"version":3,"file":"544.client.chunk.7fe2a1bb08fe8eb0b613.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../packages/core/src/render3/instructions/property_interpolation.ts","webpack://ng-universal-demo/./app/pages/+default/login/login.component.html","webpack://ng-universal-demo/./app/pages/+default/login/login.component.ts","webpack://ng-universal-demo/../../../src/common/auth.guard.ts","webpack://ng-universal-demo/./app/pages/+default/home/home.component.ts","webpack://ng-universal-demo/../../../src/common/componentRouteAuthorized.decorator.ts","webpack://ng-universal-demo/../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+default/home/home.component.html","webpack://ng-universal-demo/../../../src/common/authorize.decorator.ts","webpack://ng-universal-demo/./app/pages/+default/default.routes.ts","webpack://ng-universal-demo/./app/pages/+default/default.module.ts"],"sourcesContent":["import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate(\n    propName: string, v0: any, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate1(\n    propName: string, prefix: string, v0: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate2(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate3(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate4(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate5(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate6(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate7(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate8(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolateV(\n    propName: string, values: any[], sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1,\n          ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n","<div class=\"align-self-center\">\r\n    <h1 class=\"text-uppercase text-center\" >{{'gui' | translate}}</h1>\r\n\r\n    <div class=\"alert alert-danger\" *ngIf=\"authenticationError\" @slideInOut>\r\n        {{'Authentication failed! Please check your credentials and try again.' | translate}}\r\n    </div>\r\n\r\n    <form class=\"form\" role=\"form\" [formGroup]=\"form\" (submit)=\"login()\">\r\n        <div class=\"form-group\">\r\n            <label for=\"username\">{{'Login' | translate}}</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"{{'Your login' | translate}}\" formControlName=\"userName\">\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">{{'Password' | translate}}</label>\r\n            <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"{{'Your password' | translate}}\" formControlName=\"password\">\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"rememberme\">{{'Remember me' | translate}} <input type=\"checkbox\" id=\"rememberme\" formControlName=\"rememberMe\"></label>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary\">{{'Authenticate' | translate}}</button>\r\n    </form>\r\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject} from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {AuthenticationService} from '@anglr/authentication';\nimport {slideInOutTrigger} from '@anglr/animations';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {EMPTY} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\n\n/**\n * Page containing login form\n */\n@Component(\n{\n    selector: 'login-view',\n    templateUrl: 'login.component.html',\n    host:\n    {\n        '[class.justify-content-center]': 'true'\n    },\n    animations: [slideInOutTrigger],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'login', data: {animation: 'login'}})\nexport class LoginComponent\n{\n    //######################### public properties #########################\n\n    /**\n     * Form group for login information\n     */\n    public form: FormGroup;\n\n    /**\n     * Indication that there is authentication error\n     */\n    public authenticationError: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(private _authService: AuthenticationService<any>,\n                private _router: Router,\n                private _activeRoute: ActivatedRoute,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(LOGGER) private _logger: Logger,\n                formBuilder: FormBuilder)\n    {\n        this.form = formBuilder.group(\n        {\n            userName: null,\n            password: null,\n            rememberMe: null\n        });\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Logs in user\n     */\n    public login()\n    {\n        //TODO - add resolver that checks logged user and redirects to requested page\n        this._authService\n            .login(this.form.value)\n            .pipe(catchError(e =>\n            {\n                this._logger.error(`Failed to log in '${e}'`);\n                this.authenticationError = true;\n                this._changeDetector.detectChanges();\n                \n                return EMPTY;\n            }))\n            .subscribe(() =>\n            {\n                this.authenticationError = false;\n                \n                this._changeDetector.detectChanges();\n                \n                if(this._activeRoute.snapshot.queryParams.returnUrl)\n                {\n                    this._router.navigateByUrl(this._activeRoute.snapshot.queryParams.returnUrl);\n                }\n                else\n                {\n                    this._router.navigate(['/']);\n                }\n            });\n    }\n}","import {Injectable, Injector} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, Router, UrlTree, UrlSegmentGroup} from '@angular/router';\nimport {isBlank, flatMapArray} from '@jscrpt/common';\n\nimport {AuthorizeOptions} from './authorize.decorator';\nimport {AuthenticationService} from './authentication.service';\nimport {AuthorizationDecoratedComponent} from './authorize.decorator';\nimport {evaluatePermissions} from '../misc/utils';\n\n/**\n * Routing guard that is used for authorization of user\n */\n@Injectable({providedIn: 'root'})\nexport class AuthGuard implements CanActivate\n{\n    //######################### constructor #########################\n    constructor(private _authSvc: AuthenticationService,\n                private _injector: Injector,\n                private _router: Router)\n    {\n    }\n\n    //######################### implementation of CanActivate #########################\n\n    /**\n     * Tests whether component can be activated\n     * @param next - Information about next coming route\n     */\n    public async canActivate(next: ActivatedRouteSnapshot) : Promise<boolean>\n    {\n        const component = next.component as unknown as AuthorizationDecoratedComponent;\n        let authOptions: AuthorizeOptions|undefined;\n\n        //route specific auth options\n        if(next.routeConfig?.path &&\n           component.routeSpecificPermissions?.[next.routeConfig.path])\n        {\n            authOptions = component.routeSpecificPermissions[next.routeConfig.path];\n        }\n        //common auth options\n        else if(component.permissions)\n        {\n            authOptions = component.permissions;\n        }\n        \n        if(!authOptions)\n        {\n            return true;\n        }\n\n        let addCondition: boolean = true;\n\n        //evaluate add condition\n        if(authOptions.addCondition)\n        {\n            addCondition = await authOptions.addCondition(this._injector);\n        }\n\n        const userIdentity = this._authSvc.userIdentity;\n\n        if(isBlank(userIdentity))\n        {\n            throw new Error('AuthenticationService must be initialized before first use of AuthGuard');\n        }\n\n        const authorized = evaluatePermissions(userIdentity.permissions,\n                                               authOptions.permission,\n                                               authOptions.andCondition ?? false,\n                                               authOptions.conditionString ?? false,\n                                               addCondition);\n\n        const urlSegmentGroup = new UrlSegmentGroup(flatMapArray(next.pathFromRoot.map(itm => itm.url)), {});\n        const urlTree = new UrlTree();\n        urlTree.root = urlSegmentGroup;\n        urlTree.queryParams = {};\n        const nextPath = this._router.serializeUrl(urlTree);\n\n        //user is authenticated and not authorized\n        if(!authorized && userIdentity.isAuthenticated)\n        {\n            this._authSvc.showAccessDenied();\n\n            return false;\n        }\n        //not authorized, not authenticated, not on login page\n        else if(!authorized && !userIdentity.isAuthenticated && !this._authSvc.isAuthPage(nextPath))\n        {\n            this._authSvc.showAuthPage();\n            \n            return false;\n        }\n\n        return true;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRedirectRoute} from '@anglr/common/router';\nimport {Authorize, ComponentRouteAuthorized} from '@anglr/authentication';\n\n/**\n * Home component\n */\n@Component(\n{\n    selector: 'home-view',\n    templateUrl: 'home.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'home')\n@ComponentRouteAuthorized({path: 'home'})\n@Authorize('home-page')\nexport class HomeComponent\n{\n}\n","import {ComponentRoute, ComponentRouteDefinition} from '@anglr/common/router';\n\nimport {AuthGuard} from './auth.guard';\n\n/**\n * Defines route for component on which is this decorator applied, automatically adds `AuthGuard`\n * @param route - Definition of route\n */\nexport function ComponentRouteAuthorized(route: ComponentRouteDefinition): ClassDecorator\n{\n    route.canActivate ??= [];\n\n    //adds auth guard if there is no one\n    if(route.canActivate.indexOf(AuthGuard) < 0)\n    {\n        route.canActivate.push(AuthGuard);\n    }\n\n    return ComponentRoute(route);\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","Home","import {Injector} from '@angular/core';\nimport {Dictionary, isBlank, isString, PromiseOr} from '@jscrpt/common';\n\n/**\n * Extended type with authorization permission definition\n */\nexport interface AuthorizationDecoratedComponent\n{\n    /**\n     * Definition of permissions required for authorization for all routes\n     */\n    permissions?: AuthorizeOptions;\n\n    /**\n     * Route specific permissions, can be applied only for specific route, overrides `permissions`\n     */\n    routeSpecificPermissions?: Dictionary<AuthorizeOptions>;\n}\n\n/**\n * Options passed to `Authorize` decorator\n */\nexport interface AuthorizeOptions\n{\n    /**\n     * Name of permission or array of permissions that is requested for displaying component\n     */\n    permission: string|string[];\n\n    /**\n     * Indication that AND condition should be used instead of OR condition if multiple permissions are provided\n     */\n    andCondition?: boolean;\n\n    /**\n     * Indication that provided string is set of loggical operations among permission names, if this is true andCondition is ignored\n     */\n    conditionString?: boolean;\n\n    /**\n     * Callback for additional condition that is added to evaluation of permission\n     */\n    addCondition?: (injector: Injector) => PromiseOr<boolean>;\n}\n\n/**\n * Used for setting required permission name for authentication\n * @param permission - Name of requested permission, array of permission names or AuthorizeOptions that is used for displaying of component\n * @param route - If provided route specific permission will be created applied only to specified route\n */\nexport function Authorize(permission: string|string[]|AuthorizeOptions, route?: string)\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        let options: AuthorizeOptions;\n\n        if(isString(permission) || Array.isArray(permission))\n        {\n            options =\n            {\n                permission\n            };\n        }\n        else\n        {\n            options = permission;\n        }\n\n        const typedTarget = target as unknown as AuthorizationDecoratedComponent;\n\n        if(isBlank(route))\n        {\n            typedTarget.permissions = options;\n        }\n        else\n        {\n            typedTarget.routeSpecificPermissions ??= {};\n            typedTarget.routeSpecificPermissions[route] = options;\n        }\n\n        return target;\n    };\n}","import {LoginComponent} from './login/login.component';\nimport {HomeComponent} from './home/home.component';\n\nexport const components =\n[\n    LoginComponent,\n    HomeComponent,\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\n\nimport {components} from './default.routes';\nimport {DebuggingFeatureModule, DisplayingFeatureModule, FormsFeatureModule} from '../../modules';\n\n/**\n * Module for Default application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        DebuggingFeatureModule\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class DefaultModule\n{\n}"],"names":["ComponentRoute","route","target","rt","component","routeDecoratedComponent","isBlank","routeValues","Object","defineProperty","enumerable","configurable","writable","value","push","ɵɵpropertyInterpolate","propName","v0","sanitizer","ɵɵpropertyInterpolate1","prefix","suffix","lView","getLView","interpolatedValue","interpolation1","NO_CHANGE","tView","getTView","tNode","getSelectedTNode","elementPropertyInternal","RENDERER","i0","LoginComponent","constructor","_authService","_router","_activeRoute","_changeDetector","_logger","formBuilder","authenticationError","this","form","group","userName","password","rememberMe","login","pipe","catchError","e","error","detectChanges","EMPTY","subscribe","snapshot","queryParams","returnUrl","navigateByUrl","navigate","LOGGER","selectors","hostVars","hostBindings","ctx","slideInOutTrigger","changeDetection","path","data","animation","AuthenticationService","Router","ActivatedRoute","ChangeDetectorRef","FormBuilder","AuthGuard","_authSvc","_injector","canActivate","next","authOptions","routeConfig","routeSpecificPermissions","permissions","addCondition","userIdentity","Error","authorized","evaluatePermissions","permission","andCondition","conditionString","urlSegmentGroup","UrlSegmentGroup","flatMapArray","pathFromRoot","map","itm","url","urlTree","UrlTree","root","nextPath","serializeUrl","isAuthenticated","showAccessDenied","isAuthPage","showAuthPage","i1","HomeComponent","redirectTo","pathMatchFull","decls","vars","template","console","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","pathMatch","indexOf","options","isString","Array","isArray","typedTarget","Authorize","components","DefaultModule","DisplayingFeatureModule","FormsFeatureModule","DebuggingFeatureModule","ModuleRoutes"],"sourceRoot":""}