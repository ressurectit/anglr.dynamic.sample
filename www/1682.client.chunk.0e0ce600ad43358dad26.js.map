{"version":3,"file":"1682.client.chunk.0e0ce600ad43358dad26.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoCustomComponentsRegister/demoCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/layout/layout.component.html","webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/misc/services/complexStaticRegister/complexStaticRegister.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+dynamicContent/dynamicContent.routes.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/dynamicContent.module.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'CUSTOM_COMPONENTS';\n\n/**\n * Demo custom components register\n */\n@Injectable()\nexport class DemoCustomComponentsRegister extends CustomComponentsRegister\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggles template as registered custom component\n     * @param name - Name of template to be toggled\n     */\n    public toggleRegisteredComponent(name: string): void\n    {\n        const customComponents = this.getRegisteredComponents();\n        const index = customComponents.indexOf(name);\n\n\n        if(index >= 0)\n        {\n            customComponents.splice(index, 1);\n        }\n        else\n        {\n            customComponents.push(name);\n        }\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Gets registered components\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return this._store.get<string[]|null>(CUSTOM_COMPONENTS) ?? [];\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Component, ChangeDetectionStrategy, FactoryProvider, ClassProvider, ExistingProvider, OnInit, Inject, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, EditorHotkeys, JsonLanguageModel, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {provideLayoutEditor, REFRESH_PALETTE_OBSERVABLES} from '@anglr/dynamic/layout-editor';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {CustomComponentsRegister, provideEditorLayoutCustomComponents} from '@anglr/dynamic/layout-relations';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {GlobalNotificationsService} from '@anglr/notifications';\nimport {generateId, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoCustomComponentsRegister} from '../../../services/demoCustomComponentsRegister';\nimport {DemoLayoutPackageManager} from '../../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutEditor} from '../../../dynamicItems/utils';\n\n/**\n * Component used for displaying layout editor\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'layout.component.html',\n    styleUrls: ['layout.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout ?? null),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideSampleLayoutEditor(),\n        provideEditorLayoutCustomComponents([], DemoCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n        <ExistingProvider>\n        {\n            provide: DemoCustomComponentsRegister,\n            useExisting: CustomComponentsRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (register: DemoCustomComponentsRegister) => register.registeredChange,\n            deps: [DemoCustomComponentsRegister],\n            multi: true,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'layout/:id'})\n@Authorize('layoutEditor-page')\nexport class LayoutComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of layout template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: LayoutComponentMetadata|null = this.emptyMetadata;\n\n    /**\n     * Gets empty metadata\n     */\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [] as LayoutComponentMetadata[],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<LayoutComponentMetadata>,\n                private dialog: TitledDialogService,\n                private _notifications: GlobalNotificationsService,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            this.metadata = this._store.getData(this._id)?.layout ?? this.emptyMetadata;\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.layout = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n\n    /**\n     * Imports metadata from json string\n     */\n    protected async import(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Import layout metadata',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: '',\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            try\n            {\n                this.metadata = JSON.parse(result.content);\n\n                this._changeDetector.detectChanges();\n            }\n            catch(e)\n            {\n                this._notifications.error(`Failed to parse json ${e}`);\n            }\n        }\n    }\n}","<div class=\"flex-row\">\n    <button type=\"button\" class=\"btn btn-info\" goBack>\n        <span class=\"fas fa-arrow-left\"></span>\n        <span>back</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\">\n        <span class=\"fas fa-save\"></span>\n        <span>save</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"import()\">\n        <span class=\"fas fa-file-import\"></span>\n        <span>import</span>\n    </button>\n\n    <debug-data [copyClick]=\"metadata\">copy metadata</debug-data>\n</div>\n\n<layout-editor class=\"flex-1\" [metadata]=\"metadata\"></layout-editor>","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Static components register for relations complex sample\n */\n@Injectable()\nexport class ComplexStaticRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy, OnInit, Inject, FactoryProvider, ClassProvider, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, EditorHotkeys, JsonLanguageModel, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideRestLayoutRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {GlobalNotificationsService} from '@anglr/notifications';\nimport {LayoutManager, provideEditorRelationsCustomComponents, provideLayoutRelationsEditorWithStatic} from '@anglr/dynamic/layout-relations';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoCustomComponentsRegister} from '../../../services/demoCustomComponentsRegister';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutRelationsEditor} from '../../../dynamicItems/utils';\nimport {ComplexStaticRegister} from '../misc';\n\n/**\n * Component used for displaying relations editor\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relations.component.html',\n    styleUrls: ['relations.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations ?? []),\n            deps: [StoreDataService]\n        },\n        provideHandlebarsLayoutRelationsEditor(),\n        provideRestLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideSampleLayoutRelationsEditor(),\n        provideEditorRelationsCustomComponents(provideLayoutRelationsEditorWithStatic(ComplexStaticRegister), DemoCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'relations/:id'})\n@Authorize('relationsEditor-page')\nexport class RelationsComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of relations template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<RelationsNodeMetadata[]>,\n                private layoutManager: LayoutManager,\n                private dialog: TitledDialogService,\n                private _notifications: GlobalNotificationsService,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            const metadata = this._store.getData(this._id);\n            this.metadata = metadata?.relations ?? [];\n\n            if(metadata?.layout)\n            {\n                this.layoutManager.setLayout(metadata?.layout);\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.relations = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n\n    /**\n     * Imports metadata from json string\n     */\n    protected async import(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Import relations metadata',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: '',\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            try\n            {\n                this.metadata = JSON.parse(result.content);\n\n                this._changeDetector.detectChanges();\n            }\n            catch(e)\n            {\n                this._notifications.error(`Failed to parse json ${e}`);\n            }\n        }\n    }\n}\n","<div class=\"flex-row\">\n    <button type=\"button\" class=\"btn btn-info\" goBack>\n        <span class=\"fas fa-arrow-left\"></span>\n        <span>back</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\">\n        <span class=\"fas fa-save\"></span>\n        <span>save</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"import()\">\n        <span class=\"fas fa-file-import\"></span>\n        <span>import</span>\n    </button>\n\n    <debug-data [copyClick]=\"metadata\">copy metadata</debug-data>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {LayoutComponent} from './layout/layout.component';\nimport {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    LayoutComponent,\n    RelationsComponent,\n];","import {NgModule} from '@angular/core';\nimport {GoBackModule} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './dynamicContent.routes';\n\n/**\n * Module for dynamic content application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        GoBackModule,\n        DynamicLayoutRelationsEditorModule,\n        DebugDataCopyClickModule,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class DynamicContentModule\n{\n}"],"names":["CUSTOM_COMPONENTS","DemoCustomComponentsRegister","CustomComponentsRegister","constructor","_store","super","_registeredChange","Subject","registeredChange","this","asObservable","toggleRegisteredComponent","name","customComponents","getRegisteredComponents","index","indexOf","splice","push","set","next","get","i0","PERMANENT_STORAGE","factory","DemoLayoutPackageManager","PackageManager","LayoutComponent","_route","_metaManager","dialog","_notifications","_changeDetector","_id","metadata","emptyMetadata","id","generateId","displayName","package","options","children","ngOnInit","params","subscribe","getData","layout","save","getMetadata","undefined","setData","import","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","languageModel","JsonLanguageModel","afterClosed","isPresent","JSON","parse","detectChanges","e","error","METADATA_STATE_MANAGER","selectors","features","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","deps","StoreDataService","provideLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideSampleLayoutEditor","provideEditorLayoutCustomComponents","useClass","useExisting","REFRESH_PALETTE_OBSERVABLES","register","multi","createStoreDataServiceFactory","decls","vars","consts","template","ctx","ComponentRouteAuthorized","path","Authorize","ActivatedRoute","Object","TitledDialogService","GlobalNotificationsService","ChangeDetectorRef","DemoRelationsPackageManager","ComplexStaticRegister","Register","getDefinedTypes","t","RelationsComponent","layoutManager","relations","setLayout","RELATIONS_METADATA_STORAGE","provideHandlebarsLayoutRelationsEditor","provideRestLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideSampleLayoutRelationsEditor","provideEditorRelationsCustomComponents","provideLayoutRelationsEditorWithStatic","LayoutManager","components","DynamicContentModule","GoBackModule","DynamicLayoutRelationsEditorModule","DebugDataCopyClickModule","ModuleRoutes"],"sourceRoot":""}