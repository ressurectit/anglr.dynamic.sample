{"version":3,"file":"9444.client.chunk.f23c45d2117956fcb640.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.model.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.html","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.ts","webpack://ng-universal-demo/../../../relations-editor/src/pipes/toColor/toColor.pipe.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts"],"sourcesContent":["import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, OnDestroy, inject} from '@angular/core';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_HISTORY_MANAGER} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of resize observer\n     */\n    protected observer: ResizeObserver;\n\n    /**\n     * Metadata history manager\n     */\n    protected history: MetadataHistoryManager<RelationsNodeMetadata[]> = inject(RELATIONS_HISTORY_MANAGER);\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether user moved node during drag\n     */\n    protected moved: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n\n        this.observer = new ResizeObserver(() =>this.updateRelations());\n        this.observer.observe(this.element.nativeElement);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(): void\n    {\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.moved = false;\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.moved = true;\n\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            if(this.moved)\n            {\n                this.history.getNewState();\n            }\n\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, HostBinding, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Indication whether node endpoint is highlighted\n     */\n    @HostBinding('class.highlighted')\n    protected _isHighlighted: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Highlight node endpoit\n     */\n    public highlight(): void\n    {\n        this._isHighlighted = true;\n    }\n\n    /**\n     * Cancel highlight for node endpoint\n     */\n    public cancelHighlight(): void\n    {\n        this._isHighlighted = false;\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RelationsNodeProperties} from './relationsNodePropertiesEditor.interface';\n\n/**\n * Relations node properties model\n */\nexport class RelationsNodePropertiesModel implements RelationsNodeProperties\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public displayName: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public scope: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RelationsNodeProperties|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\n\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from './relationsNodePropertiesEditor.interface';\nimport {RelationsNodePropertiesModel} from './relationsNodePropertiesEditor.model';\n\n/**\n * Component used for editing display name of relations node\n */\n@Component(\n{\n    selector: 'relations-node-properties-editor',\n    templateUrl: 'relationsNodePropertiesEditor.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodePropertiesEditorSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control for editation of display name\n     */\n    protected form: FormGroup<FormModelGroup<RelationsNodeProperties>>;\n\n    /**\n     * Array of available scopes\n     */\n    protected scopes: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: RelationsNodePropertiesEditorData,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.form = formModelBuilder.build<RelationsNodeProperties>(new RelationsNodePropertiesModel(data.properties));\n        this.scopes = data.scopeRegister.scopes;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\nimport {stringToColour} from '../../misc/utils';\n\n/**\n * Converts string to color code\n */\n@Pipe({name: 'toColor', standalone: true})\nexport class ToColorSAPipe implements PipeTransform\n{\n    /**\n     * Converts string to color code\n     * @param value - String to be converted\n     */\n    public transform(value: string|undefined|null): string|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        return stringToColour(value);\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {TooltipModule} from '@anglr/common';\nimport {lastValueFrom, Subject} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodePropertiesEditorSAComponent} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.component';\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.interface';\nimport {ToColorSAPipe} from '../../pipes/toColor/toColor.pipe';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\nimport {ScopeRegister} from '../../services';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        ToColorSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent relations node of node header\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    /**\n     * Subject used for destroying relations node\n     */\n    @Input()\n    public destroySubject: Subject<void>|undefined|null;\n\n    /**\n     * Name of node to be displayed\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected dialog: TitledDialogService,\n                protected changeDetector: ChangeDetectorRef,\n                protected scopeRegister: ScopeRegister,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Opens editation of properties\n     */\n    protected async editProperties(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RelationsNodePropertiesEditorSAComponent, RelationsNodePropertiesEditorData, RelationsNodeProperties|undefined|null>(RelationsNodePropertiesEditorSAComponent,\n        {\n            title: 'edit properties',\n            width: '30vw',\n            data: \n            {\n                properties: \n                {\n                    displayName: this.parent?.metadata?.displayName || this.name || this.parent?.metadata?.id || '',\n                    scope: this.parent?.metadata?.scope ?? '',\n                },\n                scopeConfigurable: this.parent?.metadata?.nodeMetadata?.scopeConfigurable ?? false,\n                scopeRegister: this.scopeRegister,\n            }\n        }).afterClosed());\n\n        if(result && this.parent?.metadata)\n        {\n            this.parent.metadata.displayName = result.displayName ?? undefined;\n            this.parent.metadata.scope = result.scope ?? undefined;\n            this.history.getNewState();\n\n            this.changeDetector.detectChanges();\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n\n        this._relation?.highlight();\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n\n        this._relation?.cancelHighlight();\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.highlight());\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.cancelHighlight());\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}"],"names":["RelationsNodeBase","constructor","changeDetector","element","history","inject","RELATIONS_HISTORY_MANAGER","initialized","isDragging","moved","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","destroySubject","Subject","zoomLevel","this","nativeElement","classList","add","updatePosition","observer","ResizeObserver","updateRelations","observe","id","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","destroy","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","ngOnDestroy","disconnect","invalidateVisuals","detectChanges","initEndpoints","initialize","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","onMouseUp","getNewState","updateInputs","inputsChildren","forEach","input","name","Object","freeze","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","style","left","top","i0","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_isHighlighted","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","highlight","cancelHighlight","RelationsNodePropertiesModel","value","displayName","scope","mapValuesToThis","RelationsNodePropertiesEditorSAComponent","data","formModelBuilder","scopes","form","build","properties","scopeRegister","TITLED_DIALOG_DATA","i1","FormModelBuilder","CommonModule","i2","MatDialogModule","i3","ReactiveFormsModule","i4","ToColorSAPipe","transform","stringToColour","RelationsNodeHeaderSAComponent","dialog","editProperties","result","lastValueFrom","open","title","width","scopeConfigurable","afterClosed","undefined","TooltipModule","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","_"],"sourceRoot":""}