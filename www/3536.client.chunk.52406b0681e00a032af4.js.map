{"version":3,"file":"3536.client.chunk.52406b0681e00a032af4.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/rest.metadata.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/rest.relations.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/type.ts"],"sourcesContent":["import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Rest relations metadata loader\n */\nexport const RestRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/rest.relationsMetadata')).RestRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {HttpClient, HttpEventType, HttpParams, HttpRequest} from '@angular/common/http';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {LOGGER, Logger, ProgressIndicatorService} from '@anglr/common';\nimport {handleHeaderParam, handlePathParam, handleQueryObjectParam, handleQueryParam, mergeQueryObjectParamsWithHttpParams, QueryStringSerializer} from '@anglr/rest';\nimport {isBlank, isEmptyObject, StringDictionary} from '@jscrpt/common';\nimport {catchError} from 'rxjs/operators';\nimport {EMPTY, Subscription} from 'rxjs';\n\nimport {RestRelationsMetadataLoader} from './rest.metadata';\nimport {RestRelationsOptions} from './rest.options';\n\n//TODO: add required to rest param\n\n/**\n * Rest relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(RestRelationsMetadataLoader)\nexport class RestRelations implements RelationsComponent<RestRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: RestRelationsOptions|undefined|null;\n\n    /**\n     * Instance of http client\n     */\n    protected http: HttpClient;\n\n    /**\n     * Instance of logger\n     */\n    protected logger: Logger;\n\n    /**\n     * Instance of query string serializer\n     */\n    protected queryStringSerializer: QueryStringSerializer;\n\n    /**\n     * Subscription for running request\n     */\n    protected runningRequestSubscription: Subscription|undefined|null;\n\n    /**\n     * Service used for handling progress indicator\n     */\n    protected progressIndicator: ProgressIndicatorService;\n\n    /**\n     * Indication whether there is null or undefined required param\n     */\n    protected emptyParam: boolean[] = [];\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): RestRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: RestRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Success output for rest result\n     */\n    @DynamicOutput()\n    public success: any = {test: true};\n\n    /**\n     * Error output for rest result\n     */\n    @DynamicOutput()\n    public error: any = null;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.http = injector.get(HttpClient);\n        this.logger = injector.get(LOGGER);\n        this.queryStringSerializer = injector.get(QueryStringSerializer);\n        this.progressIndicator = injector.get(ProgressIndicatorService);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(_changes: SimpleChanges): void\n    {\n        this.makeRequest();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n            {\n                for(const index in this.relationsOptions.params)\n                {\n                    const param = this.relationsOptions.params[index];\n                    this.emptyParam.push(true);\n\n                    if(param.configurable && param.name)\n                    {\n                        Object.defineProperty(this,\n                                              param.name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: value =>\n                                                  {\n                                                      param.value = value;\n\n                                                      this.emptyParam[index] = isBlank(value);\n                                                  }\n                                              });\n                    }\n                }\n            }\n        }\n\n        if(this.relationsOptions?.runImmediately)\n        {\n            this.makeRequest();\n        }\n    }\n\n    /**\n     * Make http request\n     */\n    protected makeRequest(): void\n    {\n        //on empty param\n        if(this.emptyParam.find(itm => itm))\n        {\n            return;\n        }\n\n        if(this.runningRequestSubscription)\n        {\n            this.runningRequestSubscription.unsubscribe();\n            this.progressIndicator.hideProgress();\n        }\n\n        if(!this.relationsOptions ||\n           !this.relationsOptions.method ||\n           !this.relationsOptions.url)\n        {\n            this.logger.warn('RestRelations: missing options for craeting http request {@data}', this.relationsOptions);\n\n            return;\n        }\n\n        let body: any = null;\n        let url: string = this.relationsOptions.url;\n        const params: StringDictionary = {};\n        const headers: StringDictionary = {};\n        const queryStrings: string[] = [];\n\n        if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n        {\n            for(const param of this.relationsOptions.params)\n            {\n                if(!param.name)\n                {\n                    continue;\n                }\n\n                const data =\n                {\n                    index: 0,\n                    key: param.name,\n                    value: param.value,\n                    transformFn: null\n                };\n\n                switch(param.type)\n                {\n                    case 'PATH':\n                    {\n                        url = handlePathParam(data, url);\n\n                        break;\n                    }\n                    case 'BODY':\n                    {\n                        body = param.value;\n\n                        break;\n                    }\n                    case 'QUERY':\n                    {\n                        handleQueryParam(data, params);\n\n                        break;\n                    }\n                    case 'QUERY OBJECT':\n                    {\n                        handleQueryObjectParam(data, queryStrings, this.queryStringSerializer);\n\n                        break;\n                    }\n                    case 'HEADER':\n                    {\n                        handleHeaderParam(data, headers);\n\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n\n        let request: HttpRequest<any> = new HttpRequest(this.relationsOptions.method,\n                                                        url,\n                                                        body,\n                                                        {\n                                                            reportProgress: false,\n                                                            responseType: 'json',\n                                                        });\n\n        // query params\n        if(!isEmptyObject(params))\n        {\n            request = request.clone(\n            {\n                setParams: params\n            });\n        }\n\n        // header params\n        if(!isEmptyObject(headers))\n        {\n            request = request.clone(\n            {\n                setHeaders: headers\n            });\n        }\n\n        // query object params\n        if(queryStrings.length)\n        {\n            const requestParams: HttpParams = mergeQueryObjectParamsWithHttpParams(queryStrings, request.params);\n\n            request = request.clone(\n            {\n                params: requestParams\n            });\n        }\n\n        this.runningRequestSubscription = this.http.request(request)\n            .pipe(catchError(error =>\n            {\n                //TODO: proper handling\n                this.success = null;\n                this.error = error;\n\n                return EMPTY;\n            }))\n            .subscribe(result =>\n            {\n                if(result.type == HttpEventType.Response)\n                {\n                    if(result.status >= 200 && result.status <= 300)\n                    {\n                        this.success = result.body;\n                        this.error = null;\n\n                        return;\n                    }\n                }\n            });\n    }\n}","import {RestRelations} from './rest.relations';\n\nexport default RestRelations;"],"names":["DynamicOutput","target","propertyKey","prop","Object","defineProperty","get","this","Subject","set","value","next","RestRelationsMetadataLoader","RestRelationsEditorMetadata","RestRelations","constructor","injector","emptyParam","success","test","error","http","HttpClient","logger","LOGGER","queryStringSerializer","QueryStringSerializer","progressIndicator","ProgressIndicatorService","relationsOptions","ɵRelationsOptions","initialize","ngOnChanges","_changes","makeRequest","invalidateVisuals","params","Array","isArray","index","param","push","configurable","name","enumerable","isBlank","runImmediately","find","itm","runningRequestSubscription","unsubscribe","hideProgress","method","url","warn","body","headers","queryStrings","data","key","transformFn","type","handlePathParam","handleQueryParam","handleQueryObjectParam","handleHeaderParam","request","HttpRequest","reportProgress","responseType","isEmptyObject","clone","setParams","setHeaders","length","requestParams","mergeQueryObjectParamsWithHttpParams","pipe","catchError","EMPTY","subscribe","result","HttpEventType","status","__decorate","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}