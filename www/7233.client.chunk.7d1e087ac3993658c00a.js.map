{"version":3,"file":"7233.client.chunk.7d1e087ac3993658c00a.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/textBlock/textBlock.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/textBlock/textBlock.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/textBlock/textBlock.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/textBlock/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {TextBlockComponentOptions} from './textBlock.options';\n\n/**\n * Text block layout metadata loader\n */\nexport const TextBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TextBlockComponentOptions>> = async () => new (await import('./metadata/textBlock.layoutMetadata')).TextBlockLayoutEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {TextBlockComponentOptions} from './textBlock.options';\nimport {TextBlockLayoutMetadataLoader} from './textBlock.metadata';\n\n/**\n * Component used for displaying text block\n */\n@Component(\n{\n    selector: 'text-block',\n    templateUrl: 'textBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(TextBlockLayoutMetadataLoader)\nexport class TextBlockSAComponent extends LayoutComponentBase<TextBlockComponentOptions> implements LayoutComponent<TextBlockComponentOptions>\n{\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TextBlockSAComponent} from './textBlock.component';\n\nexport default TextBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["TextBlockLayoutMetadataLoader","TextBlockLayoutEditorMetadata","TextBlockSAComponent","LayoutComponentBase","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","this","componentElement","extensionsOptions","options","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata","instance"],"sourceRoot":""}