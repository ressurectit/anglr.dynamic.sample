{"version":3,"file":"7107.client.chunk.fa82bce3b9472d6be7b1.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+customComponents/misc/components/newCustomComponent/newCustomComponent.component.ts","webpack://ng-universal-demo/./app/pages/+customComponents/misc/components/newCustomComponent/newCustomComponent.component.html","webpack://ng-universal-demo/./app/pages/+customComponents/customComponents/customComponents.component.html","webpack://ng-universal-demo/./app/pages/+customComponents/customComponents/customComponents.component.ts","webpack://ng-universal-demo/./app/pages/+customComponents/customComponentsLayout/customComponentsLayout.component.ts","webpack://ng-universal-demo/./app/pages/+customComponents/customComponentsLayout/customComponentsLayout.component.html","webpack://ng-universal-demo/./app/pages/+customComponents/customComponentsRelations/customComponentsRelations.component.ts","webpack://ng-universal-demo/./app/pages/+customComponents/customComponentsRelations/customComponentsRelations.component.html","webpack://ng-universal-demo/./app/pages/+customComponents/customComponents.routes.ts","webpack://ng-universal-demo/./app/pages/+customComponents/customComponents.module.ts","webpack://ng-universal-demo/./app/services/sampleCustomComponentsRegister/sampleCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/sampleLayoutPackageManager/sampleLayoutPackageManager.service.ts","webpack://ng-universal-demo/./app/services/sampleRelationsPackageManager/sampleRelationsPackageManager.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {HasErrorModule, SubmittedService} from '@anglr/common/forms';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {generateId} from '@jscrpt/common';\n\nimport {createStoreDataServiceFactory} from '../../../../../misc/factories';\nimport {StoreDataService} from '../../../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../../../misc/interfaces';\nimport {SampleCustomComponentsRegister} from '../../../../../services/sampleCustomComponentsRegister';\n\n/**\n * Component used for adding new custom component as dialog\n */\n@Component(\n{\n    selector: 'new-custom-component',\n    templateUrl: 'newCustomComponent.component.html',\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        ReactiveFormsModule,\n        HasErrorModule,\n    ],\n    providers:\n    [\n        SampleCustomComponentsRegister,\n        SubmittedService,\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NewCustomComponentSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for custom component name\n     */\n    protected name: FormControl<string> = new FormControl();\n\n    //######################### constructor #########################\n    constructor(private _submittedSvc: SubmittedService,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                private _customComponents: SampleCustomComponentsRegister,\n                private _dialog: MatDialogRef<NewCustomComponentSAComponent>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Creates new custom component\n     */\n    protected createCustomComponent(): void\n    {\n        this._submittedSvc.setSubmitted();\n\n        if(this.name.invalid)\n        {\n            return;\n        }\n\n        this._store.setData(this.name.value,\n        {\n            layout:\n            {\n                id: `root-${generateId(10)}`,\n                displayName: 'root',\n                package: 'basic-components',\n                name: 'stackPanel',\n                options: <StackPanelComponentOptions>\n                {\n                    children: [] as LayoutComponentMetadata[],\n                },\n            },\n            relations: [], \n        });\n\n        this._customComponents.addCustomComponent(this.name.value);\n        this._dialog.close();\n    }\n}","<form novalidate (submit)=\"$event.stopPropagation(); $event.preventDefault(); createCustomComponent();\">\n    <div class=\"margin-bottom-small\">\n        <label class=\"control-label\">Name</label>\n        <input class=\"form-control\" required [formControl]=\"name\" hasError>\n    </div>\n\n    <div class=\"flex-row flex-end\">\n        <button type=\"button\" class=\"btn btn-info margin-right-extra-small\" mat-dialog-close>\n            <span>close</span>\n        </button>\n\n        <button type=\"submit\" class=\"btn btn-primary\">\n            <span>ok</span>\n        </button>\n    </div>\n</form>","<div>Custom components</div>\n\n<div class=\"flex-row flex-end margin-bottom-small\">\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"addCustomComponent()\">\n        <span class=\"fas fa-plus\"></span>\n        <span>add</span>\n    </button>\n</div>\n\n<ng-grid #grid [gridOptions]=\"gridOptions\">\n    <basic-table-metadata>\n        <basic-table-column id=\"name\" name=\"name\" title=\"Name\"></basic-table-column>\n\n        <basic-table-column id=\"remove\" title=\"remove\" [titleVisible]=\"false\" width=\"200px\">\n            <ng-template #bodyTemplate let-row>\n                <a class=\"btn-icon\" (click)=\"removeCustomComponent(row.name)\">\n                    <span class=\"fas fa-trash\"></span>\n                </a>\n\n                <a class=\"btn btn-primary margin-left-small tight\" [routerLink]=\"['../customComponents/layout', row.name]\">\n                    <span>layout</span>\n                </a>\n\n                <a class=\"btn btn-primary margin-left-small tight\" [routerLink]=\"['../customComponents/relations', row.name]\">\n                    <span>relations</span>\n                </a>\n            </ng-template>\n        </basic-table-column>\n    </basic-table-metadata>\n</ng-grid>","import {Component, ChangeDetectionStrategy, ViewChild} from '@angular/core';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {Grid, GridOptions, NoPagingComponent, SyncDataLoaderComponent, SyncDataLoaderOptions} from '@anglr/grid';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {setSyncData} from '@anglr/grid/extensions';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {NewCustomComponentSAComponent} from '../misc/components';\nimport {SampleCustomComponentsRegister} from '../../../services/sampleCustomComponentsRegister';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\n\n/**\n * Component used for displaying custom components editation\n */\n@Component(\n{\n    selector: 'custom-components-view',\n    templateUrl: 'customComponents.component.html',\n    providers: \n    [\n        SampleCustomComponentsRegister,\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'customComponents'})\n@Authorize('customComponents-page')\nexport class CustomComponentsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Represents options for grid\n     */\n    protected gridOptions: GridOptions;\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of grid\n     */\n    @ViewChild('grid')\n    protected grid: Grid|undefined|null;\n\n    //######################### constructor #########################\n    constructor(private _dialogSvc: TitledDialogService,\n                private _customComponents: SampleCustomComponentsRegister,\n                private _store: StoreDataService<LayoutRelationsMetadata>,)\n    {\n        this.gridOptions =\n        {\n            autoInitialize: true,\n            plugins:\n            {\n                dataLoader:\n                {\n                    type: SyncDataLoaderComponent,\n                    options: <SyncDataLoaderOptions>\n                    {\n                        data: this._customComponents.getRegisteredComponents().map(itm => ({name: itm})),\n                    }\n                },\n                paging:\n                {\n                    type: NoPagingComponent,\n                },\n            }\n        };\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Opens dialog for adding custom component\n     */\n    protected async addCustomComponent(): Promise<void>\n    {\n        await lastValueFrom(this._dialogSvc.open(NewCustomComponentSAComponent,\n        {\n            width: '75vw',\n            title: 'new custom component',\n        }).afterClosed());\n\n        this.grid?.execute(setSyncData(this._customComponents.getRegisteredComponents().map(itm => ({name: itm})), true));\n    }\n\n    /**\n     * Removes custom compnent\n     * @param name - Name of custom component\n     */\n    protected removeCustomComponent(name: string): void\n    {\n        this._customComponents.removeCustomComponent(name);\n        this._store.removeData(name);\n        \n        this.grid?.execute(setSyncData(this._customComponents.getRegisteredComponents().map(itm => ({name: itm})), true));\n    }\n}","import {Component, ChangeDetectionStrategy, FactoryProvider, ClassProvider, ExistingProvider, OnInit, Inject} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutEditor, REFRESH_PALETTE_OBSERVABLES} from '@anglr/dynamic/layout-editor';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {CustomComponentsRegister, provideEditorLayoutCustomComponents} from '@anglr/dynamic/layout-relations';\nimport {provideBasicLayoutEditor, StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {generateId} from '@jscrpt/common';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {SampleCustomComponentsRegister} from '../../../services/sampleCustomComponentsRegister';\nimport {SampleLayoutPackageManager} from '../../../services/sampleLayoutPackageManager/sampleLayoutPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutEditor} from '../../../dynamicItems/utils';\n\n/**\n * Component used for displaying layout editor for custom components\n */\n@Component(\n{\n    selector: 'custom-components-layout-editor-view',\n    templateUrl: 'customComponentsLayout.component.html',\n    styleUrls: ['customComponentsLayout.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout ?? null),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideBasicLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideSampleLayoutEditor(),\n        provideEditorLayoutCustomComponents([], SampleCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: SampleLayoutPackageManager,\n        },\n        <ExistingProvider>\n        {\n            provide: SampleCustomComponentsRegister,\n            useExisting: CustomComponentsRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (register: SampleCustomComponentsRegister) => register.registeredChange,\n            deps: [SampleCustomComponentsRegister],\n            multi: true,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'customComponents/layout/:id'})\n@Authorize('customComponentsLayoutEditor-page')\nexport class CustomComponentsLayoutComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of layout template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: LayoutComponentMetadata|null = this.emptyMetadata;\n\n    /**\n     * Gets empty metadata\n     */\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [] as LayoutComponentMetadata[],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<LayoutComponentMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            this.metadata = this._store.getData(this._id)?.layout ?? this.emptyMetadata;\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.layout = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n}","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<layout-editor class=\"flex-1\" [metadata]=\"metadata\"></layout-editor>","import {Component, ChangeDetectionStrategy, OnInit, Inject, FactoryProvider, ClassProvider} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideRestLayoutRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {provideBasicLayoutRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutRelationsEditor} from '@anglr/dynamic/material-components';\nimport {LayoutManager, provideEditorRelationsCustomComponents, provideLayoutRelationsEditor} from '@anglr/dynamic/layout-relations';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {SampleCustomComponentsRegister} from '../../../services/sampleCustomComponentsRegister';\nimport {SampleRelationsPackageManager} from '../../../services/sampleRelationsPackageManager/sampleRelationsPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutRelationsEditor} from '../../../dynamicItems/utils';\n\n/**\n * Component used for displaying relations editor for custom components\n */\n@Component(\n{\n    selector: 'custom-components-relations-editor-view',\n    templateUrl: 'customComponentsRelations.component.html',\n    styleUrls: ['customComponentsRelations.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations ?? []),\n            deps: [StoreDataService]\n        },\n        provideBasicLayoutRelationsEditor(),\n        provideMaterialLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideRestLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideSampleLayoutRelationsEditor(),\n        provideEditorRelationsCustomComponents(provideLayoutRelationsEditor(), SampleCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: SampleRelationsPackageManager,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'customComponents/relations/:id'})\n@Authorize('customComponentsRelationsEditor-page')\nexport class CustomComponentsRelationsComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of relations template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<RelationsNodeMetadata[]>,\n                private layoutManager: LayoutManager,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            const metadata = this._store.getData(this._id);\n            this.metadata = metadata?.relations ?? [];\n\n            if(metadata?.layout)\n            {\n                this.layoutManager.setLayout(metadata?.layout);\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.relations = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n}\n","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {CustomComponentsComponent} from './customComponents/customComponents.component';\nimport {CustomComponentsLayoutComponent} from './customComponentsLayout/customComponentsLayout.component';\nimport {CustomComponentsRelationsComponent} from './customComponentsRelations/customComponentsRelations.component';\n\nexport const components =\n[\n    CustomComponentsLayoutComponent,\n    CustomComponentsRelationsComponent,\n    CustomComponentsComponent,\n];","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\nimport {GridModule} from '@anglr/grid';\n\nimport {components} from './customComponents.routes';\nimport {EditorControlsSAComponent} from '../../components';\n\n/**\n * Module for dynamic custom components\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutRelationsEditorModule,\n        EditorControlsSAComponent,\n        GridModule,\n        RouterModule,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class CustomComponentsModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'CUSTOM_COMPONENTS';\n\n/**\n * Sample custom components register\n */\n@Injectable()\nexport class SampleCustomComponentsRegister extends CustomComponentsRegister\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds custom component by its template name\n     * @param name - Name of template to be added\n     */\n    public addCustomComponent(name: string): void\n    {\n        const customComponents = this.getRegisteredComponents();\n        const index = customComponents.indexOf(name);\n\n        if(index >= 0)\n        {\n            return;\n        }\n            \n        customComponents.push(name);\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    /**\n     * Removes custom component by its template name\n     * @param name - Name of template to be removed\n     */\n    public removeCustomComponent(name: string): void\n    {\n        const customComponents = this.getRegisteredComponents();\n        const index = customComponents.indexOf(name);\n\n        if(index < 0)\n        {\n            return;\n        }\n        \n        customComponents.splice(index, 1);\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Gets registered components\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return this._store.get<string[]|null>(CUSTOM_COMPONENTS) ?? [];\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for sample app\n */\n@Injectable()\nexport class SampleLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for sample app\n */\n@Injectable()\nexport class SampleRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}"],"names":["NewCustomComponentSAComponent","constructor","_submittedSvc","_store","_customComponents","_dialog","name","FormControl","createCustomComponent","this","setSubmitted","invalid","setData","value","layout","id","generateId","displayName","package","options","children","relations","addCustomComponent","close","selectors","standalone","features","SampleCustomComponentsRegister","SubmittedService","createStoreDataServiceFactory","decls","vars","consts","template","i0","$event","stopPropagation","preventDefault","ctx","MatDialogModule","ReactiveFormsModule","HasErrorModule","encapsulation","changeDetection","CustomComponentsComponent","_dialogSvc","gridOptions","autoInitialize","plugins","dataLoader","type","SyncDataLoaderComponent","data","getRegisteredComponents","map","itm","paging","NoPagingComponent","lastValueFrom","open","width","title","afterClosed","grid","execute","setSyncData","removeCustomComponent","removeData","viewQuery","ComponentRouteAuthorized","path","Authorize","TitledDialogService","StoreDataService","CustomComponentsLayoutComponent","emptyMetadata","_route","_metaManager","history","_id","metadata","ngOnInit","params","subscribe","getData","save","getMetadata","undefined","METADATA_STATE_MANAGER","LAYOUT_HISTORY_MANAGER","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","deps","provideLayoutEditor","provideBasicLayoutEditor","provideMaterialLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideSampleLayoutEditor","provideEditorLayoutCustomComponents","PackageManager","useClass","SampleLayoutPackageManager","useExisting","CustomComponentsRegister","REFRESH_PALETTE_OBSERVABLES","register","registeredChange","multi","ActivatedRoute","MetadataHistoryManager","CustomComponentsRelationsComponent","layoutManager","setLayout","RELATIONS_HISTORY_MANAGER","RELATIONS_METADATA_STORAGE","provideBasicLayoutRelationsEditor","provideMaterialLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideRestLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideSampleLayoutRelationsEditor","provideEditorRelationsCustomComponents","provideLayoutRelationsEditor","SampleRelationsPackageManager","LayoutManager","components","CustomComponentsModule","DynamicLayoutRelationsEditorModule","EditorControlsSAComponent","GridModule","RouterModule","ModuleRoutes","CUSTOM_COMPONENTS","_registeredChange","asObservable","super","Subject","customComponents","indexOf","push","set","next","index","splice","get","PERMANENT_STORAGE","factory"],"sourceRoot":""}