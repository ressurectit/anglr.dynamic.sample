{"version":3,"file":"6609.client.chunk.430f5deb1ced9c9c0d79.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/dynamicItems/routerLink/routerLink.metadata.ts","webpack://ng-universal-demo/./app/dynamicItems/routerLink/routerLink.component.ts","webpack://ng-universal-demo/./app/dynamicItems/routerLink/routerLink.component.html","webpack://ng-universal-demo/./app/dynamicItems/routerLink/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {RouterLinkComponentOptions} from './routerLink.options';\n\n/**\n * Router link layout metadata loader\n */\nexport const RouterLinkLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<RouterLinkComponentOptions>> = async () => new (await import('./metadata/routerLink.layoutMetadata')).RouterLinkLayoutEditorMetadata();\n\n/**\n * Router link relations metadata loader\n */\nexport const RouterLinkRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/routerLink.relationsMetadata')).RouterLinkRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {RouterLinkComponentOptions, RouterLinkRelationsOptions} from './routerLink.options';\nimport {RouterLinkLayoutMetadataLoader, RouterLinkRelationsMetadataLoader} from './routerLink.metadata';\n\n/**\n * Component used for displaying router link\n */\n@Component(\n{\n    selector: 'router-link',\n    templateUrl: 'routerLink.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RouterModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RouterLinkRelationsMetadataLoader)\n@LayoutEditorMetadata(RouterLinkLayoutMetadataLoader)\nexport class RouterLinkSAComponent extends LayoutComponentBase<RouterLinkComponentOptions> implements LayoutComponent<RouterLinkComponentOptions>, RelationsComponent<RouterLinkRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: RouterLinkRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Argument that is passed to route\n     */\n    @Input()\n    public argument: any;\n}","<a [routerLink]=\"argument ? [options?.link, argument] : [options?.link]\" [ngClass]=\"options?.linkCssClass\">{{options?.text}}</a>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {RouterLinkSAComponent} from './routerLink.component';\n\nexport default RouterLinkSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["RouterLinkLayoutMetadataLoader","RouterLinkLayoutEditorMetadata","RouterLinkRelationsMetadataLoader","RouterLinkRelationsEditorMetadata","RouterLinkSAComponent","LayoutComponentBase","t","selectors","inputs","argument","standalone","features","decls","vars","consts","template","i0","ctx","CommonModule","i1","RouterModule","i2","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","componentElement","injector","logger","initialized","destroyed","element","this","extensionsOptions","options","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}