{"version":3,"file":"2914.client.chunk.734516a7f251861b0cbc.js","mappings":"iVAMO,MAAMA,EAAuC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAyDC,wCAAyC,E,+KAAA,kBAAtL,mC,yHCO7C,IAAMC,EAAN,MAgCHC,YAAsBC,GAAA,KAAAA,SAAAA,EAzBZ,KAAAC,mBAA8CC,KAAKF,SAASG,IAAIC,EAAAA,EAAoB,MAKpF,KAAAC,iBAAmDH,KAAKF,SAASG,IAAIG,EAAAA,EAA2B,MAKhG,KAAAC,GAAa,EAiBvB,CAOOC,YAAYC,GAEf,IAAI,MAAMC,KAAOC,OAAOC,KAAKH,GAEzBP,KAAKW,gBAAgBH,GAAOD,EAAQC,GAAKI,aACzCZ,KAAKW,gBAAgB,GAAGH,YAAcK,QAE9C,CAKOC,oBAEP,CAOOC,cAEAf,KAAKK,KAEJL,KAAKD,oBAAoBiB,iBAAiBhB,KAAKK,IAC/CL,KAAKG,kBAAkBc,oBAAoBjB,KAAKK,IAExD,CASaa,YAAYC,EACAd,EACAM,GAAoB,I,EAAA,c,EAAA,YAKzC,GAHA,EAAKN,GAAKA,EACV,EAAKM,gBAAkBA,EAEnB,EAAKR,kBAAqB,EAAKJ,mBAAnC,CAKA,IAAI,MAAMqB,KAAUD,EAAgBE,kBAAkBC,SAAW,GAE7Db,OAAOc,eAAe,EAAKZ,gBACLS,EAAOI,KACP,CACIvB,IAAK,WAED,OAAOD,KAAK,IAAIoB,EAAOI,OAC3B,EACAC,IAAK,SAASC,GAEV1B,KAAK,IAAIoB,EAAOI,QAAUE,GAC1BC,EAAAA,EAAAA,IAAmB3B,KAAMoB,EAAOI,KACpC,IAG1Bf,OAAOc,eAAe,EAAKZ,gBACL,GAAGS,EAAOI,aACV,CACIE,MAAO,IAAIE,EAAAA,SAIVC,IAAxBT,EAAOU,eAEL,EAAoBV,EAAOI,MAAQJ,EAAOU,cAG5CV,EAAOW,WAENC,EAAAA,EAAAA,IAAmB,EAAKrB,gBAAiBS,EAAOI,MAIxD,EAAKrB,iBAAiB8B,kBAAkB,EAAK5B,GAAI,SAC3C,EAAKN,mBAAmBmC,YAC9B,EAAKnC,mBAAmBoC,gBAAgB,EAAK9B,G,CAAI,E,gLACrD,GA/HST,GAAyB,UADrCwC,EAAAA,EAAAA,GAAwB1C,IAAwC,6BAiC7B2C,EAAAA,KAhCvBzC,E,gDCXb,Q,QAAwC,C","sources":["webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentOutputs/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n            this.customComponent[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${output.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${output.name}`] = value;\n                                          defineAssignedProp(this, output.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(output.defaultValue !== undefined)\n            {\n                (this as Dictionary)[output.name] = output.defaultValue;\n            }\n\n            if(output.skipInit)\n            {\n                defineSkipInitProp(this.customComponent, output.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {ComponentOutputsRelations} from './componentOutputs.relations';\n\nexport default ComponentOutputsRelations;\n"],"names":["ComponentOutputsRelationsMetadataLoader","ComponentOutputsRelationsEditorMetadata","ComponentOutputsRelations","constructor","injector","relationsProcessor","this","get","RelationsProcessor","componentManager","RelationsComponentManager","id","ngOnChanges","changes","key","Object","keys","customComponent","currentValue","next","invalidateVisuals","ngOnDestroy","destroyComponent","unregisterComponent","initOutputs","outputRelations","output","relationsOptions","outputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","RelationsEditorMetadata","Injector"],"sourceRoot":""}