{"version":3,"file":"8467.client.chunk.31ac7aa447818e6d9e01.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/ifBlock/ifBlock.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/ifBlock/ifBlock.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/ifBlock/ifBlock.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/ifBlock/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\n\n/**\n * If block layout metadata loader\n */\nexport const IfBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<IfBlockComponentOptions>> = async () => new (await import('./metadata/ifBlock.layoutMetadata')).IfBlockLayoutEditorMetadata();\n\n/**\n * If block relations metadata loader\n */\nexport const IfBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/ifBlock.relationsMetadata')).IfBlockRelationsEditorMetadata();\n\n/**\n * If block layout designer type loader\n */\nexport const IfBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/ifBlockDesigner.component')).IfBlockDesignerSAComponent;\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\nimport {IfBlockLayoutDesignerTypeLoader, IfBlockLayoutMetadataLoader, IfBlockRelationsMetadataLoader} from './ifBlock.metadata';\n\n/**\n * Component used for displaying if block\n */\n@Component(\n{\n    selector: 'if-block',\n    templateUrl: 'ifBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<IfBlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorDesignerType(IfBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(IfBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(IfBlockLayoutMetadataLoader)\nexport class IfBlockSAComponent extends LayoutComponentBase<IfBlockComponentOptions> implements LayoutComponent<IfBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Condition used for displaying content of if block\n     */\n    @Input()\n    public condition: boolean = true;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this.condition = this.options?.condition ?? false;\n    }\n}",null,"import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {IfBlockSAComponent} from './ifBlock.component';\n\nexport default IfBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["IfBlockLayoutMetadataLoader","IfBlockLayoutEditorMetadata","IfBlockRelationsMetadataLoader","IfBlockRelationsEditorMetadata","IfBlockLayoutDesignerTypeLoader","IfBlockDesignerSAComponent","IfBlockSAComponent","LayoutComponentBase","constructor","condition","onOptionsSet","this","options","CommonModule","LayoutComponentRendererSADirective","DescendantsGetter","content","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}