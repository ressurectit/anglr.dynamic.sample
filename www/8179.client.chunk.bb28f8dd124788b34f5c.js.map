{"version":3,"file":"8179.client.chunk.bb28f8dd124788b34f5c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/cdk/collections/unique-selection-dispatcher.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/components/layoutComponentBase/layoutComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/extensions/componentStyling/componentStyling.extension.js","webpack://ng-universal-demo/../../../src/cdk/accordion/accordion-module.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-module.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/expansionPanel/expansionPanel.metadata.js","webpack://ng-universal-demo/../../../src/cdk/accordion/accordion.ts","webpack://ng-universal-demo/../../../src/cdk/accordion/accordion-item.ts","webpack://ng-universal-demo/../../../src/material/expansion/accordion-base.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-animations.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-base.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-content.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel.ts","webpack://ng-universal-demo/../src/material/expansion/expansion-panel.html","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel.html","webpack://ng-universal-demo/../src/material/expansion/expansion-panel-header.html","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-header.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-header.html","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/expansionPanel/expansionPanel.component.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/expansionPanel/type.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/misc/dynamicItemExtensionBase.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\n\nexport function LayoutEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'layoutEditorMetadata');\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport { isEmptyObject, nameof } from '@jscrpt/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Base component for layout component\n */\n\nexport class LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(changeDetector, componentElement, injector, logger) {\n    this.changeDetector = changeDetector;\n    this.componentElement = componentElement;\n    this.injector = injector;\n    this.logger = logger; //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n\n    this.extensions = [];\n    /**\n     * Indication whether initialization was already done\n     */\n\n    this.initialized = false;\n    /**\n     * Indication whether was component destroyed\n     */\n\n    this.destroyed = false;\n  } //######################### protected properties #########################\n\n  /**\n   * Gets element that is used within extension\n   */\n\n\n  get element() {\n    return this.componentElement;\n  }\n  /**\n   * Gets options that are used within extension\n   */\n\n\n  get extensionsOptions() {\n    return this.options;\n  } //######################### public methods - implementation of OnDestroy #########################\n\n  /**\n   * Called when component is destroyed\n   */\n\n\n  ngOnDestroy() {\n    if (this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n\n    for (const ext of this.extensions) {\n      ext.destroy();\n    }\n\n    this.onDestroy();\n  } //######################### public methods - implementation of LayoutComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.initialized) {\n        return;\n      }\n\n      _this.initialized = true;\n      const extensionsOptions = _this.extensionsOptions;\n      yield _this.onInit();\n      yield _this.onOptionsSet();\n\n      if (extensionsOptions) {\n        for (const extension of _this.extensions) {\n          yield extension.initialize(_this.injector, _this.element, _this);\n        }\n      }\n\n      yield _this.afterInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnChanges(changes) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      //options has changed\n      if (nameof('options') in changes) {\n        yield _this2.onOptionsSet();\n        const extensionsOptions = _this2.extensionsOptions; //set options in extensions\n\n        if (extensionsOptions) {\n          for (const extension of _this2.extensions) {\n            yield extension.optionsChange(extensionsOptions);\n          }\n        }\n\n        if (!_this2.initialized) {\n          return;\n        }\n\n        yield _this2.onOptionsChange();\n      }\n\n      delete changes[nameof('options')];\n\n      if (!isEmptyObject(changes)) {\n        _this2.onChanges(changes);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  registerExtensions(extensions) {\n    this.extensions = extensions;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this.changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialzation of component, options are already set\n   */\n\n\n  onInit() {}\n  /**\n   * Called right after initialization finished, including extesions\n   */\n\n\n  afterInit() {}\n  /**\n   * Called on change of options, after initialization\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Occurs when some property changes on component\n   * @param _changes - Changes that occured on component\n   */\n\n\n  onChanges(_changes) {}\n  /**\n   * Called everytime options are set, after initialization and later\n   */\n\n\n  onOptionsSet() {}\n  /**\n   * Called when component is being destroyed\n   */\n\n\n  onDestroy() {}\n\n}\n\nLayoutComponentBase.ɵfac = function LayoutComponentBase_Factory(t) {\n  return new (t || LayoutComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nLayoutComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LayoutComponentBase,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { isPresent } from '@jscrpt/common';\n/**\n * Extension that applies common component styling to component\n */\n\nexport class ComponentStylingExtension extends DynamicItemExtensionBase {\n  //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n  onInit() {\n    this._applyStyling();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsChange() {\n    this._applyStyling();\n  } //######################### protected methods #########################\n\n  /**\n   * Applies component styling to element\n   */\n\n\n  _applyStyling() {\n    const options = this.options;\n    const style = this.element?.nativeElement.style;\n\n    if (this.element) {\n      if (isPresent(this.lastCssClass)) {\n        for (const cssClass of this.lastCssClass.split(' ')) {\n          if (cssClass) {\n            this.element.nativeElement.classList.remove(cssClass);\n          }\n        }\n      }\n\n      this.lastCssClass = options?.cssClass;\n\n      if (options?.cssClass) {\n        for (const cssClass of options.cssClass.split(' ')) {\n          if (cssClass) {\n            this.element?.nativeElement.classList.add(cssClass);\n          }\n        }\n      }\n    }\n\n    if (isPresent(style)) {\n      if (options?.margin) {\n        if (isPresent(options.margin.bottom)) {\n          style.marginBottom = options.margin.bottom;\n        }\n\n        if (isPresent(options.margin.right)) {\n          style.marginRight = options.margin.right;\n        }\n\n        if (isPresent(options.margin.top)) {\n          style.marginTop = options.margin.top;\n        }\n\n        if (isPresent(options.margin.left)) {\n          style.marginLeft = options.margin.left;\n        }\n      }\n\n      if (options?.padding) {\n        if (isPresent(options.padding.bottom)) {\n          style.paddingBottom = options.padding.bottom;\n        }\n\n        if (isPresent(options.padding.right)) {\n          style.paddingRight = options.padding.right;\n        }\n\n        if (isPresent(options.padding.top)) {\n          style.paddingTop = options.padding.top;\n        }\n\n        if (isPresent(options.padding.left)) {\n          style.paddingLeft = options.padding.left;\n        }\n      }\n\n      if (options?.textStyling) {\n        if (isPresent(options.textStyling.fontSize)) {\n          style.fontSize = options.textStyling.fontSize;\n        }\n\n        if (isPresent(options.textStyling.fontWeight)) {\n          style.fontWeight = options.textStyling.fontWeight.toString();\n        }\n      }\n    }\n  }\n\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Material expansion panel layout metadata loader\n */\nexport const MaterialExpansionPanelLayoutMetadataLoader = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/expansionPanel.layoutMetadata')).MaterialExpansionPanelLayoutEditorMetadata();\n  });\n\n  return function MaterialExpansionPanelLayoutMetadataLoader() {\n    return _ref.apply(this, arguments);\n  };\n}();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean {\n    return this._multi;\n  }\n  set multi(multi: BooleanInput) {\n    this._multi = coerceBooleanProperty(multi);\n  }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: BooleanInput) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled: BooleanInput) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Inject, Optional} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  constructor(\n    public _template: TemplateRef<any>,\n    @Inject(MAT_EXPANSION_PANEL) @Optional() public _expansionPanel?: MatExpansionPanelBase,\n  ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n",null,"<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [matExpansionAnimations.indicatorRotate],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader\n  extends _MatExpansionPanelHeaderMixinBase\n  implements AfterViewInit, OnDestroy, FocusableOption, HasTabIndex\n{\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super();\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n","<span class=\"mat-content\" [class.mat-content-hide-toggle]=\"!_showToggle()\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"mat-expansion-indicator\"></span>\n","import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { CommonModule } from '@angular/common';\nimport { LayoutComponentBase, LayoutComponentRendererSADirective } from '@anglr/dynamic/layout';\nimport { LayoutEditorMetadata } from '@anglr/dynamic/layout-editor';\nimport { HostDisplayBlockStyle } from '@anglr/common';\nimport { MaterialExpansionPanelLayoutMetadataLoader } from './expansionPanel.metadata';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/expansion\";\n/**\n * Component used for displaying toggle panel layout\n */\n\nfunction MaterialExpansionPanelSAComponent_ng_container_6_ng_template_1_Template(rf, ctx) {}\n\nfunction MaterialExpansionPanelSAComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, MaterialExpansionPanelSAComponent_ng_container_6_ng_template_1_Template, 0, 0, \"ng-template\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const type_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"layoutComponentRenderer\", type_r1);\n  }\n}\n\nlet MaterialExpansionPanelSAComponent = class MaterialExpansionPanelSAComponent extends LayoutComponentBase {\n  constructor() {\n    super(...arguments); //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether panel is expanded\n     */\n\n    this.expanded = true;\n  } //######################### protected - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsSet() {\n    this.expanded = this.options?.expanded ?? false;\n    this.title = this.options?.title;\n    this.description = this.options?.description;\n  }\n\n};\n\nMaterialExpansionPanelSAComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵMaterialExpansionPanelSAComponent_BaseFactory;\n  return function MaterialExpansionPanelSAComponent_Factory(t) {\n    return (ɵMaterialExpansionPanelSAComponent_BaseFactory || (ɵMaterialExpansionPanelSAComponent_BaseFactory = i0.ɵɵgetInheritedFactory(MaterialExpansionPanelSAComponent)))(t || MaterialExpansionPanelSAComponent);\n  };\n}();\n\nMaterialExpansionPanelSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MaterialExpansionPanelSAComponent,\n  selectors: [[\"material-expansion-panel\"]],\n  inputs: {\n    expanded: \"expanded\",\n    title: \"title\",\n    description: \"description\"\n  },\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 7,\n  vars: 4,\n  consts: [[3, \"expanded\"], [4, \"ngFor\", \"ngForOf\"], [3, \"layoutComponentRenderer\"]],\n  template: function MaterialExpansionPanelSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-expansion-panel\", 0)(1, \"mat-expansion-panel-header\")(2, \"mat-panel-title\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-panel-description\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(6, MaterialExpansionPanelSAComponent_ng_container_6_Template, 2, 1, \"ng-container\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"expanded\", ctx.expanded);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.description);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.options == null ? null : ctx.options.children);\n    }\n  },\n  dependencies: [CommonModule, i1.NgForOf, MatExpansionModule, i2.MatExpansionPanel, i2.MatExpansionPanelHeader, i2.MatExpansionPanelTitle, i2.MatExpansionPanelDescription, LayoutComponentRendererSADirective],\n  styles: [\"[_nghost-%COMP%]{display: block;}\"],\n  changeDetection: 0\n});\nMaterialExpansionPanelSAComponent = __decorate([LayoutEditorMetadata(MaterialExpansionPanelLayoutMetadataLoader)], MaterialExpansionPanelSAComponent);\nexport { MaterialExpansionPanelSAComponent };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialExpansionPanelSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'material-expansion-panel',\n      standalone: true,\n      imports: [CommonModule, MatExpansionModule, LayoutComponentRendererSADirective],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<mat-expansion-panel [expanded]=\\\"expanded\\\">\\n    <mat-expansion-panel-header>\\n        <mat-panel-title>{{title}}</mat-panel-title>\\n        <mat-panel-description>{{description}}</mat-panel-description>\\n    </mat-expansion-panel-header>\\n\\n    <ng-container *ngFor=\\\"let type of options?.children\\\">\\n        <ng-template [layoutComponentRenderer]=\\\"type\\\"></ng-template>\\n    </ng-container>\\n</mat-expansion-panel>\",\n      styles: [\":host{display: block;}\"]\n    }]\n  }], null, {\n    expanded: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    description: [{\n      type: Input\n    }]\n  });\n})();","import { ComponentStylingExtension } from '@anglr/dynamic/layout';\nimport { MaterialExpansionPanelSAComponent } from './expansionPanel.component';\nexport default MaterialExpansionPanelSAComponent;\nexport const extensions = [ComponentStylingExtension];","//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata(metadataLoader, propertyName) {\n  if (ngDesignerMetadata) {\n    return function (target) {\n      target[propertyName] = metadataLoader();\n      return target;\n    };\n  }\n\n  return function (target) {\n    return target;\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Dynamic item extension base class\n */\nexport class DynamicItemExtensionBase {\n  //######################### constructor #########################\n  constructor(metadata) {\n    this.metadata = metadata;\n    /**\n     * Indication whether was extension initialized\n     */\n\n    this.initialized = false;\n  } //######################### public methods - implementation of DynamicItemExtension #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize(injector, element, instance) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.initialized = true;\n      _this.injector = injector;\n      _this.element = element;\n      _this.instance = instance;\n      yield _this.onInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  optionsChange(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.options = options;\n\n      if (!_this2.initialized) {\n        return;\n      }\n\n      yield _this2.onOptionsChange();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  destroy() {\n    this.onDestroy();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialization of component\n   */\n\n\n  onInit() {}\n  /**\n   * Called on change of options of component\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Called on destruction of component\n   */\n\n\n  onDestroy() {}\n\n}"],"names":["UniqueSelectionDispatcher","constructor","_listeners","notify","id","name","listener","this","listen","push","filter","registered","ngOnDestroy","LayoutEditorMetadata","metadataLoader","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","LayoutComponentBase","changeDetector","componentElement","injector","logger","extensions","initialized","destroyed","element","extensionsOptions","options","ext","destroy","onDestroy","ngOnInit","_this","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","_this2","optionsChange","onOptionsChange","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","t","type","features","ComponentStylingExtension","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","CdkAccordionModule","MatExpansionModule","CommonModule","MatCommonModule","PortalModule","MaterialExpansionPanelLayoutMetadataLoader","_ref","MaterialExpansionPanelLayoutEditorMetadata","nextId","CDK_ACCORDION","InjectionToken","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","_multi","multi","coerceBooleanProperty","openAll","next","closeAll","complete","provide","useExisting","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","closed","EventEmitter","opened","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","accordionId","expanded","_subscribeToOpenCloseAllActions","emit","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","i0","useValue","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","hideToggle","togglePosition","_togglePosition","_hasSpacing","displayMode","_getExpandedState","ngAfterContentInit","_lazyContent","startWith","_portal","take","TemplatePortal","_containsFocus","_body","focusedElement","activeElement","bodyElement","contains","DOCUMENT","ANIMATION_MODULE_TYPE","i2","MatExpansionPanelActionRow","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","EMPTY","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i1","i3","MatExpansionPanelDescription","MatExpansionPanelTitle","MaterialExpansionPanelSAComponent_ng_container_6_ng_template_1_Template","rf","ctx","MaterialExpansionPanelSAComponent_ng_container_6_Template","type_r1","$implicit","MaterialExpansionPanelSAComponent","title","description","selectors","inputs","standalone","decls","vars","consts","template","children","dependencies","styles","changeDetection","DynamicClassMetadata","propertyName","target","DynamicItemExtensionBase","metadata","instance"],"sourceRoot":""}