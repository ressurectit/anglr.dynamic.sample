{"version":3,"file":"797.client.chunk.140d7fe22f9a728f1f7e.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.model.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/metadata/syncValues.relationsMetadata.ts"],"sourcesContent":["import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()',\n        '[disabled]': 'disabled',\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n\n    /**\n     * Indication whether is number input disabled\n     */\n    public disabled: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setDisabledState?(isDisabled: boolean): void\n    {\n        this.disabled = isDisabled;\n    }\n}\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\n\n/**\n * Rest relations options model\n */\nexport class SyncValuesRelationsOptionsModel implements SyncValuesRelationsOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public triggerSync: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public idleTimeout: number|undefined|null = 0;\n\n    /**\n     * @inheritdoc\n     */\n    public syncProperties: string[]|null|undefined;\n    \n    //######################### constructor #########################\n    constructor(value: SyncValuesRelationsOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\n/**\n * Component used for displaying configuration of sync property\n */\n@Component(\n{\n    selector: 'configure-sync-property',\n    templateUrl: 'configureSyncProperty.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureSyncPropertySAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is bound sync property name\n     */\n    protected control: FormControl<string> = new FormControl();\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) data: string,)\n    {\n        this.control.setValue(data);\n    }\n}",null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup, NumberInputModule} from '@anglr/common/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\nimport {SyncValuesRelationsOptionsModel} from './syncValuesNode.model';\nimport {ConfigureSyncPropertySAComponent} from '../misc/components';\n\n/**\n * Sync values node component for negation\n */\n@Component(\n{\n    selector: 'sync-values-node',\n    templateUrl: 'syncValuesNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NumberInputModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncValuesNodeSAComponent extends RelationsNodeBase<SyncValuesRelationsOptions> implements RelationsNode<SyncValuesRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form that is being used\n     */\n    protected form: FormGroup<FormModelGroup<SyncValuesRelationsOptions>>;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n        super(changeDetector, element);\n\n        this.form = formModelBuilder.build<SyncValuesRelationsOptions>(new SyncValuesRelationsOptionsModel(null));\n        this.form.valueChanges.subscribe(value =>\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                extend(this.metadata.relationsOptions, value);\n\n                this.history.getNewState();\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new property\n     */\n    protected async addProperty(): Promise<void>\n    {\n        await this.configureSyncProperty(this.metadata?.relationsOptions?.syncProperties?.length ?? 0);\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Removes property\n     * @param index - Index of property to be removed\n     */\n    protected removeProperty(index: number): void\n    {\n        if(!this.metadata?.relationsOptions?.syncProperties)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.syncProperties.splice(index, 1);\n        this.history.getNewState();\n    }\n\n    /**\n     * Configures sync property\n     * @param index - Index of sync property to be configured\n     */\n    protected async configureSyncProperty(index: number): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<ConfigureSyncPropertySAComponent, string, string|undefined|null>(ConfigureSyncPropertySAComponent,\n        {\n            title: 'configure sync property',\n            width: '60vw',\n            data: this.metadata?.relationsOptions?.syncProperties?.[index] ?? ''\n        }).afterClosed());\n\n        if(isPresent(result) && this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.syncProperties ??= [];\n            this.metadata.relationsOptions.syncProperties[index] = result;\n            this.history.getNewState();\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        this.form.patchValue(this.metadata.relationsOptions);\n    }\n}",null,"import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {SyncValuesNodeSAComponent} from '../node/syncValuesNode.component';\n\n/**\n * Sync values relations metadata\n */\nexport class SyncValuesRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Sync values',\n        description: 'Sync values, allowing triggered changes run at once',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = SyncValuesNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","constructor","_renderer","_elementRef","onChange","_","onTouched","disabled","writeValue","value","this","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","setDisabledState","isDisabled","Validators","static","control","isNaN","max","isPresent","min","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","number","SyncValuesRelationsOptionsModel","triggerSync","idleTimeout","mapValuesToThis","ConfigureSyncPropertySAComponent","data","FormControl","setValue","TITLED_DIALOG_DATA","ReactiveFormsModule","MatDialogModule","SyncValuesNodeSAComponent","RelationsNodeBase","changeDetector","element","dialog","formModelBuilder","super","form","build","valueChanges","subscribe","metadata","relationsOptions","extend","history","getNewState","addProperty","configureSyncProperty","syncProperties","length","detectChanges","removeProperty","index","splice","result","lastValueFrom","open","title","width","afterClosed","metadataSet","patchValue","FormModelBuilder","CommonModule","NumberInputModule","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","SyncValuesRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze"],"sourceRoot":""}