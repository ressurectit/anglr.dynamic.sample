{"version":3,"file":"7171.client.chunk.e54fd3f246095fac73b5.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../form/src/services/formComponentControlBuilder/formComponentControlBuilder.service.ts","webpack://ng-universal-demo/./app/dynamicItems/formBlock/formBlock.metadata.ts","webpack://ng-universal-demo/./app/dynamicItems/formBlock/formBlock.component.ts","webpack://ng-universal-demo/./app/dynamicItems/formBlock/formBlock.component.html","webpack://ng-universal-demo/./app/dynamicItems/formBlock/type.ts","webpack://ng-universal-demo/../../../form/src/misc/tokens.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorItem, LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\n\n@Injectable()\nexport class FormComponentControlBuilder\n{\n    //######################### constructor #########################\n\n    constructor(private _iteratorsSvc: LayoutComponentsIteratorService)\n    {}\n\n    //######################### public methods #########################\n\n    /**\n     * Build form group from layout metadata\n     * @param layoutMetadata \n     * @returns \n     */\n    public async build(layoutMetadata: LayoutComponentMetadata): Promise<FormGroup>\n    {\n        const formGroup = new FormGroup({});\n        let activeGroup: FormGroup|null = formGroup;\n        for await (const iteratorItem of this._iteratorsSvc.getIteratorFor(layoutMetadata))\n        {\n            const controlName = this._getControlName(iteratorItem.metadata);\n            if (controlName)\n            {\n                const control = this._getControlForMetadata(iteratorItem.metadata);\n                this._getActiveGroup(iteratorItem.parent, activeGroup).addControl(controlName, control);\n\n                if (control instanceof FormGroup)\n                {\n                    activeGroup = control;\n                }\n            }\n        }\n        return formGroup;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Get active form group for specific layout component\n     * @param parentIterator parent layout component iterator item\n     * @param group active form group\n     * @returns \n     */\n    private _getActiveGroup(parentIterator: LayoutComponentsIteratorItem|null|undefined, group: FormGroup): FormGroup\n    {\n        //Already on root FormGroup\n        if (!group.parent ||\n            !parentIterator)\n        {\n            return group;\n        }\n\n        const parentControlName = this._getControlName(parentIterator.metadata);\n\n        //Parent component is of Form Component control type\n        if (parentControlName)\n        {\n            //Current group is parent component\n            if (group.parent.get(parentControlName))\n            {\n                return group;\n            }\n            //We have to find parent form group\n            else\n            {\n                return this._getActiveGroup(parentIterator, group.parent as FormGroup);\n            }\n        } \n        else if (!parentIterator.parent)\n        {\n            return this._getActiveGroup(parentIterator.parent, group.root as FormGroup);\n        }\n\n        //Parent component is not of Form Component control type\n        return this._getActiveGroup(parentIterator.parent, group);\n    }\n\n    /**\n     * Gets component control name\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlName(metadata: LayoutComponentMetadata)\n    {\n        if (!metadata)\n        {\n            return null;\n        }\n\n        return (<FormComponentOptions>metadata.options)?.controlName;\n    }\n\n    /**\n     * Gets specific control for layout component\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlForMetadata(metadata: LayoutComponentMetadata): AbstractControl\n    {\n        switch ((<FormComponentOptions>metadata?.options)?.controlType)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {FormBlockComponentOptions} from './formBlock.options';\n\n/**\n * Form block layout metadata loader\n */\nexport const FormBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormBlockComponentOptions>> = async () => new (await import('./metadata/formBlock.layoutMetadata')).FormBlockLayoutEditorMetadata();\n\n/**\n * Form block relations metadata loader\n */\nexport const FormBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/formBlock.relationsMetadata')).FormBlockRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, inject, Injector, ValueProvider, SimpleChanges} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadata, LayoutEditorMetadataExtractor} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {FormComponentControlBuilder, FORM_COMPONENT_CONTROL} from '@anglr/dynamic/form';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {generateId, nameof} from '@jscrpt/common';\n\nimport {FormBlockComponentOptions} from './formBlock.options';\nimport {FormBlockLayoutMetadataLoader, FormBlockRelationsMetadataLoader} from './formBlock.metadata';\n\n/**\n * Component used for displaying form block\n */\n@Component(\n{\n    selector: 'form-block',\n    templateUrl: 'formBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        FormComponentControlBuilder,\n        LayoutComponentsIteratorService,\n        LayoutEditorMetadataExtractor,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(FormBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(FormBlockLayoutMetadataLoader)\nexport class FormBlockSAComponent<TValue = any> extends LayoutComponentBase<FormBlockComponentOptions> implements LayoutComponent<FormBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Root form group builder\n     */\n    protected formComponentControlBuilder: FormComponentControlBuilder = inject(FormComponentControlBuilder);\n\n    /**\n     * Angular injector for component\n     */\n    protected formInjector: Injector = inject(Injector);\n\n    /**\n     * Instance of root form group\n     */\n    protected formGroup: FormGroup|undefined|null;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Instance of current form value\n     */\n    @DynamicOutput()\n    public value: TValue|undefined|null;\n\n    /**\n     * Occurs when form is submitted\n     */\n    @DynamicOutput()\n    public submit: VoidObject = {};\n\n    //######################### protected methdos - template bindings #########################\n\n    /**\n     * Triggers submit event of form block\n     * @param event - Event that occured\n     */\n    protected submitForm(event: SubmitEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.submit = {};\n    }\n\n    //######################### protected methods - overrides #########################\n    \n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        this.formGroup = await this.formComponentControlBuilder.build(<LayoutComponentMetadata<FormBlockComponentOptions>>\n        {\n            id: generateId(10),\n            name: 'formBlock',\n            package: 'sample-components',\n            options: this.options,\n        });\n\n        this.formGroup.valueChanges.subscribe(value => this.value = value);\n        this.value = this.formGroup.value;\n\n        this.formInjector = Injector.create(\n        {\n            parent: this.injector,\n            providers:\n            [\n                <ValueProvider>\n                {\n                    provide: FORM_COMPONENT_CONTROL,\n                    useValue: this.formGroup,\n                }\n            ]\n        });\n\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): void\n    {\n        if(nameof<FormBlockSAComponent>('value') in changes)\n        {\n            this.formGroup?.patchValue(this.value ?? {}, {emitEvent: false});\n        }\n    }\n}","<form (submit)=\"submitForm($event)\">\n    <ng-template [layoutComponentRenderer]=\"options?.content\" [layoutComponentRendererInjector]=\"formInjector\"></ng-template>\n</form>","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {FormBlockSAComponent} from './formBlock.component';\n\nexport default FormBlockSAComponent;\n\n\nexport const extensions = [RelationsRegistrationExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentControlBuilder","constructor","_iteratorsSvc","build","layoutMetadata","formGroup","FormGroup","activeGroup","getIteratorFor","iteratorItem","controlName","_getControlName","metadata","control","_getControlForMetadata","_getActiveGroup","parent","addControl","parentIterator","group","parentControlName","this","get","root","options","controlType","FormComponentControlType","FormArray","FormControl","i1","FormBlockLayoutMetadataLoader","FormBlockLayoutEditorMetadata","FormBlockRelationsMetadataLoader","FormBlockRelationsEditorMetadata","FormBlockSAComponent","LayoutComponentBase","formComponentControlBuilder","inject","formInjector","Injector","submit","submitForm","event","preventDefault","stopPropagation","onInit","id","generateId","name","package","valueChanges","subscribe","value","injector","providers","provide","FORM_COMPONENT_CONTROL","useValue","changeDetector","detectChanges","onChanges","changes","nameof","patchValue","emitEvent","t","selectors","standalone","features","LayoutComponentsIteratorService","LayoutEditorMetadataExtractor","i0","decls","vars","consts","template","ctx","LayoutComponentRendererSADirective","styles","changeDetection","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","InjectionToken","metadataLoader","DynamicClassMetadata","componentElement","logger","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","invalidateVisuals","_changes","LOGGER","target","propertyKey","prop","Object","defineProperty","Subject","set","next","DynamicItemExtensionBase","relationsProcessor","componentManager","instance","RelationsProcessor","RelationsComponentManager","registerComponent","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}