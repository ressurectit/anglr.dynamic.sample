{"version":3,"file":"8757.client.chunk.4ad3f7e2a7dbfe4f359e.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../../../form/src/dynamicItems/select/select.metadata.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/form/src/dynamicItems/select/select.component.html","webpack://ng-universal-demo/../../../form/src/dynamicItems/select/select.component.ts","webpack://ng-universal-demo/../../../form/src/dynamicItems/select/type.ts","webpack://ng-universal-demo/../../../form/src/misc/tokens.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {SelectComponentOptions} from './select.options';\n\n/**\n * Select layout metadata loader\n */\nexport const SelectLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<SelectComponentOptions>> = async () => new (await import('./metadata/select.layoutMetadata')).SelectLayoutEditorMetadata();\n\n/**\n * Select relations metadata loader\n */\nexport const SelectRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/select.relationsMetadata')).SelectRelationsEditorMetadata();",null,"import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {SelectLayoutMetadataLoader, SelectRelationsMetadataLoader} from './select.metadata';\nimport {SelectComponentOptions} from './select.options';\n\n/**\n * Component used for displaying text field\n */\n@Component(\n{\n    selector: 'form-select',\n    templateUrl: 'select.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n        CommonModule,\n    ]\n})\n@RelationsEditorMetadata(SelectRelationsMetadataLoader)\n@LayoutEditorMetadata(SelectLayoutMetadataLoader)\nexport class SelectSAComponent extends FormComponentBase<SelectComponentOptions> implements FormComponent<SelectComponentOptions>\n{\n    //######################### public properties #########################\n\n    protected _values: any[] = [\n        {\n            code: 'foo',\n            value: 'foo value',\n        },\n        {\n            code: 'bar',\n            value: 'bar value',\n        }\n    ];\n\n    //######################### poublic properties - inputs and outputs #########################\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set values(value: any[])\n    {\n        this._values = value;\n    }\n    public get values(): any[]\n    {\n        return this._values;\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {SelectSAComponent} from './select.component';\n\n\nexport default SelectSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","FormComponentBase","LayoutComponentBase","_changeDetector","_element","_injector","_parentControl","super","control","oldValue","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","name","getControlForType","i0","FORM_COMPONENT_CONTROL","__decorate","DynamicOutput","SelectLayoutMetadataLoader","SelectLayoutEditorMetadata","SelectRelationsMetadataLoader","SelectRelationsEditorMetadata","SelectSAComponent","_values","code","values","FormPipesModule","i1","CastPipesModule","i2","ReactiveFormsModule","i3","CommonModule","i4","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","InjectionToken","metadataLoader","DynamicClassMetadata","changeDetector","componentElement","injector","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","target","propertyKey","prop","Object","defineProperty","get","Subject","set","next","relationsProcessor","componentManager","metadata","instance","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}