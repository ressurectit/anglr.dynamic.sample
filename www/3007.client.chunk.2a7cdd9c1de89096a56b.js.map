{"version":3,"file":"3007.client.chunk.2a7cdd9c1de89096a56b.js","mappings":"ofAcM,MAAgBA,EAwBlBC,YAAsBC,EACAC,GADA,KAAAD,gBAAAA,EACA,KAAAC,WAAAA,EAlBZ,KAAAC,cAAwB,EAc3B,KAAAC,mBAA2F,IAMjG,CAOYC,WAAQ,iCAEd,EAAKF,eAKR,EAAKA,cAAe,QAEd,EAAKG,cATM,KAUpB,CAOYC,aAAU,uCAEb,EAAKF,UAFQ,KAGtB,CAKMG,oBAEHC,KAAKR,gBAAgBS,eACxB,CAOSJ,cAET,E,iCAvEiBP,GAAAA,EAAAA,EAAqBY,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,G,oBAArBZ,E,0aCShB,MAAOa,UAAkDb,EAAAA,EAG3DC,YAAYa,EACAC,EACUC,GAElBC,MAAMH,EAAgBC,GAFJ,KAAAC,OAAAA,CAGrB,CAOeE,iBAAc,I,EAAA,c,EAAA,YAE1B,MAAMC,QAAeC,EAAAA,EAAAA,GAAc,EAAKJ,OAAOK,KAAgEC,EAAAA,EAC/G,CACIC,MAAO,yBACPC,MAAO,OACPC,OAAQ,OACRC,KAAM,EAAKC,MAAMC,SAASC,QAAQC,QACnCC,eAEH,IAAGC,EAAAA,EAAAA,IAAUb,GACb,CACI,MAAMc,EAAU,EAAKN,MAAMC,SAASC,QAEjCI,aAAmBC,EAAAA,IAElBD,EAAQE,SAAShB,EAExB,CAlByB,E,gLAmB7B,E,iCAlCQN,GAAAA,EAAAA,EAAyCD,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,G,oBAAzCC,E,gPCvBb,c,IAA4F,2BAAS,kBAAT,I,KACxF,U,IAAM,0B,8DCMJ,MAAOuB,EAUTnC,YAAY6B,GAHL,KAAAD,QAAiC,GAKpCQ,EAAAA,GAAAA,KAAqB3B,KAArB2B,CAA2BP,EAC9B,ECXC,MAAOQ,EA4BTrC,cArBO,KAAAsC,SACP,CACIC,KAAM,kBACNC,YAAa,uDACbC,MAAO,QACPC,gBACA,CACItC,mBACA,CACI,CACIuC,UAAWR,EACXS,mBACA,CACIhC,OAUhBiC,OAAOC,OAAOrC,KACjB,E","sources":["webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.html","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.model.ts","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.layoutMetadata.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorMetadataExtractor, PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {RichTextBlockEditorDialogSAComponent} from '../richTextBlockEditorDialog/richTextBlockEditorDialog.component';\nimport {RichTextBlockComponentOptions} from '../../../richTextBlock.options';\n\n/**\n * Component used for displaying rich text block properties control\n */\n@Component(\n{\n    selector: 'rich-text-block-properties-control',\n    templateUrl: 'richTextBlockPropertiesControl.component.html',\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockPropertiesControlSAComponent extends PropertiesControlBase<RichTextBlockComponentOptions> implements PropertiesControl<RichTextBlockComponentOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text block editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.form?.controls.content.value\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.controls.content;\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n",null,"import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\n\n/**\n * Rich text block model for properties editor\n */\nexport class RichTextBlockModel implements RichTextBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: RichTextBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockPropertiesControlSAComponent} from '../misc/components';\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\nimport {RichTextBlockModel} from './richTextBlock.model';\n\n/**\n * Rich text block layout metadata\n */\nexport class RichTextBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RichTextBlockComponentOptions> =\n    {\n        name: 'Rich text block',\n        description: 'WYSIWYG editor allowing formatting of multiline text',\n        group: 'Texts',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: RichTextBlockModel,\n                    propertiesControls: \n                    [\n                        RichTextBlockPropertiesControlSAComponent,\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["PropertiesControlBase","constructor","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","_initialize","initialize","invalidateVisuals","this","detectChanges","i0","RichTextBlockPropertiesControlSAComponent","changeDetector","metadataExtractor","dialog","super","showCodeEditor","result","lastValueFrom","open","RichTextBlockEditorDialogSAComponent","title","width","height","data","form","controls","content","value","afterClosed","isPresent","control","FormControl","setValue","RichTextBlockModel","mapValuesToThis","RichTextBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","modelType","propertiesControls","Object","freeze"],"sourceRoot":""}