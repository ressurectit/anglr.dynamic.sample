{"version":3,"file":"688.client.chunk.cc9105671ad3e08137b7.js","mappings":"6UAQO,MAAMA,EAA2BC,GAAwC,IAAIC,EAAAA,EAAc,aACA,KADlB,e,EAAA,G,EAEkB,UAAMC,GAEF,MAAMC,EAAMD,EAAOE,YAAYD,IAE/B,IAAIA,EAEA,MAAO,GAGX,MAAME,QAAeC,EAAAA,GAAAA,WAAAA,sBACfC,QAAeF,EAAOF,GAG5B,aAFqBI,EAAOC,cAAcL,EAAIM,aAEhCC,YAAY,GAAGC,IAChC,E,+KAhBnB,sDAiBkBX,G,kUCdlGM,EAAAA,GAAAA,WAAAA,mBAAAA,YCXA,kPDW6D,wDAkBvD,MAAOM,UAAqCC,EAAAA,EAG9CC,YAAYC,EACAC,EACUC,GAElBC,MAAMH,EAAgBC,GAFJ,KAAAC,OAAAA,CAGrB,CAOeE,iBAAc,I,EAAA,c,EAAA,Y,MAE1B,MAAMC,QAAeC,EAAAA,EAAAA,GAAc,EAAKJ,OAAOK,KAA8EC,EAAAA,EAC7H,CACIC,MAAO,cACPC,MAAO,OACPC,OAAQ,OACRC,KACA,CACIC,QAAS,EAAKC,UAAUC,cAAcC,SAASH,SAAW,GAC1DI,cAAejC,EAC/B,sOAaWkC,eAEC,EAAKJ,UAAUK,kBAAqBd,GAAW,EAAKS,SAASC,eAKjE,EAAKD,SAASK,iBAAiBC,KAAOf,EAAOe,MAC7C,IAAKN,SAASC,cAAaC,UAAOK,EAAPL,QAAY,CAACH,QAAS,KACjD,EAAKC,SAASC,aAAaC,QAAQH,QAAUR,EAAOQ,QACpD,EAAKS,QAAQC,cAlCa,E,gLAmC7B,CAOkBC,c,MAEZC,KAAKX,UAAUK,oBAEd,EAAAM,KAAKX,SAASK,kBAAiBO,KAAEL,EAAFK,IAAOC,EAAAA,EAAAA,IAAW,KAExD,E,iCA/DQ9B,GAAAA,EAAAA,EAA4B+B,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,G,oBAA5B/B,E,qdE7Bb,6B,KAEA,U,CAAA,U,CAAA,U,CAAA,W,KAIgB,2B,KACA,S,IAAK,U,gBAIb,U,CAAA,U,CAAA,U,IAEa,uB,YACL,6B,gBAKZ,e,IAA8D,2BAAS,kBAAT,I,KAC1D,W,IAAM,W,sBApBS,W,CAAA,mC,IAMc,G,IAAA,mC,CAAA,wB,CAAA,Y,IAQC,G,IAAA,mC,CAAA,wB,CAAA,Y,gBFS9BgC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,G,oCGjBF,MAAOC,EAoBTjC,cAbO,KAAAkC,SACP,CACIC,KAAM,iBACNC,YAAa,sCACbC,MAAO,QAMJ,KAAAC,eAAsCxC,EAKzCyC,OAAOC,OAAOd,KACjB,E","sources":["webpack://ng-universal-demo/../../../src/modules/codeEditor/misc/types/languageModels/typescriptLanguageModel.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/transformData/node/transformDataNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/transformData/transformData.interface.d.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/transformData/node/transformDataNode.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/transformData/metadata/transformData.relationsMetadata.ts"],"sourcesContent":["import {languages} from 'monaco-editor';\n\nimport {LanguageModel} from './languageModel';\n\n/**\n * Typescript language model for code editor\n * @param initialValue - Initial value to be used as initial code\n */\nexport const TypescriptLanguageModel = (initialValue: string): LanguageModel => new LanguageModel('typescript',\n                                                                                                  'ts',\n                                                                                                  async editor =>\n                                                                                                  {\n                                                                                                      const uri = editor.getModel()?.uri;\n                                                                                                  \n                                                                                                      if(!uri)\n                                                                                                      {\n                                                                                                          return '';\n                                                                                                      }\n                                                                                                  \n                                                                                                      const worker = await languages.typescript.getTypeScriptWorker();\n                                                                                                      const client = await worker(uri);\n                                                                                                      const result = await client.getEmitOutput(uri.toString());\n                                                                                                  \n                                                                                                      return result.outputFiles[0].text;\n                                                                                                  },\n                                                                                                  initialValue);\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, TypescriptLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {generateId} from '@jscrpt/common';\nimport typings from '!!raw-loader?esModule!@anglr/dynamic/typings/transformData';\nimport {languages} from 'monaco-editor';\nimport {lastValueFrom} from 'rxjs';\n\nimport {TransformDataRelationsEditorOptions, TransformDataRelationsOptions} from '../transformData.options';\n\nlanguages.typescript.typescriptDefaults.addExtraLib(typings, 'file:///node_modules/@types/transformData/index.d.ts');\n\n/**\n * Relations node component for transform data\n */\n@Component(\n{\n    selector: 'transform-data-node',\n    templateUrl: 'transformDataNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TransformDataNodeSAComponent extends RelationsNodeBase<TransformDataRelationsOptions, TransformDataRelationsEditorOptions> implements RelationsNode<TransformDataRelationsOptions, TransformDataRelationsEditorOptions>\n{\n//######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.nodeMetadata?.options?.content ?? '',\n                languageModel: TypescriptLanguageModel(\n`import {TransformData} from 'transformData';\n\n/**\n * Transformer function that performs transformation\n */\nconst transformer: TransformData<any, any> = data =>\n{\n    return data;\n};\n \nexport default transformer;\n`),\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions || !result || !this.metadata.nodeMetadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.code = result.code;\n        this.metadata.nodeMetadata.options ??= {content: ''};\n        this.metadata.nodeMetadata.options.content = result.content;\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.id ??= generateId(12);\n        }\n    }\n}","export default \"/**\\n * Transforms data to another form of data\\n * @param data - Data to be transformed\\n */\\nexport declare type TransformData<TData = any, TResult = any> = (data: TData) => TResult;\\n//# sourceMappingURL=transformData.interface.d.ts.map\";",null,"import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {TransformDataNodeSAComponent} from '../node/transformDataNode.component';\n\n/**\n * Transform data relations metadata\n */\nexport class TransformDataRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Transform data',\n        description: 'Code that allows data tranformation',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = TransformDataNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["TypescriptLanguageModel","initialValue","LanguageModel","editor","uri","getModel","worker","languages","client","getEmitOutput","toString","outputFiles","text","TransformDataNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","metadata","nodeMetadata","options","languageModel","afterClosed","relationsOptions","code","_a","history","getNewState","metadataSet","this","id","generateId","i0","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","TransformDataRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze"],"sourceRoot":""}