{"version":3,"file":"6519.client.chunk.f3635f6c3ec39151c2f2.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/cdk/accordion/accordion-module.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-module.ts","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/expansionPanel/expansionPanel.metadata.ts","webpack://ng-universal-demo/../../../src/cdk/accordion/accordion.ts","webpack://ng-universal-demo/../../../src/cdk/accordion/accordion-item.ts","webpack://ng-universal-demo/../../../src/material/expansion/accordion-base.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-animations.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-base.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-content.ts","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel.ts","webpack://ng-universal-demo/../src/material/expansion/expansion-panel.html","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel.html","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-header.ts","webpack://ng-universal-demo/../src/material/expansion/expansion-panel-header.html","webpack://ng-universal-demo/../../../src/material/expansion/expansion-panel-header.html","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/expansionPanel/expansionPanel.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/material-components/src/dynamicItems/expansionPanel/expansionPanel.component.html","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/expansionPanel/type.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../src/cdk/collections/unique-selection-dispatcher.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialExpansionPanelComponentOptions} from './expansionPanel.options';\n\n/**\n * Material expansion panel layout metadata loader\n */\nexport const MaterialExpansionPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialExpansionPanelComponentOptions>> = async () => new (await import('./metadata/expansionPanel.layoutMetadata')).MaterialExpansionPanelLayoutEditorMetadata();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean {\n    return this._multi;\n  }\n  set multi(multi: BooleanInput) {\n    this._multi = coerceBooleanProperty(multi);\n  }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: BooleanInput) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled: BooleanInput) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Inject, Optional} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  constructor(\n    public _template: TemplateRef<any>,\n    @Inject(MAT_EXPANSION_PANEL) @Optional() public _expansionPanel?: MatExpansionPanelBase,\n  ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n",null,"<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [matExpansionAnimations.indicatorRotate],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader\n  extends _MatExpansionPanelHeaderMixinBase\n  implements AfterViewInit, OnDestroy, FocusableOption, HasTabIndex\n{\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super();\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n",null,"<span class=\"mat-content\" [class.mat-content-hide-toggle]=\"!_showToggle()\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"mat-expansion-indicator\"></span>\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {MaterialExpansionPanelComponentOptions} from './expansionPanel.options';\nimport {MaterialExpansionPanelLayoutMetadataLoader} from './expansionPanel.metadata';\n\n/**\n * Component used for displaying toggle panel layout\n */\n@Component(\n{\n    selector: 'material-expansion-panel',\n    templateUrl: 'expansionPanel.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatExpansionModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<MaterialExpansionPanelComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(MaterialExpansionPanelLayoutMetadataLoader)\nexport class MaterialExpansionPanelSAComponent extends LayoutComponentBase<MaterialExpansionPanelComponentOptions> implements LayoutComponent<MaterialExpansionPanelComponentOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether panel is expanded\n     */\n    @Input()\n    public expanded: boolean = true;\n\n    /**\n     * Expansion panel title\n     */\n    @Input()\n    public title: string|null|undefined;\n\n    /**\n     * Expansion panel description\n     */\n    @Input()\n    public description: string|null|undefined;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this.expanded = this.options?.expanded ?? false;\n        this.title = this.options?.title;\n        this.description = this.options?.description;\n    }\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialExpansionPanelSAComponent} from './expansionPanel.component';\n\nexport default MaterialExpansionPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","element","this","componentElement","extensionsOptions","options","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","CdkAccordionModule","MatExpansionModule","CommonModule","MatCommonModule","PortalModule","MaterialExpansionPanelLayoutMetadataLoader","MaterialExpansionPanelLayoutEditorMetadata","nextId","CDK_ACCORDION","InjectionToken","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","id","_multi","multi","coerceBooleanProperty","openAll","next","closeAll","complete","provide","useExisting","CdkAccordionItem","expanded","_expanded","expandedChange","emit","opened","accordionId","accordion","_expansionDispatcher","notify","closed","_changeDetectorRef","markForCheck","disabled","_disabled","_openCloseAllSubscription","Subscription","EventEmitter","_removeUniqueSelectionListener","listen","_subscribeToOpenCloseAllActions","unsubscribe","toggle","close","open","subscribe","useValue","undefined","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","hideToggle","_hideToggle","value","togglePosition","_togglePosition","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","_hasSpacing","displayMode","_getExpandedState","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","TemplatePortal","_containsFocus","_body","focusedElement","activeElement","bodyElement","contains","DOCUMENT","ANIMATION_MODULE_TYPE","i2","MatExpansionPanelActionRow","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","EMPTY","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i3","MatExpansionPanelDescription","MatExpansionPanelTitle","MaterialExpansionPanelSAComponent","title","description","LayoutComponentRendererSADirective","DescendantsGetter","children","metadata","instance","UniqueSelectionDispatcher","_listeners","name","listener","push","registered"],"sourceRoot":""}