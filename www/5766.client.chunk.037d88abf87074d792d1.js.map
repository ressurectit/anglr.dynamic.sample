{"version":3,"file":"5766.client.chunk.037d88abf87074d792d1.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../src/material/dialog/dialog-content-directives.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/modules/codeEditor/misc/types/languageModels/htmlLanguageModel.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.model.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.layoutMetadata.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.js"],"sourcesContent":[null,"import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","import { LanguageModel } from './languageModel';\n/**\n * Html language model for code editor\n */\n\nexport const HtmlLanguageModel = new LanguageModel('html', 'html', editor => {\n  return editor.getModel()?.getValue() ?? '';\n});","import { mapValuesToThis } from '@jscrpt/common'; //TODO: check all models for \"public\" \n\n/**\n * Html block model for properties editor\n */\n\nexport class HtmlBlockModel {\n  //######################### constructor #########################\n  constructor(value) {\n    //######################### public properties #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    this.content = null;\n    mapValuesToThis.bind(this)(value);\n  }\n\n}","import { ComponentStylingModel, ComponentStylingPropertiesControlComponent } from '@anglr/dynamic/layout-editor';\nimport { codePropertiesControlFor } from '@anglr/dynamic/layout-editor';\nimport { HtmlLanguageModel } from '@anglr/dynamic';\nimport { HtmlBlockModel } from './htmlBlock.model';\n/**\n * Html block layout metadata\n */\n\nexport class HtmlBlockLayoutEditorMetadata {\n  //######################### constructor #########################\n  constructor() {\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    this.metaInfo = {\n      name: 'Html block',\n      description: 'Html block - displays html or string',\n      group: 'Data',\n      optionsMetadata: {\n        propertiesMetadata: [{\n          modelType: ComponentStylingModel,\n          propertiesControls: [ComponentStylingPropertiesControlComponent]\n        }, {\n          modelType: HtmlBlockModel,\n          propertiesControls: [codePropertiesControlFor('content', HtmlLanguageModel)]\n        }]\n      },\n      defaultOptions: {\n        content: '<div>This is your <strong>HTML</strong> block</div>'\n      }\n    };\n    Object.freeze(this);\n  }\n\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { TitledDialogService } from '@anglr/common/material';\nimport { CodeEditorDialogComponent } from '@anglr/dynamic';\nimport { isBlank, isPresent } from '@jscrpt/common';\nimport { lastValueFrom } from 'rxjs';\nimport { PropertiesControlBase } from '../../modules';\nimport { LayoutEditorMetadataExtractor } from '../../services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services\";\nimport * as i2 from \"@anglr/common/material\";\n/**\n * Base component used for displaying code properties control\n */\n\nexport class BaseCodePropertiesControlSAComponent extends PropertiesControlBase {\n  //######################### constructor #########################\n  constructor(changeDetector, metadataExtractor, dialog) {\n    super(changeDetector, metadataExtractor);\n    this.dialog = dialog;\n  } //######################### protected methods - template bindings #########################\n\n  /**\n   * Shows code editor\n   */\n\n\n  showCodeEditor() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (isBlank(_this.property) || !_this.languageModel) {\n        return;\n      }\n\n      const result = yield lastValueFrom(_this.dialog.open(CodeEditorDialogComponent, {\n        title: 'Code editor',\n        width: '75vw',\n        height: '75vh',\n        data: {\n          content: _this.form?.get(_this.property)?.value ?? '',\n          languageModel: _this.languageModel\n        }\n      }).afterClosed());\n\n      if (isPresent(result)) {\n        const control = _this.form?.get(_this.property);\n\n        if (control instanceof FormControl) {\n          control.setValue(result.content);\n        }\n      }\n    })();\n  }\n\n}\n\nBaseCodePropertiesControlSAComponent.ɵfac = function BaseCodePropertiesControlSAComponent_Factory(t) {\n  return new (t || BaseCodePropertiesControlSAComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.LayoutEditorMetadataExtractor), i0.ɵɵdirectiveInject(i2.TitledDialogService));\n};\n\nBaseCodePropertiesControlSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseCodePropertiesControlSAComponent,\n  selectors: [[\"base-code-properties-control\"]],\n  inputs: {\n    property: \"property\",\n    languageModel: \"languageModel\"\n  },\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 3,\n  vars: 1,\n  consts: [[\"type\", \"button\", \"type\", \"button\", 1, \"dynamic-btn\", \"dynamic-btn-primary\", \"dynamic-margin-vertical-small\", 3, \"click\"]],\n  template: function BaseCodePropertiesControlSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function BaseCodePropertiesControlSAComponent_Template_button_click_0_listener() {\n        return ctx.showCodeEditor();\n      });\n      i0.ɵɵelementStart(1, \"span\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Edit \", ctx.property, \"\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseCodePropertiesControlSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-code-properties-control',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<button type=\\\"button\\\" type=\\\"button\\\" class=\\\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\\\" (click)=\\\"showCodeEditor()\\\">\\n    <span>Edit {{property}}</span>\\n</button>\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.LayoutEditorMetadataExtractor\n    }, {\n      type: i2.TitledDialogService\n    }];\n  }, {\n    property: [{\n      type: Input\n    }],\n    languageModel: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\n\n\nexport function codePropertiesControlFor(property, languageModel) {\n  class CodePropertiesControl extends BaseCodePropertiesControlSAComponent {\n    constructor() {\n      super(...arguments);\n      /**\n       * @inheritdoc\n       */\n\n      this.property = property;\n      /**\n       * @inheritdoc\n       */\n\n      this.languageModel = languageModel;\n    }\n\n  }\n\n  CodePropertiesControl.ɵfac = /* @__PURE__ */function () {\n    let ɵCodePropertiesControl_BaseFactory;\n    return function CodePropertiesControl_Factory(t) {\n      return (ɵCodePropertiesControl_BaseFactory || (ɵCodePropertiesControl_BaseFactory = i0.ɵɵgetInheritedFactory(CodePropertiesControl)))(t || CodePropertiesControl);\n    };\n  }();\n\n  CodePropertiesControl.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CodePropertiesControl,\n    selectors: [[\"code-properties-control\"]],\n    inputs: {\n      property: \"property\",\n      languageModel: \"languageModel\"\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[\"type\", \"button\", \"type\", \"button\", 1, \"dynamic-btn\", \"dynamic-btn-primary\", \"dynamic-margin-vertical-small\", 3, \"click\"]],\n    template: function CodePropertiesControl_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function CodePropertiesControl_Template_button_click_0_listener() {\n          return ctx.showCodeEditor();\n        });\n        i0.ɵɵelementStart(1, \"span\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Edit \", ctx.property, \"\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodePropertiesControl, [{\n      type: Component,\n      args: [{\n        selector: 'code-properties-control',\n        standalone: true,\n        imports: [],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        template: \"<button type=\\\"button\\\" type=\\\"button\\\" class=\\\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\\\" (click)=\\\"showCodeEditor()\\\">\\n    <span>Edit {{property}}</span>\\n</button>\"\n      }]\n    }], null, {\n      property: [{\n        type: Input\n      }],\n      languageModel: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return CodePropertiesControl;\n}"],"names":["lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","value","error","complete","defaultValue","EmptyError","AsFormControlPipe","constructor","_logger","transform","_valueHash","isBlank","FormControl","this","warn","LOGGER","dialogElementUid","MatDialogClose","dialogRef","_elementRef","_dialog","type","ngOnInit","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","i1","MatDialogTitle","_dialogRef","id","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog","HtmlLanguageModel","editor","getModel","getValue","HtmlBlockModel","content","HtmlBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","defaultOptions","Object","freeze","asyncGeneratorStep","gen","_next","_throw","key","arg","info","done","BaseCodePropertiesControlSAComponent","changeDetector","metadataExtractor","super","showCodeEditor","fn","_this","property","languageModel","result","open","title","width","height","data","form","get","afterClosed","control","setValue","self","args","arguments","apply","err","undefined","codePropertiesControlFor","CodePropertiesControl","t","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","encapsulation","changeDetection"],"sourceRoot":""}