{"version":3,"file":"977.client.chunk.13755cea81aa213e040f.js","mappings":"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","sources":["webpack://ng-universal-demo/./content/l10n/ lazy ^\\.\\/.*\\.json$ namespace object","webpack://ng-universal-demo/./app/components/dynamicContent/dynamicContent.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.html","webpack://ng-universal-demo/./app/hacks.ts","webpack://ng-universal-demo/./app/boot/app.component.animations.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://ng-universal-demo/./app/boot/app.component.html","webpack://ng-universal-demo/./app/boot/app.component.ts","webpack://ng-universal-demo/./app/pages/accessDenied/accessDenied.route.ts","webpack://ng-universal-demo/./app/boot/app.component.routes.ts","webpack://ng-universal-demo/./app/pages/notFound/notFound.route.ts","webpack://ng-universal-demo/./app/services/globalization/globalization.service.ts","webpack://ng-universal-demo/./app/services/api/restLogger/restLogger.service.ts","webpack://ng-universal-demo/./app/services/api/account/account.service.ts","webpack://ng-universal-demo/./app/services/api/account/accountAuth.options.ts","webpack://ng-universal-demo/./app/services/api/restMockLogger/restMockLogger.service.ts","webpack://ng-universal-demo/./app/boot/app.config.ts","webpack://ng-universal-demo/./app/misc/constants.ts","webpack://ng-universal-demo/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ng-universal-demo/./app/services/missingTranslation/missingTranslation.service.ts","webpack://ng-universal-demo/./app/boot/app.module.ts","webpack://ng-universal-demo/./app/boot/browser-app.module.ts","webpack://ng-universal-demo/./app/main.browser.bootstrap.ts","webpack://ng-universal-demo/./app/misc/tokens.ts","webpack://ng-universal-demo/./app/modules/displayingFeature.module.ts","webpack://ng-universal-demo/./app/modules/formsFeature.module.ts","webpack://ng-universal-demo/./app/modules/debuggingFeature.module.ts","webpack://ng-universal-demo/./app/modules/gridFeature.module.ts","webpack://ng-universal-demo/./app/modules/menu/modules/menu.module.ts","webpack://ng-universal-demo/./app/services/settings/settings.service.ts","webpack://ng-universal-demo/./app/services/settings/localSettingsStorage.ts"],"sourcesContent":["var map = {\n\t\"./en.json\": [\n\t\t9587,\n\t\t587\n\t],\n\t\"./sk.json\": [\n\t\t5930,\n\t\t930\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 5048;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used displaying dynamic content pages\n */\n@Component(\n{\n    selector: 'dynamic-content-view',\n    templateUrl: 'dynamicContent.component.html',\n    // styleUrls: ['dynamicContent.component.scss'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicContentSAComponent\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../config';\nimport {SettingsService} from '../../services/settings';\nimport {DisplayingFeatureModule} from '../../modules/displayingFeature.module';\nimport {FormsFeatureModule} from '../../modules/formsFeature.module';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    standalone: true,\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsSAComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration?.themes ?? [];\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration?.languages ?? [];\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                consoleConfig: ConsoleSinkConfigService,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel as any] as any,\n            //TODO: solve typings\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n        \n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            consoleConfig.restrictToLevel = +loggingSettings.consoleLogLevel;\n\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogEventLevel[+loggingSettings.consoleLogLevel],\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val as any] as any,//TODO: solve typings\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\"\r\n       *authorize=\"'logging-settings'\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\"\r\n       *authorize=\"'debug-settings'\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name | asRequired\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name | asRequired\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- FILE LOG LEVEL -->\r\n        <ng-template [authorize]=\"'authorized-electron'\">\r\n            <div class=\"text-capitalize\">{{'file log' | translate}}</div>\r\n\r\n            <div>\r\n                <ng-select formControlName=\"fileLogLevel\">\r\n                    <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name | asRequired\" [value]=\"level?.value\"></ng-option>\r\n                </ng-select>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {isFunction, isBlank, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\nglobalDefine(global =>\n{\n    if(!global.Document)\n    {\n        global.Document = function(){};\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(this: any, next: any, error: any, complete: any)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err: any) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        group(\n        [\n            query('.loading-card', \n            [\n                animate('300ms', style(\n                {\n                    transform: 'scale(4)'\n                }))\n            ]),\n            animate('200ms 100ms', style(\n            {\n                opacity: 0\n            }))\n            \n        ])\n    ])\n]);","<div *authorize=\"'authenticated'\" class=\"flex-row\">\r\n    <a routerLink=\"/\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Home</a>\r\n    <div class=\"flex-1\"></div>\r\n    <a (click)=\"logout()\">Logout</a>\r\n    <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n</div>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {AuthenticationService} from '@anglr/authentication';\nimport {TitledDialogService} from '@anglr/common/material';\n\nimport {UserSettingsSAComponent} from '../../../../components';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    // styleUrls: ['mainMenu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent\n{\n    //######################### constructor #########################\n    constructor(private _authSvc: AuthenticationService<any>,\n                private _router: Router,\n                private _dialog: TitledDialogService)\n    {\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Logs out user\n     */\n    public async logout()\n    {\n        this._authSvc\n            .logout()\n            .subscribe(() =>\n            {\n                this._router.navigate(['/login']);\n            });\n    }\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsSAComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<main-menu></main-menu>\r\n\r\n<progress-indicator></progress-indicator>\r\n<internal-server-error></internal-server-error>\r\n<global-notifications></global-notifications>\r\n<hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n<div class=\"content relative\" [@routeAnimations]=\"routeComponentState\">\r\n    <div class=\"main-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n<console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div class=\"loading-header\">\r\n        <div class=\"loading-title\">TELECOVID</div>\r\n    </div>\r\n\r\n    <div class=\"loading-card\"></div>\r\n    <div class=\"loading-spinner\"></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {RouterOutlet} from '@angular/router';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {consoleAnimationTrigger} from '@anglr/common/structured-log';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {AuthenticationService} from '@anglr/authentication';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Subscription} from 'rxjs';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription|undefined|null;\n\n    /**\n     * Subscription for authenticated changes\n     */\n    private _authChangedSubscription: Subscription|undefined|null;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription|undefined|null;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription|undefined|null;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Indication whether is used authenticated\n     */\n    public authenticated: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Version of server\n     */\n    public serverVersion: string = '';\n\n    /**\n     * Name of server\n     */\n    public serverName: string = '';\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet|undefined;\n\n    //######################### constructor #########################\n    constructor(_authSvc: AuthenticationService,\n                translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: Document,)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        _authSvc\n            .getUserIdentity()\n            .then(identity =>\n            {\n                this.authenticated = identity.isAuthenticated;\n\n                _changeDetector.detectChanges();\n            });\n\n        this._authChangedSubscription = _authSvc.authenticationChanged.subscribe(identity =>\n        {\n            this.authenticated = identity.isAuthenticated;\n\n            _changeDetector.detectChanges();\n        });\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet?.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet?.activatedRouteData['animation'] || (<any>this.routerOutlet?.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._authChangedSubscription?.unsubscribe();\n        this._authChangedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, undefined, 'Show console'));\n        }\n    }\n}","import {Route} from '@angular/router';\n\n/**\n * Route for access denied component\n */\nexport const accessDeniedRoute: Route =\n{\n    path: 'accessDenied',\n    loadComponent: () => import('./accessDenied.component').then(({AccessDeniedComponent}) => AccessDeniedComponent)\n};","import {Type} from '@angular/core';\nimport {ModuleRoutesOptions} from '@anglr/common/router';\n\nimport {accessDeniedRoute} from '../pages/accessDenied/accessDenied.route';\nimport {notFoundRoute} from '../pages/notFound/notFound.route';\n\nexport const components: Type<any>[] =\n[\n];\n\nexport const routesOptions: ModuleRoutesOptions =\n{\n    rootModule: true,\n    rootModuleConfig:\n    {\n        enableTracing: false,\n        useHash: true,\n        // preloadingStrategy: PreloadAllModules\n    },\n    staticRoutesBefore:\n    [\n        {\n            path: '',\n            loadChildren: () => import('../pages/+default/default.module').then(({DefaultModule}) => DefaultModule)\n        },\n        {\n            path: 'admin',\n            loadChildren: () => import('../pages/+routedContent/routedContent.module').then(({RoutedContentModule}) => RoutedContentModule)\n        },\n        {\n            path: 'admin',\n            loadChildren: () => import('../pages/+dynamicContent/dynamicContent.module').then(({DynamicContentModule}) => DynamicContentModule)\n        },\n    ],\n    staticRoutesAfter:\n    [\n        accessDeniedRoute,\n        notFoundRoute,\n    ]\n};","import {Route} from '@angular/router';\n\n/**\n * Route for not found component\n */\nexport const notFoundRoute: Route =\n{\n    path: '**',\n    loadComponent: () => import('./notFound.component').then(({NotFoundComponent}) => NotFoundComponent)\n};","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\nimport {Observable, EMPTY} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'sk';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {Injectable} from '@angular/core';\nimport {RESTClient, BaseUrl, DefaultHeaders, POST, JsonContentType, Body, DisableInterceptor, ParameterTransform, DisableMiddleware} from '@anglr/rest';\nimport {LoggerRestClient, RestLog} from '@anglr/common/structured-log';\nimport {AuthInterceptor, SuppressAuthInterceptor} from '@anglr/authentication';\nimport {ClientErrorHandlingMiddleware} from '@anglr/error-handling/rest';\nimport {EMPTY, Observable, catchError} from 'rxjs';\n\nimport {config} from '../../../config';\nimport version from '../../../../config/version.json';\n\n/**\n * Service used for logging logs on server\n */\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class RestLoggerService extends RESTClient implements LoggerRestClient\n{\n    //######################### public methods - implementation of LoggerRestClient #########################\n\n    /**\n     * @inheritdoc\n     */\n    public log(logs: RestLog[]): Observable<void>\n    {\n        return this._log(logs)\n            .pipe(catchError(_ =>\n            {\n                console.warn('Failed to create log on server');\n\n                return EMPTY;\n            }));\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Logs message on server using REST\n     * @param logs - Array of logs to be logged\n     */\n    @JsonContentType()\n    @DisableMiddleware(ClientErrorHandlingMiddleware)\n    @DisableInterceptor(AuthInterceptor)\n    @DisableInterceptor(SuppressAuthInterceptor)\n    @POST('logger')\n    public _log(@Body @ParameterTransform('_unhandledErrorsTransform') _logs: RestLog[]): Observable<void>\n    {\n        return EMPTY;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Removes unhandled error text from logs\n     * @param logs - Logs to be transformed\n     */\n    //@ts-ignore\n    private _unhandledErrorsTransform(logs: RestLog[]): RestLog[]\n    {\n        function addBasicInfo(log: {version?: string, id?: string})\n        {\n            if(!log)\n            {\n                return;\n            }\n\n            log.version = version.version;\n            log.id = 'angular-gui';\n        }\n\n        for(let x = 0; x < logs.length; x++)\n        {\n            const obj: RestLog & {info?: any} = logs[x];\n\n            //remove unhandled error message and serialize\n            if(obj.message.startsWith('Unhandled error: '))\n            {\n                const message = obj.message.replace('Unhandled error: ', '');\n\n                try\n                {\n                    obj.info = JSON.parse(message);\n\n                    if(Array.isArray(obj.info))\n                    {\n                        obj.info = obj.info[0];\n                    }\n\n                    addBasicInfo(obj.info);\n                }\n                catch\n                {\n                    obj.info = {};\n\n                    addBasicInfo(obj.info);\n                }\n            }\n            else\n            {\n                obj.info = {};\n\n                addBasicInfo(obj.info);\n            }\n\n            logs[x] = obj;\n        }\n\n        return logs;\n    }\n}","import {inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {UserIdentity, AccessToken} from '@anglr/authentication';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport permissions from '../../../../config/permissions.json';\n\nconst USER_DATA = 'USER_DATA';\n\n/**\n * Service used to access user account information\n */\n@Injectable({providedIn: 'root'})\nexport class AccountService\n{\n    //######################### private fields #########################\n\n    /**\n     * Computed permissions for roles\n     */\n    private _permissions: Dictionary<string[]>|undefined;\n\n    /**\n     * Storage to be used for storing user data\n     */\n    private _storage: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Current user identity\n     */\n    private _identity: UserIdentity|null = null;\n\n    //######################### private properties #########################\n\n    /**\n     * Gets computed permissions for roles\n     */\n    private get permissions(): Dictionary<string[]>\n    {\n        return this._permissions ?? (this._permissions = this._computePermissionsForRoles());\n    }\n\n    //######################### public methods - implementation of AuthenticationServiceOptions #########################\n\n    /**\n     * Method logs user into system\n     * @param  {AccessToken} accessToken Access token used for authentication\n     */\n    public login(accessToken: AccessToken): Observable<void>\n    {\n        return new Observable(observer =>\n        {\n            if(accessToken.userName == 'admin' && accessToken.password == 'admin')\n            {\n                const privileges = this._roles2privileges(['ADMIN']);\n\n                this._identity =\n                {\n                    isAuthenticated: true,\n                    userName: 'admin',\n                    firstName: 'admin',\n                    surname: '',\n                    permissions: privileges.concat(['authenticated']),\n                    additionalInfo: null,\n                };\n            }\n            else if(accessToken.userName == 'test' && accessToken.password == 'test')\n            {\n                const privileges = this._roles2privileges(['USER']);\n\n                this._identity =\n                {\n                    isAuthenticated: true,\n                    userName: 'user',\n                    firstName: 'user',\n                    surname: '',\n                    permissions: privileges.concat(['authenticated']),\n                    additionalInfo: null,\n                };\n            }\n            else\n            {\n                this._identity = null;\n\n                observer.error(() => new Error('Failed to login'));\n                observer.complete();\n\n                return;\n            }\n\n            if(accessToken.rememberMe && this._identity)\n            {\n                this._storage.set(USER_DATA, this._identity);\n            }\n\n            observer.next();\n            observer.complete();\n        });\n    }\n\n    /**\n     * Methods logs out user out of system\n     */\n    public logout(): Observable<void>\n    {\n        return new Observable(observer =>\n        {\n            this._storage.remove(USER_DATA);\n            this._identity = null;\n\n            observer.next();\n            observer.complete();\n        });\n    }\n\n    /**\n     * Gets information about user\n     */\n    public getUserIdentity(): Observable<UserIdentity>\n    {\n        return new Observable(observer =>\n        {\n            this._identity ??= this._storage.get<UserIdentity>(USER_DATA);\n\n            observer.next(this._identity ??\n            {\n                isAuthenticated: false,\n                userName: '',\n                permissions: [],\n                firstName: '',\n                surname: ''\n            });\n\n            observer.complete();\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets array of permissions for provided roles\n     * @param roles Array of roles to be transformed to permissions\n     */\n    private _roles2privileges(roles: string[]): string[]\n    {\n        const perms: {[permission: string]: boolean} = {};\n\n        (roles ?? []).forEach(role => (this.permissions[role] ?? []).forEach(permission => perms[permission] = true));\n\n        return Object.keys(perms);\n    }\n\n    /**\n     * Computes permissions for roles\n     */\n    private _computePermissionsForRoles(): Dictionary<string[]>\n    {\n        const computedPermissions: Dictionary<string[]> = {};\n        const permissionsDict = permissions as unknown as Dictionary<string[]>;\n\n        Object.keys(permissionsDict).forEach(permission =>\n        {\n            const roles = permissionsDict[permission];\n\n            if(Array.isArray(roles))\n            {\n                roles.forEach(role =>\n                {\n                    computedPermissions[role] ??= [];\n                    computedPermissions[role].push(permission);\n                });\n            }\n        });\n\n        return computedPermissions;\n    }\n}","import {Injectable} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Router} from '@angular/router';\nimport {AccessToken, AuthenticationServiceOptions, UserIdentity} from '@anglr/authentication';\nimport {isPresent} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {AccountService} from './account.service';\n\n/**\n * Class represents authentication service options for account\n */\n@Injectable()\nexport class AccountAuthOptions extends AuthenticationServiceOptions\n{\n    //######################### constructor #########################\n    constructor(private _router: Router,\n                private _accountSvc: AccountService,\n                private _location: Location)\n    {\n        super();\n    }\n\n    //######################### public methods - implementation of AuthenticationServiceOptions #########################\n\n    /**\n     * @inheritdoc\n     */\n    public login(accessToken: AccessToken): Observable<void>\n    {\n        return this._accountSvc.login(accessToken);\n    }\n    \n    /**\n     * @inheritdoc\n     */\n    public isAuthPage(path?: string): boolean\n    {\n        if(isPresent(path))\n        {\n            return path.indexOf('/login') == 0;\n        }\n\n        return this._location.path().indexOf('/login') == 0;\n    }\n    \n    /**\n     * @inheritdoc\n     */\n    public logout(): Observable<void>\n    {\n        return this._accountSvc.logout();\n    }\n    \n    /**\n     * @inheritdoc\n     */\n    public getUserIdentity(): Observable<UserIdentity>\n    {\n        return this._accountSvc.getUserIdentity();\n    }\n    \n    /**\n     * @inheritdoc\n     */\n    public showAuthPage(): Promise<boolean>\n    {\n        return this._router.navigate(['/login'], {queryParams: {returnUrl: this._location.path()}});\n    }\n    \n    /**\n     * @inheritdoc\n     */\n    public showAccessDenied(): Promise<boolean>\n    {\n        return this._router.navigate(['/accessDenied']);\n    }\n}","import {Injectable} from '@angular/core';\nimport {HttpRequest, HttpResponse} from '@angular/common/http';\nimport {RESTClient, BaseUrl, DefaultHeaders, MockLogger, JsonContentType, DisableMiddleware, DisableInterceptor, POST, Body, MockLoggerMiddleware} from '@anglr/rest';\nimport {ClientErrorHandlingMiddleware} from '@anglr/error-handling/rest';\nimport {AuthInterceptor, SuppressAuthInterceptor} from '@anglr/authentication';\nimport {isBlank, isString} from '@jscrpt/common';\nimport {NEVER, Observable} from 'rxjs';\n\nimport {config} from '../../../config';\n\n/**\n * Service for logging responses for mocks\n */\n@Injectable()\n@BaseUrl(config.configuration.apiBaseUrl)\n@DefaultHeaders(config.configuration.defaultApiHeaders)\nexport class RestMockLoggerService extends RESTClient implements MockLogger\n{\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async logResponse(request: HttpRequest<unknown>, response: HttpResponse<string|ArrayBuffer|Blob|object>): Promise<void>\n    {\n        let responseString: string;\n\n        if(isBlank(response.body))\n        {\n            responseString = '';\n        }\n        else if(isString(response.body))\n        {\n            responseString = response.body;\n        }\n        else if(response.body instanceof Blob)\n        {\n            responseString = await new Promise(resolve =>\n            {\n                const reader = new FileReader();\n\n                reader.onloadend = () => resolve(reader.result as string);\n                reader.readAsDataURL(response.body as Blob);\n            });\n        }\n        else if(response.body instanceof ArrayBuffer)\n        {\n            let binary = '';\n            const bytes = new Uint8Array(response.body as ArrayBuffer);\n            const len = bytes.byteLength;\n\n            for (let x = 0; x < len; x++) \n            {\n                binary += String.fromCharCode(bytes[x]);\n            }\n\n            responseString = btoa(binary);\n        }\n        else\n        {\n            responseString = JSON.stringify(response.body, null, 4);\n        }\n        \n        return await this\n            ._logResponse(\n            {\n                url: request.url,\n                response: responseString\n            })\n            .toPromise()\n            .catch(_ => console.warn('Failed to log mock data'));\n    }\n\n    //######################### private fields #########################\n    \n    /**\n     * Gets information about running application\n     * @returns Observable\n     */\n    @JsonContentType()\n    @DisableMiddleware(ClientErrorHandlingMiddleware)\n    @DisableMiddleware(MockLoggerMiddleware)\n    @DisableInterceptor(AuthInterceptor)\n    @DisableInterceptor(SuppressAuthInterceptor)\n    @POST('mockLogger')\n    private _logResponse(@Body _mock: {url: string, response: string}): Observable<any>\n    {\n        return NEVER;\n    }\n}","import {FactoryProvider, APP_INITIALIZER, ClassProvider, ValueProvider, Provider, ExistingProvider, Injector} from '@angular/core';\nimport {AuthenticationService, AUTH_INTERCEPTOR_PROVIDER, SUPPRESS_AUTH_INTERCEPTOR_PROVIDER, AuthenticationServiceOptions} from '@anglr/authentication';\nimport {LocalPermanentStorageService} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService, DEFAULT_NOTIFICATIONS, NOTIFICATIONS} from '@anglr/common';\nimport {ConsoleSinkConfigService, LOGGER_REST_CLIENT, REST_SINK} from '@anglr/common/structured-log';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_HANDLING_NOTIFICATIONS, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, ERROR_WITH_URL_EXTENDER, HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER, CLIENT_ERROR_NOTIFICATIONS, handle400WithValidationsFunc, handle404Func, HttpClientErrorCustomHandler, HttpClientErrorResponseMapper, HttpClientValidationErrorResponseMapper, HTTP_CLIENT_ERROR_CUSTOM_HANDLER, HTTP_CLIENT_ERROR_RESPONSE_MAPPER, HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, PAGING_OPTIONS, BasicPagingOptions, METADATA_SELECTOR_TYPE, METADATA_SELECTOR_OPTIONS, CONTENT_RENDERER_OPTIONS, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, GRID_INITIALIZER_TYPE, GRID_INITIALIZER_OPTIONS, QueryPermanentStorageGridInitializerOptions, QueryGridInitializerComponent} from '@anglr/grid';\nimport {DialogMetadataSelectorComponent, DialogMetadataSelectorOptions} from '@anglr/grid/material';\nimport {ReservedSpaceValidationErrorsContainerComponent, ValidationErrorRendererFactoryOptions, VALIDATION_ERROR_MESSAGES, VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '@anglr/common/forms';\nimport {ConfirmationDialogOptions, CONFIRMATION_DIALOG_OPTIONS, MovableTitledDialogComponent, TitledDialogServiceOptions} from '@anglr/common/material';\nimport {FLOATING_UI_POSITION} from '@anglr/common/floating-ui';\nimport {MD_HELP_NOTIFICATIONS, RenderMarkdownConfig, RENDER_MARKDOWN_CONFIG} from '@anglr/md-help/web';\nimport {ClientErrorHandlingMiddleware, REST_ERROR_HANDLING_MIDDLEWARE_ORDER} from '@anglr/error-handling/rest';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions, POSITIONER_TYPE} from '@anglr/select';\nimport {PopperJsPositionerComponent} from '@anglr/select/popperJs';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATE_FNS_DATE_API_OBJECT_TYPE, DATE_FNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {LoggerMiddleware, MockLoggerMiddleware, ReportProgressMiddleware, ResponseTypeMiddleware, REST_METHOD_MIDDLEWARES, REST_MOCK_LOGGER} from '@anglr/rest';\nimport {DATETIME_REST_DATE_API} from '@anglr/rest/datetime';\nimport {isString, isJsObject} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\nimport {sk} from 'date-fns/locale';\n\nimport {config} from '../config';\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\nimport {RestLoggerService} from '../services/api/restLogger';\nimport {AccountAuthOptions} from '../services/api/account/accountAuth.options';\nimport {RestMockLoggerService} from '../services/api/restMockLogger';\n\n/**\n * Creates APP initialization factory, that first try to authorize user before doing anything else\n * @param authService Authentication service used for authentication of user\n */\nexport function appInitializerFactory(authService: AuthenticationService<any>): () => Promise<void>\n{\n    return async () =>\n    {\n        try\n        {\n            await authService\n                .getUserIdentity();\n        }\n        catch(e)\n        {\n            alert(`Authentication failed: ${e}`);\n\n            throw e;\n        }\n    };\n}\n\n/**\n * Factory method for creating HttpGatewayTimeoutInterceptorOptions\n */\nexport function httpGatewayTimeoutInterceptorOptionsFactory(): HttpGatewayTimeoutInterceptorOptions\n{\n    return new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.');\n}\n\n/**\n * Factory method for creating NoConnectionInterceptorOptions\n */\nexport function noConnectionInterceptorOptionsFactory(): NoConnectionInterceptorOptions\n{\n    return new NoConnectionInterceptorOptions('Server je mimo prevádzky.');\n}\n\n/**\n * Array of providers that are used in app module\n */\nexport const providers: Provider[] =\n[\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    SUPPRESS_AUTH_INTERCEPTOR_PROVIDER,\n    AUTH_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: noConnectionInterceptorOptionsFactory,\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: httpGatewayTimeoutInterceptorOptionsFactory,\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### AUTHENTICATION & AUTHORIZATION #########################\n    <ClassProvider>\n    {\n        provide: AuthenticationServiceOptions,\n        useClass: AccountAuthOptions\n    },\n\n    //######################### ERROR HANDLING #########################\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    //######################### APP INITIALIZER #########################\n    <FactoryProvider>\n    {\n        useFactory: appInitializerFactory,\n        provide: APP_INITIALIZER,\n        deps: [AuthenticationService],\n        multi: true\n    },\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    <ValueProvider>\n    {\n        provide: NO_DATA_RENDERER_OPTIONS,\n        useValue: <NoDataRendererOptions>\n        {\n            texts:\n            {\n                loading: 'Nahrávam dáta ...',\n                noData: 'Neboli nájdené dáta odpovedajúce zadaným parametrom',\n                notLoaded: 'Neboli načítané žiadne dáta zatiaľ'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_TYPE,\n        useValue: QueryGridInitializerComponent\n    },\n    <ValueProvider>\n    {\n        provide: PAGING_OPTIONS,\n        useValue: <BasicPagingOptions>\n        {\n            itemsPerPageValues: [15, 30, 60],\n            initialItemsPerPage: 15\n        }\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_TYPE,\n        useValue: DialogMetadataSelectorComponent\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_OPTIONS,\n        useValue: <DialogMetadataSelectorOptions>\n        {\n            showButtonVisible: false\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_OPTIONS,\n        useValue: <QueryPermanentStorageGridInitializerOptions>\n        {\n            storageIppName: 'all-grid-ipp'\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_OPTIONS,\n        useValue: <TableContentRendererOptions>\n        {\n            cssClasses:\n            {\n                containerDiv: 'table-container thin-scrollbar'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header'\n            }\n        }\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions<any>>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: POSITIONER_TYPE,\n        useValue: PopperJsPositionerComponent,\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorageService\n    },\n\n    //######################### LOGGER #########################\n    REST_SINK,\n    <FactoryProvider>\n    {\n        provide: ConsoleSinkConfigService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            return new ConsoleSinkConfigService(undefined, LogEventLevel[settingsSvc?.settingsLogging?.consoleLogLevel as any] as any);\n            //TODO: solve typings\n        },\n        deps: [SettingsService]\n    },\n    <ClassProvider>\n    {\n        provide: LOGGER_REST_CLIENT,\n        useClass: RestLoggerService\n    },\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n        deps: [SettingsService]\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATE_FNS_FORMAT_PROVIDER,\n    DATE_FNS_DATE_API_OBJECT_TYPE,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n\n    //######################### VALIDATION ERRORS #########################\n\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_MESSAGES,\n        useValue:\n        {\n            required: 'Položka je povinná.',\n            number: 'Položka musí byť číslo.',\n            pattern: 'Položka nie je v požadovanom formáte.',\n            minValue: 'Nedodržaná minimálna povolená hodnota.',\n            maxValue: 'Nedodržaná maximálna povolená hodnota.',\n            minlength: 'Nedodržaná minimálna dĺžka.',\n            maxlength: 'Nedodržaná maximálna dĺžka.',\n            birthNumber: 'Nesprávny formát rodného čísla.',\n            email: 'Položka musí byť email.',\n            availableUsername: 'Prihlasovacie meno je použité',\n        }\n    },\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS,\n        useValue: <ValidationErrorRendererFactoryOptions>\n        {\n            container: ReservedSpaceValidationErrorsContainerComponent\n        }\n    },\n\n    //######################### NOTIFICATIONS #########################\n    DEFAULT_NOTIFICATIONS,\n    <ExistingProvider>\n    {\n        provide: MD_HELP_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: ERROR_HANDLING_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: CLIENT_ERROR_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n\n    //######################### TITLED DIALOG #########################\n\n    <ValueProvider>\n    {\n        provide: TitledDialogServiceOptions,\n        useValue: new TitledDialogServiceOptions(MovableTitledDialogComponent)\n    },\n    \n    //######################### CONFIRMATION DIALOG #########################\n    <ValueProvider>\n    {\n        provide: CONFIRMATION_DIALOG_OPTIONS,\n        useValue: <ConfirmationDialogOptions>\n        {\n            confirmationText: 'Prajete si pokračovať?',\n            dialogCancelText: 'Nie',\n            dialogConfirmText: 'Áno'\n        }\n    },\n\n    //######################### POSITION #########################\n    FLOATING_UI_POSITION,\n\n    //######################### MARKDOWN #########################\n    <ValueProvider>\n    {\n        provide: RENDER_MARKDOWN_CONFIG,\n        useValue: <RenderMarkdownConfig>\n        {\n            assetsPathPrefix: 'dist/md',\n            baseUrl: '/pomoc'\n        }\n    },\n\n    //######################### REST CONFIG #########################\n    DATETIME_REST_DATE_API,\n    <ClassProvider>\n    {\n        provide: REST_MOCK_LOGGER,\n        useClass: RestMockLoggerService\n    },\n    REST_ERROR_HANDLING_MIDDLEWARE_ORDER,\n    <ValueProvider>\n    {\n        provide: REST_METHOD_MIDDLEWARES,\n        useValue:\n        [\n            LoggerMiddleware,\n            ResponseTypeMiddleware,\n            ReportProgressMiddleware,\n            ClientErrorHandlingMiddleware,\n            ...jsDevMode ? [...config.configuration?.disableMockLogger ? [] : [MockLoggerMiddleware]] : [],\n        ]\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientErrorResponseMapper>(err => \n        {\n            if(err?.error?.errors)\n            {\n                return err?.error?.errors;\n            }\n\n            if(isString(err?.error))\n            {\n                return [err?.error];\n            }\n\n            if(isJsObject(err?.error))\n            {\n                return [JSON.stringify(err?.error)];\n            }\n            \n            return [err.message];\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientValidationErrorResponseMapper>(err => \n        {\n            if(err?.error?.validationErrors)\n            {\n                return err?.error?.validationErrors;\n            }\n\n            return null;\n        })\n    },\n    <FactoryProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_CUSTOM_HANDLER,\n        useFactory: (injector: Injector) =>\n        {\n            return <Record<number, HttpClientErrorCustomHandler<any>>>\n            {\n                400: err => handle400WithValidationsFunc(err, {injector}),\n                404: handle404Func\n            };\n        },\n        deps: [Injector]\n    },\n    \n];\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const DEBUG_INFO = 'debugInfo';","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return new Observable((observer: Observer<any>) =>\n        {\n            (async () => \n            {\n                const result = await import(`../../../content/l10n/${lang}.json`);\n\n                observer.next(result.default);\n                observer.complete();\n            })();\n        });\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\n/**\n * Service that reports missing translations, allows easier finding of missing translations\n */\n@Injectable()\nexport class ReportMissingTranslationService implements MissingTranslationHandler\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) private _logger: Logger)\n    {\n    }\n\n    //######################### public methods - MissingTranslationHandler #########################\n\n    /**\n     * @inheritdoc\n     */\n    public handle(params: MissingTranslationHandlerParams): string\n    {\n        this._logger.debug(`MISSING TRANSLATION: ${params.key}`);\n\n        return `MISSING: '${params.key}'`;\n    }\n}","import {NgModule, ClassProvider} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {ConsoleLogModule} from '@anglr/common/structured-log';\nimport {ProgressIndicatorModule} from '@anglr/common';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {NotificationsGlobalModule} from '@anglr/notifications';\nimport {TranslateModule, TranslateLoader, MissingTranslationHandler} from '@ngx-translate/core';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {AppComponent} from './app.component';\nimport {components, routesOptions} from './app.component.routes';\nimport {APP_TRANSFER_ID} from '../misc/constants';\nimport {providers} from './app.config';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {MenuModule} from '../modules';\nimport {config} from '../config';\nimport {ReportMissingTranslationService} from '../services/missingTranslation';\n\n/**\n * Main module shared for both server and browser side\n */\n@NgModule(\n{\n    imports:\n    [\n        BrowserModule.withServerTransition(\n        {\n            appId: APP_TRANSFER_ID\n        }),\n        HttpClientModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsGlobalModule.forRoot(),\n        RouterModule,\n        HotkeyModule,\n        MenuModule,\n        ConsoleLogModule.forRoot(),\n        TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n            {\n                provide: TranslateLoader, \n                useClass: WebpackTranslateLoaderService\n            },\n            ...config.configuration?.debugTranslations ? \n                {\n                    missingTranslationHandler:\n                    {\n                        provide: MissingTranslationHandler,\n                        useClass: ReportMissingTranslationService\n                    }\n                } : \n                {\n                },\n            useDefaultLang: !config.configuration?.debugTranslations\n        })\n    ],\n    providers: providers,\n    declarations:\n    [\n        AppComponent,\n        ...components\n    ],\n    exports: [AppComponent]\n})\n@ModuleRoutes(components, routesOptions)\nexport class AppModule\n{\n}\n","import {NgModule, FactoryProvider} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserTransferStateModule} from '@angular/platform-browser';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {config} from '../config';\nimport {AppComponent} from './app.component';\nimport {AppModule} from './app.module';\n\n/**\n * Entry module for browser side\n */\n@NgModule(\n{\n    bootstrap: [AppComponent],\n    imports:\n    [\n        AppModule,\n        BrowserAnimationsModule,\n        BrowserTransferStateModule,\n        HotkeyModule.forRoot(\n        {\n            cheatSheetCloseEsc: true\n        })\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: AnglrExceptionHandlerOptions,\n            useFactory: () => new AnglrExceptionHandlerOptions(config.configuration?.debug, false)\n        }\n    ]\n})\nexport class BrowserAppModule\n{\n}\n","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js';\nimport './hacks';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {NgModuleRef, enableProdMode} from '@angular/core';\nimport {runWhenModuleStable} from '@anglr/common';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {simpleNotification} from '@jscrpt/common';\n\nimport {config} from './config';\nimport {BrowserAppModule} from './boot/browser-app.module';\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nconst platform = platformBrowser();\n\nrunWhenModuleStable(platform.bootstrapModule(BrowserAppModule), (moduleRef: NgModuleRef<any>) =>\n{\n    moduleRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n    jsDevMode && simpleNotification(jsDevMode && import.meta.webpackHot);\n}, config.configuration.debug);\n","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonUtilsModule, CommonLocalizeModule, TooltipModule, CastPipesModule} from '@anglr/common';\nimport {NumeralModule} from '@anglr/common/numeral';\nimport {AuthorizationModule} from '@anglr/authentication';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        CommonUtilsModule,\n        CommonLocalizeModule,\n        NumeralModule,\n        TooltipModule,\n        CastPipesModule,\n        TranslateModule,\n        DatePipesModule,\n        AuthorizationModule,\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule, HasErrorModule, FormPipesModule} from '@anglr/common/forms';\nimport {DateTimeSelectorModule} from '@anglr/datetime';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        DateTimeSelectorModule,\n        HasErrorModule,\n        FormPipesModule,\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        DebugDataCopyClickModule,\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {TitledDialogModule} from '@anglr/common/material';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {MainMenuComponent} from '../components';\nimport {UserSettingsSAComponent} from '../../../components';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsSAComponent,\n        TitledDialogModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {extend} from '@jscrpt/common';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage,)\n    {\n\n    }\n\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = this._store.get<SettingsGeneral>(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        this._store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = this._store.get<SettingsDebug>(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        this._store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = this._store.get<SettingsLogging>(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging): void\n    {\n        this._store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","DynamicContentSAComponent","selectors","standalone","features","decls","vars","template","encapsulation","changeDetection","UserSettingsSections","i0","theme_r11","lang_r12","level_r15","level_r17","UserSettingsSAComponent","constructor","settingsSvc","formBuilder","consoleConfig","debugDataEnabled","themes","config","languages","logLevels","activeSection","General","settings","debuggingSettings","settingsDebugging","loggingSettings","settingsLogging","this","_getLogLevels","generalSettingsForm","group","language","theme","debuggingSettingsForm","consoleEnabled","debugData","loggingSettingsForm","consoleLogLevel","LogEventLevel","valueChanges","subscribe","generalSettings","setSettings","debugSettings","setEnabled","setDebuggingSettings","restrictToLevel","setLoggingSettings","forEach","val","isNaN","push","name","value","consts","DisplayingFeatureModule","i5","FormsFeatureModule","i2","styles","globalDefine","global","Document","observableSubscribe","Observable","next","error","complete","isBlank","isFunction","err","console","log","call","routeAnimationTrigger","trigger","transition","query","animateChild","optional","style","position","perspective","top","left","width","height","transform","opacity","animate","loaderTrigger","MainMenuComponent","_authSvc","_router","_dialog","logout","navigate","openSettings","open","title","maxHeight","AppComponent","translateSvc","_changeDetector","_appHotkeys","logger","document","consoleVisible","authenticated","routeComponentState","guiVersion","version","serverVersion","serverName","initialized","verbose","body","classList","add","_theme","_settingsChangeSubscription","settingsChange","itm","nameof","remove","use","detectChanges","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","getUserIdentity","identity","isAuthenticated","_authChangedSubscription","authenticationChanged","ngOnInit","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","component","ngOnDestroy","unsubscribe","destroy","oldHelpHotkey","hotkeys","get","Hotkey","undefined","LOGGER","DOCUMENT","viewQuery","AppHotkeysService","fadeInOutTrigger","consoleAnimationTrigger","routesOptions","rootModule","rootModuleConfig","enableTracing","useHash","staticRoutesBefore","path","loadChildren","DefaultModule","RoutedContentModule","DynamicContentModule","staticRoutesAfter","loadComponent","AccessDeniedComponent","NotFoundComponent","GlobalizationService","GlobalizationServiceInterface","locale","localeChange","EMPTY","factory","RestLoggerService","RESTClient","logs","_log","pipe","catchError","_","warn","_logs","_unhandledErrorsTransform","addBasicInfo","x","length","obj","message","startsWith","replace","info","JSON","parse","Array","isArray","JsonContentType","DisableMiddleware","ClientErrorHandlingMiddleware","DisableInterceptor","AuthInterceptor","SuppressAuthInterceptor","POST","__param","BaseUrl","DefaultHeaders","USER_DATA","AccountService","_storage","inject","PERMANENT_STORAGE","_identity","permissions","_permissions","_computePermissionsForRoles","login","accessToken","observer","userName","password","privileges","_roles2privileges","firstName","surname","concat","additionalInfo","rememberMe","set","roles","perms","role","permission","computedPermissions","permissionsDict","providedIn","AccountAuthOptions","AuthenticationServiceOptions","_accountSvc","_location","super","isAuthPage","isPresent","indexOf","showAuthPage","queryParams","returnUrl","showAccessDenied","RestMockLoggerService","logResponse","request","response","responseString","isString","Blob","reader","FileReader","onloadend","result","readAsDataURL","ArrayBuffer","binary","bytes","Uint8Array","len","byteLength","String","fromCharCode","btoa","stringify","_logResponse","url","toPromise","catch","_mock","NEVER","MockLoggerMiddleware","providers","HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER","SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER","HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER","NO_CONNECTION_INTERCEPTOR_PROVIDER","SUPPRESS_AUTH_INTERCEPTOR_PROVIDER","AUTH_INTERCEPTOR_PROVIDER","PROGRESS_INTERCEPTOR_PROVIDER","useFactory","NoConnectionInterceptorOptions","provide","HttpGatewayTimeoutInterceptorOptions","useClass","GlobalizationServiceImpl","ERROR_WITH_URL_EXTENDER","ANGLR_EXCEPTION_HANDLER_PROVIDER","DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER","authService","alert","APP_INITIALIZER","deps","AuthenticationService","multi","NO_DATA_RENDERER_OPTIONS","useValue","texts","loading","noData","notLoaded","GRID_INITIALIZER_TYPE","QueryGridInitializerComponent","PAGING_OPTIONS","itemsPerPageValues","initialItemsPerPage","METADATA_SELECTOR_TYPE","DialogMetadataSelectorComponent","METADATA_SELECTOR_OPTIONS","showButtonVisible","GRID_INITIALIZER_OPTIONS","storageIppName","CONTENT_RENDERER_OPTIONS","cssClasses","containerDiv","HEADER_CONTENT_RENDERER_OPTIONS","thDefault","NORMAL_STATE_OPTIONS","nothingSelected","POSITIONER_TYPE","PopperJsPositionerComponent","STRING_LOCALIZATION","NgxTranslateStringLocalizationService","LocalPermanentStorageService","REST_SINK","ConsoleSinkConfigService","SettingsService","LOGGER_REST_CLIENT","SETTINGS_STORAGE","LocalSettingsStorage","DebugDataEnabledService","DATE_API","DateFnsDateApi","DATE_FNS_FORMAT_PROVIDER","DATE_FNS_DATE_API_OBJECT_TYPE","DATE_FNS_LOCALE","sk","VALIDATION_ERROR_MESSAGES","required","number","pattern","minValue","maxValue","minlength","maxlength","birthNumber","email","availableUsername","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","container","ReservedSpaceValidationErrorsContainerComponent","DEFAULT_NOTIFICATIONS","MD_HELP_NOTIFICATIONS","useExisting","NOTIFICATIONS","ERROR_HANDLING_NOTIFICATIONS","CLIENT_ERROR_NOTIFICATIONS","TitledDialogServiceOptions","MovableTitledDialogComponent","CONFIRMATION_DIALOG_OPTIONS","confirmationText","dialogCancelText","dialogConfirmText","FLOATING_UI_POSITION","RENDER_MARKDOWN_CONFIG","assetsPathPrefix","baseUrl","DATETIME_REST_DATE_API","REST_MOCK_LOGGER","REST_ERROR_HANDLING_MIDDLEWARE_ORDER","REST_METHOD_MIDDLEWARES","LoggerMiddleware","ResponseTypeMiddleware","ReportProgressMiddleware","HTTP_CLIENT_ERROR_RESPONSE_MAPPER","errors","isJsObject","HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER","validationErrors","HTTP_CLIENT_ERROR_CUSTOM_HANDLER","injector","handle400WithValidationsFunc","handle404Func","Injector","WebpackTranslateLoaderService","getTranslation","lang","default","ReportMissingTranslationService","_logger","handle","params","debug","key","AppModule","imports","BrowserModule","appId","HttpClientModule","InternalServerErrorModule","ProgressIndicatorModule","NotificationsGlobalModule","RouterModule","HotkeyModule","MenuModule","ConsoleLogModule","TranslateModule","loader","TranslateLoader","debugTranslations","missingTranslationHandler","MissingTranslationHandler","useDefaultLang","ModuleRoutes","BrowserAppModule","bootstrap","AnglrExceptionHandlerOptions","BrowserAnimationsModule","BrowserTransferStateModule","cheatSheetCloseEsc","enableProdMode","platform","platformBrowser","runWhenModuleStable","bootstrapModule","moduleRef","RestTransferStateService","clearAndDeactivate","InjectionToken","CommonModule","CommonUtilsModule","CommonLocalizeModule","NumeralModule","TooltipModule","CastPipesModule","DatePipesModule","AuthorizationModule","ReactiveFormsModule","MatSlideToggleModule","NumberInputModule","NgSelectModule","NgSelectEditModule","DateTimeSelectorModule","HasErrorModule","FormPipesModule","DebuggingFeatureModule","DebugDataCopyClickModule","GridFeatureModule","GridModule","TitledDialogModule","keyValueDiffers","_settings","_settingsDebugging","getDebugging","_settingsLogging","getLogging","_settingsChangeSubject","Subject","_settingsDebuggingChangeSubject","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","asObservable","extend","forEachChangedItem","setDebugging","setLogging","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","_store"],"sourceRoot":""}