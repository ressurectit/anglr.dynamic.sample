{"version":3,"file":"5705.client.chunk.242160ec2452a59b4bdd.js","mappings":";uLAiBM,MAAOA,oCAAAA,sBAAAA,0BAJDC,EAAAA,GAAiBC,EAAAA,GACKA,EAAAA,+QC0B5BC,EAAyB,CAC7B,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAIIC,GAAiBC,EAAAA,EAAAA,IACrBC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GACE,MACEC,YAAmBC,GAAA,KAAAA,YAAAA,CAA2B,MA6BhD,MAAOC,UACHN,EAYRI,YACEG,EACQC,EAC0CC,GAElDC,MAAMH,GAHE,KAAAC,cAAAA,EAC0C,KAAAC,eAAAA,EAX3C,KAAAE,cAAyBC,KAAKC,mBAAmB,UAAW,gBAG5D,KAAAC,aAAwBF,KAAKC,mBAAmB,mBAcvD,IAAK,MAAME,KAAQhB,EACba,KAAKC,mBAAmBE,IACzBH,KAAKI,kBAAkCC,UAAUC,IAAIH,GAO1DR,EAAWY,cAAcF,UAAUC,IAAI,mBAEnCN,KAAKD,gBACPC,KAAKQ,MApFwB,SAsFhC,CAEDC,kBACET,KAAKJ,cAAcc,QAAQV,KAAKP,aAAa,EAC9C,CAEDkB,cACEX,KAAKJ,cAAcgB,eAAeZ,KAAKP,YACxC,CAGDoB,MAAMC,EAAsBC,GACtBD,EACFd,KAAKJ,cAAcoB,SAAShB,KAAKI,kBAAmBU,EAAQC,GAE5Df,KAAKI,kBAAkBS,MAAME,EAEhC,CAEDX,kBACE,OAAOJ,KAAKP,YAAYc,aACzB,CAEDU,oBACE,OAAOjB,KAAKkB,eAAiBlB,KAAKmB,QACnC,CAGDlB,sBAAsBmB,GACpB,OAAOA,EAAWC,MAAKC,GAAatB,KAAKI,kBAAkBmB,aAAaD,IACzE,mCAlEU5B,GAAAA,EAAAA,EAAS8B,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAgBEC,EAAAA,GAAqBA,uBAhBhC/B,wQAWAgC,EAAAA,EAASA,qnBC/FtB,iBAAiC,eACjC,mCACM,uEACA,uICINC,EAAAA,unNF0KM,MAAOC,UAAkBlC,EAI7BF,YACEqC,EACAlC,EAC2CmC,EAEvBC,GAEpBjC,MAAMH,EAAYkC,EAAcC,GAFZ,KAAAC,QAAAA,EAuBtB,KAAAC,oBAAuBC,IAEjBjC,KAAKmB,WACPc,EAAMC,iBACND,EAAME,2BACP,CAzBF,CAEQ1B,kBACPX,MAAMW,kBAGFT,KAAK+B,QACP/B,KAAK+B,QAAQK,mBAAkB,KAC7BpC,KAAKP,YAAYc,cAAc8B,iBAAiB,QAASrC,KAAKgC,oBAA9D,IAGFhC,KAAKP,YAAYc,cAAc8B,iBAAiB,QAASrC,KAAKgC,oBAEjE,CAEQrB,cACPb,MAAMa,cACNX,KAAKP,YAAYc,cAAc+B,oBAAoB,QAAStC,KAAKgC,oBAClE,mCA9BUJ,GAAAA,EAAAA,EAASW,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAOEd,EAAAA,GAAqBA,GAAAA,EAAAA,EAAAD,EAAAA,EAAAA,uBAPhCI,82BCjLb,iBAAiC,eACjC,mCACM,uEACA,uICIND,EAAAA","sources":["webpack://ng-universal-demo/../../../src/material/button/button-module.ts","webpack://ng-universal-demo/../../../src/material/button/button.ts","webpack://ng-universal-demo/../src/material/button/button.html","webpack://ng-universal-demo/../../../src/material/button/button.html"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatButton, MatAnchor, MatCommonModule],\n  declarations: [MatButton, MatAnchor],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\nconst _MatButtonBase = mixinColor(\n  mixinDisabled(\n    mixinDisableRipple(\n      class {\n        constructor(public _elementRef: ElementRef) {}\n      },\n    ),\n  ),\n);\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Add a class for disabled button styling instead of the using attribute\n    // selector or pseudo-selector.  This allows users to create focusable\n    // disabled buttons without recreating the styles.\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton\n  extends _MatButtonBase\n  implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption\n{\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(\n    elementRef: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n  ) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton implements AfterViewInit, OnDestroy {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    @Optional() private _ngZone?: NgZone,\n  ) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    if (this._ngZone) {\n      this._ngZone.runOutsideAngular(() => {\n        this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n      });\n    } else {\n      this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n    }\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n}\n",null,"<span class=\"mat-button-wrapper\"><ng-content></ng-content></span>\n<span matRipple class=\"mat-button-ripple\"\n      [class.mat-button-ripple-round]=\"isRoundButton || isIconButton\"\n      [matRippleDisabled]=\"_isRippleDisabled()\"\n      [matRippleCentered]=\"isIconButton\"\n      [matRippleTrigger]=\"_getHostElement()\"></span>\n<span class=\"mat-button-focus-overlay\"></span>\n"],"names":["MatButtonModule","MatRippleModule","MatCommonModule","BUTTON_HOST_ATTRIBUTES","_MatButtonBase","mixinColor","mixinDisabled","mixinDisableRipple","constructor","_elementRef","MatButton","elementRef","_focusMonitor","_animationMode","super","isRoundButton","this","_hasHostAttributes","isIconButton","attr","_getHostElement","classList","add","nativeElement","color","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","origin","options","focusVia","_isRippleDisabled","disableRipple","disabled","attributes","some","attribute","hasAttribute","i0","ANIMATION_MODULE_TYPE","MatRipple","i2","MatAnchor","focusMonitor","animationMode","_ngZone","_haltDisabledEvents","event","preventDefault","stopImmediatePropagation","runOutsideAngular","addEventListener","removeEventListener","i1"],"sourceRoot":""}