{"version":3,"file":"8057.client.chunk.e475fba226550b472561.js","mappings":"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","sources":["webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/textarea/textarea.metadata.js","webpack://ng-universal-demo/../../../src/cdk/text-field/autosize.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/textarea/textarea.component.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/textarea/type.js"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Material textarea layout metadata loader\n */\nexport const MaterialTextareaLayoutMetadataLoader = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/textarea.layoutMetadata')).MaterialTextareaLayoutEditorMetadata();\n  });\n\n  return function MaterialTextareaLayoutMetadataLoader() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Material textarea relations metadata loader\n */\n\nexport const MaterialTextareaRelationsMetadataLoader = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/textarea.relationsMetadata')).MaterialTextareaRelationsEditorMetadata();\n  });\n\n  return function MaterialTextareaRelationsMetadataLoader() {\n    return _ref2.apply(this, arguments);\n  };\n}();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number {\n    return this._minRows;\n  }\n  set minRows(value: NumberInput) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number {\n    return this._maxRows;\n  }\n  set maxRows(value: NumberInput) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: BooleanInput) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  @Input()\n  get placeholder(): string {\n    return this._textareaElement.placeholder;\n  }\n  set placeholder(value: string) {\n    this._cachedPlaceholderHeight = undefined;\n\n    if (value) {\n      this._textareaElement.setAttribute('placeholder', value);\n    } else {\n      this._textareaElement.removeAttribute('placeholder');\n    }\n\n    this._cacheTextareaPlaceholderHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n  /** Cached height of a textarea with only the placeholder. */\n  private _cachedPlaceholderHeight?: number;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  private _hasFocus: boolean;\n\n  private _isViewInited = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    /** @breaking-change 11.0.0 make document required */\n    @Optional() @Inject(DOCUMENT) document?: any,\n  ) {\n    this._document = document;\n\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight =\n      this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight =\n      this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n\n        this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n      });\n\n      this._isViewInited = true;\n      this.resizeToFitContent(true);\n    }\n  }\n\n  ngOnDestroy() {\n    this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n    this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textareaClone.remove();\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  private _measureScrollHeight(): number {\n    const element = this._textareaElement;\n    const previousMargin = element.style.marginBottom || '';\n    const isFirefox = this._platform.FIREFOX;\n    const needsMarginFiller = isFirefox && this._hasFocus;\n    const measuringClass = isFirefox\n      ? 'cdk-textarea-autosize-measuring-firefox'\n      : 'cdk-textarea-autosize-measuring';\n\n    // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n    // work around it by assigning a temporary margin with the same height as the `textarea` so that\n    // it occupies the same amount of space. See #23233.\n    if (needsMarginFiller) {\n      element.style.marginBottom = `${element.clientHeight}px`;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    element.classList.add(measuringClass);\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const scrollHeight = element.scrollHeight - 4;\n    element.classList.remove(measuringClass);\n\n    if (needsMarginFiller) {\n      element.style.marginBottom = previousMargin;\n    }\n\n    return scrollHeight;\n  }\n\n  private _cacheTextareaPlaceholderHeight(): void {\n    if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n      return;\n    }\n    if (!this.placeholder) {\n      this._cachedPlaceholderHeight = 0;\n      return;\n    }\n\n    const value = this._textareaElement.value;\n\n    this._textareaElement.value = this._textareaElement.placeholder;\n    this._cachedPlaceholderHeight = this._measureScrollHeight();\n    this._textareaElement.value = value;\n  }\n\n  /** Handles `focus` and `blur` events. */\n  private _handleFocusEvent = (event: FocusEvent) => {\n    this._hasFocus = event.type === 'focus';\n  };\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n    this._cacheTextareaPlaceholderHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const scrollHeight = this._measureScrollHeight();\n    const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && this._hasFocus) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\n","import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { LayoutEditorMetadata } from '@anglr/dynamic/layout-editor';\nimport { CastPipesModule, HostDisplayBlockStyle } from '@anglr/common';\nimport { FormPipesModule } from '@anglr/common/forms';\nimport { FormComponentBase, FormComponentControlSAPipe } from '@anglr/dynamic/form';\nimport { RelationsEditorMetadata } from '@anglr/dynamic/relations-editor';\nimport { MaterialTextareaLayoutMetadataLoader, MaterialTextareaRelationsMetadataLoader } from './textarea.metadata';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@anglr/common/forms\";\nimport * as i2 from \"@anglr/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/cdk/text-field\";\nimport * as i6 from \"@angular/material/input\";\n/**\n * Component used for displaying material text field\n */\n\nlet MaterialTextareaSAComponent = class MaterialTextareaSAComponent extends FormComponentBase {};\n\nMaterialTextareaSAComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵMaterialTextareaSAComponent_BaseFactory;\n  return function MaterialTextareaSAComponent_Factory(t) {\n    return (ɵMaterialTextareaSAComponent_BaseFactory || (ɵMaterialTextareaSAComponent_BaseFactory = i0.ɵɵgetInheritedFactory(MaterialTextareaSAComponent)))(t || MaterialTextareaSAComponent);\n  };\n}();\n\nMaterialTextareaSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MaterialTextareaSAComponent,\n  selectors: [[\"material-textarea\"]],\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 9,\n  vars: 11,\n  consts: [[3, \"appearance\"], [\"matInput\", \"\", \"cdkTextareaAutosize\", \"\", 3, \"formControl\"]],\n  template: function MaterialTextareaSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n      i0.ɵɵpipe(1, \"asRequired\");\n      i0.ɵɵelementStart(2, \"mat-label\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"textarea\", 1);\n      i0.ɵɵpipe(5, \"asRequired\");\n      i0.ɵɵpipe(6, \"asFormControl\");\n      i0.ɵɵelementStart(7, \"mat-hint\");\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"appearance\", i0.ɵɵpipeBind1(1, 5, ctx.options == null ? null : ctx.options.appearance));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.options == null ? null : ctx.options.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", i0.ɵɵpipeBind1(5, 7, i0.ɵɵpipeBind1(6, 9, ctx.control)));\n      i0.ɵɵattribute(\"placeholder\", ctx.options == null ? null : ctx.options.placeholder);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.options == null ? null : ctx.options.hint);\n    }\n  },\n  dependencies: [FormPipesModule, i1.AsFormControlPipe, CastPipesModule, i2.AsRequiredTypePipe, ReactiveFormsModule, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, MatFormFieldModule, i4.MatFormField, i4.MatHint, i4.MatLabel, MatInputModule, i5.CdkTextareaAutosize, i6.MatInput, TextFieldModule],\n  styles: [\"[_nghost-%COMP%]{display: block;}\"],\n  changeDetection: 0\n});\nMaterialTextareaSAComponent = __decorate([RelationsEditorMetadata(MaterialTextareaRelationsMetadataLoader), LayoutEditorMetadata(MaterialTextareaLayoutMetadataLoader)], MaterialTextareaSAComponent);\nexport { MaterialTextareaSAComponent };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialTextareaSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'material-textarea',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [FormPipesModule, CastPipesModule, FormComponentControlSAPipe, ReactiveFormsModule, MatFormFieldModule, MatInputModule, TextFieldModule],\n      template: \"<mat-form-field [appearance]=\\\"options?.appearance|asRequired\\\">\\n    <mat-label>{{options?.label}}</mat-label>\\n    <textarea \\n        matInput \\n        cdkTextareaAutosize\\n        [attr.placeholder]=\\\"options?.placeholder\\\"\\n        [formControl]=\\\"control|asFormControl|asRequired\\\"></textarea>\\n    <mat-hint>{{options?.hint}}</mat-hint>\\n</mat-form-field>\",\n      styles: [\":host{display: block;}\"]\n    }]\n  }], null, null);\n})();","import { ComponentStylingExtension } from '@anglr/dynamic/layout';\nimport { RelationsRegistrationExtension } from '@anglr/dynamic/relations';\nimport { MaterialTextareaSAComponent } from './textarea.component';\nexport default MaterialTextareaSAComponent;\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","MaterialTextareaLayoutMetadataLoader","_ref","MaterialTextareaLayoutEditorMetadata","MaterialTextareaRelationsMetadataLoader","_ref2","MaterialTextareaRelationsEditorMetadata","CdkTextareaAutosize","constructor","_elementRef","_platform","_ngZone","document","_destroyed","Subject","_enabled","_previousMinRows","_isViewInited","_handleFocusEvent","event","_hasFocus","type","_document","_textareaElement","nativeElement","minRows","_minRows","coerceNumberProperty","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","coerceBooleanProperty","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","isBrowser","_initialHeight","height","runOutsideAngular","window","_getWindow","fromEvent","pipe","auditTime","takeUntil","subscribe","addEventListener","ngOnDestroy","removeEventListener","next","complete","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","remove","_measureScrollHeight","element","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","classList","add","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","i0","DOCUMENT","MaterialTextareaSAComponent","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","options","appearance","label","control","hint","dependencies","i","styles","changeDetection","extensions"],"sourceRoot":""}