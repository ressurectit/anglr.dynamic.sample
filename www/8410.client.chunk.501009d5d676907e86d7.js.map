{"version":3,"file":"8410.client.chunk.501009d5d676907e86d7.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../../../form/src/dynamicItems/formGroup/formGroup.metadata.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/form/src/dynamicItems/formGroup/formGroup.component.html","webpack://ng-universal-demo/../../../form/src/dynamicItems/formGroup/formGroup.component.ts","webpack://ng-universal-demo/../../../form/src/dynamicItems/formGroup/type.ts","webpack://ng-universal-demo/../../../form/src/misc/tokens.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {FormGroupComponentOptions} from './formGroup.options';\n\n/**\n * Form group layout metadata loader\n */\nexport const FormGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormGroupComponentOptions>> = async () => new (await import('./metadata/formGroup.layoutMetadata')).FormGroupLayoutEditorMetadata();\n",null,"import {Component, ChangeDetectionStrategy, Injector, ValueProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {FormGroupLayoutMetadataLoader} from './formGroup.metadata';\nimport {FormGroupComponentOptions} from './formGroup.options';\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentBase} from '../../components';\n\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'form-group',\n    templateUrl: 'formGroup.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(FormGroupLayoutMetadataLoader)\nexport class FormGroupSAComponent extends FormComponentBase<FormGroupComponentOptions> implements LayoutComponent<FormGroupComponentOptions>\n{\n    //######################### protected properties #########################\n\n    protected _formInjector?: Injector;\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected override onInit(): PromiseOr<void>\n    {\n        this._formInjector = Injector.create(\n            {\n                parent: this.injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: FORM_COMPONENT_CONTROL,\n                        useValue: this.options?.controlName ? this._parentControl?.get(this.options.controlName) : null,\n                    }\n                ]\n            }\n        );\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {FormGroupSAComponent} from './formGroup.component';\n\nexport default FormGroupSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","control","FormControl","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","i0","FORM_COMPONENT_CONTROL","LOGGER","__decorate","DynamicOutput","FormGroupLayoutMetadataLoader","FormGroupLayoutEditorMetadata","FormGroupSAComponent","onInit","_formInjector","Injector","parent","injector","providers","provide","useValue","get","CommonModule","i1","LayoutComponentRendererSADirective","LayoutEditorMetadata","extensions","ComponentStylingExtension","InjectionToken","metadataLoader","DynamicClassMetadata","changeDetector","componentElement","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","target","propertyKey","prop","Object","defineProperty","Subject","set","next","metadata","instance"],"sourceRoot":""}