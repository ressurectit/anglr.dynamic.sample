{"version":3,"file":"1735.client.chunk.6ecd1c3322517f1d092e.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../relations/src/directives/scopedRelations/scopedRelations.directive.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/listBlock/listBlock.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/listBlock/listBlock.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/listBlock/misc/directives/listBlockScopeRelations/listBlockScopeRelations.directive.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/listBlock/listBlock.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/listBlock/listBlock.component.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/listBlock/extensions/listBlockData.extension.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/listBlock/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Directive, FactoryProvider, Inject, inject, Injector, OnDestroy} from '@angular/core';\nimport {SCOPE_ID} from '@anglr/dynamic';\n\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Creates scoped relations component manager and processor\n */\n@Directive(\n{\n    selector: '[scopedRelations]',\n    standalone: true,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(RelationsComponentManager, {skipSelf: true}).openScope(inject(SCOPE_ID))\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(RelationsProcessor, {skipSelf: true}).openScope(inject(SCOPE_ID), inject(RelationsComponentManager), inject(Injector))\n        }\n    ],\n})\nexport class ScopedRelationsSADirective implements OnDestroy\n{\n    //######################### constructor #########################\n    constructor(protected componentManager: RelationsComponentManager,\n                protected relationsProcessor: RelationsProcessor,\n                @Inject(SCOPE_ID) protected scopeId: string,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.componentManager.ngOnDestroy();\n        this.relationsProcessor.destroyScope();\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {ListBlockComponentOptions} from './listBlock.options';\n\n/**\n * List block layout metadata loader\n */\nexport const ListBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ListBlockComponentOptions>> = async () => new (await import('./metadata/listBlock.layoutMetadata')).ListBlockLayoutEditorMetadata();\n\n/**\n * List block relations metadata loader\n */\nexport const ListBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/listBlock.relationsMetadata')).ListBlockRelationsEditorMetadata();\n\n/**\n * List block layout designer type loader\n */\nexport const ListBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/listBlockDesigner.component')).ListBlockDesignerSAComponent;\n","import {Directive} from '@angular/core';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\n\nimport {ListBlockRelationsOptions} from './listBlock.options';\n\n/**\n * List block scoped relations component\n */\n@Directive()\nexport class ListBlockRelations<TDatum = any> implements RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @DynamicOutput()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @DynamicOutput()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @DynamicOutput()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @DynamicOutput()\n    public last: boolean = false;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}\n","import {Directive, inject, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelations} from '../../../listBlock.relations';\n\n/**\n * Directive that creates list block scoped relations component\n */\n@Directive(\n{\n    selector: '[listBlockScope]',\n    standalone: true,\n})\nexport class ListBlockScopeRelationsSADirective<TDatum = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Instance of relations component manager\n     */\n    protected componentManager: RelationsComponentManager = inject(RelationsComponentManager);\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor = inject(RelationsProcessor);\n\n    /**\n     * Instance of relations component\n     */\n    protected relations: ListBlockRelations = new ListBlockRelations();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @Input()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @Input()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @Input()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @Input()\n    public last: boolean = false;\n\n    /**\n     * Id of component that is being created\n     */\n    @Input()\n    public componentId: string = '';\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<ListBlockScopeRelationsSADirective>('componentId') in changes && !this.initialized && this.componentId)\n        {\n            this.initialized = true;\n\n            this.componentManager.registerComponent(this.componentId, this.relations);\n            await this.relationsProcessor.initialized;\n            this.relationsProcessor.updateRelations(this.componentId);\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('datum') in changes)\n        {\n            this.relations.datum = this.datum;\n        }\n        \n        if(nameof<ListBlockScopeRelationsSADirective>('index') in changes)\n        {\n            this.relations.index = this.index;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('first') in changes)\n        {\n            this.relations.first = this.first;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('last') in changes)\n        {\n            this.relations.last = this.last;\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.relationsProcessor.destroyComponent(this.componentId);\n        this.componentManager.unregisterComponent(this.componentId);\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent, ScopedRelationsSADirective} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from './listBlock.options';\nimport {ListBlockLayoutDesignerTypeLoader, ListBlockLayoutMetadataLoader, ListBlockRelationsMetadataLoader} from './listBlock.metadata';\nimport {ListBlockScopeRelationsSADirective} from './misc/directives';\n\n/**\n * Component used for displaying list block\n */\n@Component(\n{\n    selector: 'list-block',\n    templateUrl: 'listBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n        ScopedRelationsSADirective,\n        ListBlockScopeRelationsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(ListBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(ListBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(ListBlockLayoutMetadataLoader)\nexport class ListBlockSAComponent<TDatum = any> extends LayoutComponentBase<ListBlockComponentOptions> implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Id of current component\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of data to be rendered in for cycle\n     */\n    @Input()\n    public data: Array<TDatum> = [];\n\n    //######################### public methods #########################\n\n    /**\n     * Sets id of custom component\n     * @param id - Id of custom component\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ListBlockSAComponent} from '../listBlock.component';\nimport {ListBlockDataExtensionOptions} from '../listBlockExtensions.options';\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class ListBlockDataExtension extends DynamicItemExtensionBase<ListBlockDataExtensionOptions, ListBlockSAComponent> implements DynamicItemExtension<ListBlockDataExtensionOptions, ListBlockSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ListBlockDataExtension} from './extensions';\nimport {ListBlockSAComponent} from './listBlock.component';\n\nexport default ListBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension, ListBlockDataExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ScopedRelationsSADirective","constructor","componentManager","relationsProcessor","scopeId","ngOnDestroy","this","destroyScope","i1","SCOPE_ID","provide","RelationsComponentManager","useFactory","inject","skipSelf","openScope","RelationsProcessor","Injector","ListBlockLayoutMetadataLoader","ListBlockLayoutEditorMetadata","ListBlockRelationsMetadataLoader","ListBlockRelationsEditorMetadata","ListBlockLayoutDesignerTypeLoader","ListBlockDesignerSAComponent","ListBlockRelations","datum","index","first","last","invalidateVisuals","__decorate","DynamicOutput","ListBlockScopeRelationsSADirective","initialized","relations","componentId","ngOnChanges","changes","nameof","registerComponent","updateRelations","destroyComponent","unregisterComponent","ListBlockSAComponent","LayoutComponentBase","id","data","setId","CommonModule","LayoutComponentRendererSADirective","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","ListBlockDataExtension","DynamicItemExtensionBase","onInit","instance","metadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","changeDetector","componentElement","injector","logger","destroyed","element","extensionsOptions","options","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","detectChanges","_changes","i0","LOGGER","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","target","propertyKey","prop","Object","defineProperty","get","Subject","set","value","next"],"sourceRoot":""}