{"version":3,"file":"8410.client.chunk.8136b1e8749519ee8769.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../../../form/src/dynamicItems/formGroup/formGroup.metadata.ts","webpack://ng-universal-demo/../../../form/src/dynamicItems/formGroup/formGroup.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/form/src/dynamicItems/formGroup/formGroup.component.html","webpack://ng-universal-demo/../../../form/src/dynamicItems/formGroup/type.ts","webpack://ng-universal-demo/../../../form/src/misc/tokens.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {FormGroupComponentOptions} from './formGroup.options';\n\n/**\n * Form group layout metadata loader\n */\nexport const FormGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormGroupComponentOptions>> = async () => new (await import('./metadata/formGroup.layoutMetadata')).FormGroupLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Injector, ValueProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {FormGroupLayoutMetadataLoader} from './formGroup.metadata';\nimport {FormGroupComponentOptions} from './formGroup.options';\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentBase} from '../../components';\n\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'form-group',\n    templateUrl: 'formGroup.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<FormGroupComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(FormGroupLayoutMetadataLoader)\nexport class FormGroupSAComponent extends FormComponentBase<FormGroupComponentOptions> implements LayoutComponent<FormGroupComponentOptions>\n{\n    //######################### protected properties #########################\n\n    protected _formInjector?: Injector;\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected override onInit(): PromiseOr<void>\n    {\n        this._formInjector = Injector.create(\n            {\n                parent: this.injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: FORM_COMPONENT_CONTROL,\n                        useValue: this.options?.controlName ? this._parentControl?.get(this.options.controlName) : null,\n                    }\n                ]\n            }\n        );\n    }\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {FormGroupSAComponent} from './formGroup.component';\n\nexport default FormGroupSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","value","oldValue","this","valueOutput","control","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","FormControl","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","FORM_COMPONENT_CONTROL","LOGGER","__decorate","DynamicOutput","FormGroupLayoutMetadataLoader","FormGroupLayoutEditorMetadata","FormGroupSAComponent","onInit","_formInjector","Injector","parent","injector","providers","provide","useValue","get","CommonModule","LayoutComponentRendererSADirective","DescendantsGetter","children","LayoutEditorMetadata","extensions","ComponentStylingExtension","InjectionToken","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","target","propertyKey","prop","Object","defineProperty","Subject","set","defineAssignedProp","sync","next","ɵɵinjector","componentManager","RelationsComponentManager","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp","metadata","instance"],"sourceRoot":""}