{"version":3,"file":"5061.client.chunk.bf038a461b99b99bdb32.js","mappings":"qXAMO,MAAMA,EAAiC,e,EAAA,G,EAA6D,mBAAY,WAAW,mEAAmDC,kCAA1E,E,+KAA7D,qDCQ9C,IAAaC,EAAb,MAgDIC,YAAYC,GAHL,KAAAC,QAAsB,CAAC,EAK1BC,KAAKC,mBAAqBH,EAASI,IAAIC,EAAAA,GACvCH,KAAKI,0BAA4BN,EAASI,IAAIG,EAAAA,EACjD,CAvBUC,uBAEP,OAAON,KAAKO,iBACf,CACUD,qBAAiBE,GAExBR,KAAKO,kBAAoBC,EAEzBR,KAAKS,YACR,CAqBMC,YAAYC,GAEXX,KAAKM,mBAKNN,KAAKM,iBAAiBM,aAElBC,EAAAA,EAAAA,GAA4B,aAAcF,GAEzCX,KAAKc,YAKNd,KAAKe,SAEJC,aAAahB,KAAKe,SAGtBf,KAAKe,QAAUE,YAAW,IAAMjB,KAAKc,YAAYd,KAAKM,iBAAiBY,aAAe,IAE7F,CAKMC,oBAEN,CAOSV,aAEN,GAAGT,KAAKM,kBAEDN,KAAKM,iBAAiBc,gBAAkBC,MAAMC,QAAQtB,KAAKM,iBAAiBc,gBAE3E,IAAI,MAAMG,KAAYvB,KAAKM,iBAAiBc,eAExCI,OAAOC,eAAezB,KACAuB,EACA,CACIG,cAAc,EACdC,YAAY,EACZC,UAAU,EACVpB,MAAO,OAGjCgB,OAAOC,eAAezB,KACA,GAAGuB,UACH,CACIG,cAAc,EACdC,YAAY,EACZC,UAAU,EACVpB,MAAOqB,EAAAA,GAKhD,CAKSf,WAEN,MAAMgB,EAAK9B,KAAKI,0BAA0B2B,MAAM/B,OAE7CgC,EAAAA,EAAAA,IAAUF,IAET9B,KAAKC,mBAAmBgC,oBAAoBH,GAAI,EAEvD,GAzIQlC,GAAmB,UAF/BsC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBzC,IACO,6BAgDN0C,EAAAA,KAhDbxC,GCZb,S","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/syncValues.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/syncValues.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Sync values relations metadata loader\n */\nexport const SyncValuesRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/syncValues.relationsMetadata')).SyncValuesRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {PureRelationsComponent, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {NEVER} from 'rxjs';\n\nimport {SyncValuesRelationsMetadataLoader} from './syncValues.metadata';\nimport {SyncValuesRelationsOptions} from './syncValues.options';\n\n/**\n * Sync values relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(SyncValuesRelationsMetadataLoader)\nexport class SyncValuesRelations implements RelationsComponent<SyncValuesRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: SyncValuesRelationsOptions|undefined|null;\n\n    /**\n     * Current relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor;\n\n    /**\n     * Current relations component manager instance\n     */\n    protected relationsComponentManager: RelationsComponentManager;\n\n    /**\n     * Timeout reference\n     */\n    protected timeout: number|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): SyncValuesRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: SyncValuesRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Trigger object\n     */\n    public trigger: VoidObject = {};\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.relationsProcessor = injector.get(RelationsProcessor);\n        this.relationsComponentManager = injector.get(RelationsComponentManager);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(!this.relationsOptions)\n        {\n            return;\n        }\n\n        if(this.relationsOptions.triggerSync)\n        {\n            if(nameof<SyncValuesRelations>('trigger') in changes)\n            {\n                this.sendData();\n            }\n        }\n        else\n        {\n            if(this.timeout)\n            {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout(() => this.sendData(), this.relationsOptions.idleTimeout ?? 0) as any;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.syncProperties && Array.isArray(this.relationsOptions.syncProperties))\n            {\n                for(const property of this.relationsOptions.syncProperties)\n                {\n                    Object.defineProperty(this,\n                                          property,\n                                          {\n                                              configurable: true,\n                                              enumerable: true,\n                                              writable: true,\n                                              value: null,\n                                          });\n\n                    Object.defineProperty(this,\n                                          `${property}Change`,\n                                          {\n                                              configurable: true,\n                                              enumerable: true,\n                                              writable: true,\n                                              value: NEVER,\n                                          });\n                }\n            }\n        }\n    }\n\n    /**\n     * Sends output data\n     */\n    protected sendData(): void\n    {\n        const id = this.relationsComponentManager.getId(this);\n\n        if(isPresent(id))\n        {\n            this.relationsProcessor.transferOutputsData(id, false);\n        }\n    }\n}","import {SyncValuesRelations} from './syncValues.relations';\n\nexport default SyncValuesRelations;"],"names":["SyncValuesRelationsMetadataLoader","SyncValuesRelationsEditorMetadata","SyncValuesRelations","constructor","injector","trigger","this","relationsProcessor","get","RelationsProcessor","relationsComponentManager","RelationsComponentManager","relationsOptions","ɵRelationsOptions","value","initialize","ngOnChanges","changes","triggerSync","nameof","sendData","timeout","clearTimeout","setTimeout","idleTimeout","invalidateVisuals","syncProperties","Array","isArray","property","Object","defineProperty","configurable","enumerable","writable","NEVER","id","getId","isPresent","transferOutputsData","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}