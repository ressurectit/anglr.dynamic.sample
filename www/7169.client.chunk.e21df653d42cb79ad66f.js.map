{"version":3,"file":"7169.client.chunk.e21df653d42cb79ad66f.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+dynamicContent/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/layout/layout.component.html","webpack://ng-universal-demo/./app/pages/+dynamicContent/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+dynamicContent/misc/services/resolverStaticRegister/resolverStaticRegister.service.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/resolverRelations/resolverRelations.component.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/resolverRelations/resolverRelations.component.html","webpack://ng-universal-demo/./app/pages/+dynamicContent/dynamicContent.routes.ts","webpack://ng-universal-demo/./app/pages/+dynamicContent/dynamicContent.module.ts","webpack://ng-universal-demo/./app/services/sampleCustomComponentsRegister/sampleCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/sampleLayoutPackageManager/sampleLayoutPackageManager.service.ts","webpack://ng-universal-demo/./app/services/sampleRelationsPackageManager/sampleRelationsPackageManager.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, FactoryProvider, ClassProvider, ExistingProvider, OnInit, Inject} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutEditor, REFRESH_PALETTE_OBSERVABLES} from '@anglr/dynamic/layout-editor';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {CustomComponentsRegister, provideEditorLayoutCustomComponents} from '@anglr/dynamic/layout-relations';\nimport {provideBasicLayoutEditor, StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {generateId} from '@jscrpt/common';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {SampleCustomComponentsRegister} from '../../../services/sampleCustomComponentsRegister';\nimport {SampleLayoutPackageManager} from '../../../services/sampleLayoutPackageManager/sampleLayoutPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutEditor} from '../../../dynamicItems/utils';\n\n/**\n * Component used for displaying layout editor\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'layout.component.html',\n    styleUrls: ['layout.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout ?? null),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideBasicLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideSampleLayoutEditor(),\n        provideEditorLayoutCustomComponents([], SampleCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: SampleLayoutPackageManager,\n        },\n        <ExistingProvider>\n        {\n            provide: SampleCustomComponentsRegister,\n            useExisting: CustomComponentsRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (register: SampleCustomComponentsRegister) => register.registeredChange,\n            deps: [SampleCustomComponentsRegister],\n            multi: true,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'layout/:id'})\n@Authorize('layoutEditor-page')\nexport class LayoutComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of layout template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: LayoutComponentMetadata|null = this.emptyMetadata;\n\n    /**\n     * Gets empty metadata\n     */\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `root-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [] as LayoutComponentMetadata[],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<LayoutComponentMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            this.metadata = this._store.getData(this._id)?.layout ?? this.emptyMetadata;\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.layout = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n}","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<layout-editor class=\"flex-1\" [metadata]=\"metadata\"></layout-editor>","import {Component, ChangeDetectionStrategy, OnInit, Inject, FactoryProvider, ClassProvider} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, MetadataStorage, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideRestLayoutRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {provideBasicLayoutRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutRelationsEditor} from '@anglr/dynamic/material-components';\nimport {LayoutManager, provideEditorRelationsCustomComponents, provideLayoutRelationsEditor} from '@anglr/dynamic/layout-relations';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {SampleCustomComponentsRegister} from '../../../services/sampleCustomComponentsRegister';\nimport {SampleRelationsPackageManager} from '../../../services/sampleRelationsPackageManager/sampleRelationsPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleLayoutRelationsEditor} from '../../../dynamicItems/utils';\n\n/**\n * Component used for displaying relations editor\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relations.component.html',\n    styleUrls: ['relations.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations ?? []),\n            deps: [StoreDataService]\n        },\n        provideBasicLayoutRelationsEditor(),\n        provideMaterialLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideRestLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideSampleLayoutRelationsEditor(),\n        provideEditorRelationsCustomComponents(provideLayoutRelationsEditor(), SampleCustomComponentsRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: SampleRelationsPackageManager,\n        },\n        createStoreDataServiceFactory('DYNAMIC_CONTENT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'relations/:id'})\n@Authorize('relationsEditor-page')\nexport class RelationsComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of relations template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<RelationsNodeMetadata[]>,\n                private layoutManager: LayoutManager,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            const metadata = this._store.getData(this._id);\n            this.metadata = metadata?.relations ?? [];\n\n            if(metadata?.layout)\n            {\n                this.layoutManager.setLayout(metadata?.layout);\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._store.getData(this._id) ?? {};\n        metadata.relations = this._metaManager.getMetadata() ?? undefined;\n        \n        this._store.setData(this._id, metadata);\n    }\n}\n","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport DynamicDataResolverRelations from '../../../../../dynamicItems/dynamicDataResolver/type';\nimport ActivatedRouteSnapshotRelations from '../../../../../dynamicItems/activatedRouteSnapshot/type';\n\n/**\n * Static components register for resolver relations\n */\n@Injectable()\nexport class ResolverStaticRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        result[DynamicDataResolverRelations.relationsId] = DynamicDataResolverRelations;\n        result[ActivatedRouteSnapshotRelations.relationsId] = ActivatedRouteSnapshotRelations;\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy, OnInit, Inject, ClassProvider} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {ComponentRouteAuthorized, Authorize} from '@anglr/authentication';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, METADATA_STATE_MANAGER, PackageManager} from '@anglr/dynamic';\nimport {provideRelationsEditorWithStatic, RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {provideHandlebarsRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideRestRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideTinyMceRelationsEditor} from '@anglr/dynamic/tinymce-components';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {SampleRelationsPackageManager} from '../../../services/sampleRelationsPackageManager/sampleRelationsPackageManager.service';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\nimport {provideSampleRelationsEditor} from '../../../dynamicItems/utils';\nimport {ResolverStaticRegister} from '../misc';\n\n/**\n * Component used for displaying resolver relations editor\n */\n@Component(\n{\n    selector: 'resolver-relations-editor-view',\n    templateUrl: 'resolverRelations.component.html',\n    styleUrls: ['resolverRelations.component.scss'],\n    providers:\n    [\n        EditorHotkeys,\n        provideHandlebarsRelationsEditor(),\n        provideRestRelationsEditor(),\n        provideTinyMceRelationsEditor(),\n        provideSampleRelationsEditor(),\n        provideRelationsEditorWithStatic(ResolverStaticRegister),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: SampleRelationsPackageManager,\n        },\n        createStoreDataServiceFactory('RESOLVER_RELATIONS_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRouteAuthorized({path: 'resolverRelations/:id'})\n@Authorize('resolverRelationsEditor-page')\nexport class ResolverRelationsComponent implements OnInit\n{\n    //######################### private fields #########################\n\n    /**\n     * Id of relations template\n     */\n    private _id: string = '';\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current metadata\n     */\n    protected metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(private _route: ActivatedRoute,\n                private _store: StoreDataService<RelationsNodeMetadata[]>,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<RelationsNodeMetadata[]>,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._route.params.subscribe(({id}) =>\n        {\n            this._id = id;\n\n            this.metadata = this._store.getData(this._id) ?? [];\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves current template\n     */\n    protected save(): void\n    {\n        const metadata = this._metaManager.getMetadata();\n        \n        if(metadata)\n        {\n            this._store.setData(this._id, metadata);\n        }\n    }\n}\n","<editor-controls [(metadata)]=\"metadata\" (save)=\"save()\" [history]=\"history\"></editor-controls>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {LayoutComponent} from './layout/layout.component';\nimport {RelationsComponent} from './relations/relations.component';\nimport {ResolverRelationsComponent} from './resolverRelations/resolverRelations.component';\n\nexport const components =\n[\n    LayoutComponent,\n    RelationsComponent,\n    ResolverRelationsComponent,\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './dynamicContent.routes';\nimport {EditorControlsSAComponent} from '../../components';\n\n/**\n * Module for dynamic content application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutRelationsEditorModule,\n        EditorControlsSAComponent,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class DynamicContentModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'CUSTOM_COMPONENTS';\n\n/**\n * Sample custom components register\n */\n@Injectable()\nexport class SampleCustomComponentsRegister extends CustomComponentsRegister\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds custom component by its template name\n     * @param name - Name of template to be added\n     */\n    public addCustomComponent(name: string): void\n    {\n        const customComponents = this.getRegisteredComponents();\n        const index = customComponents.indexOf(name);\n\n        if(index >= 0)\n        {\n            return;\n        }\n            \n        customComponents.push(name);\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    /**\n     * Removes custom component by its template name\n     * @param name - Name of template to be removed\n     */\n    public removeCustomComponent(name: string): void\n    {\n        const customComponents = this.getRegisteredComponents();\n        const index = customComponents.indexOf(name);\n\n        if(index < 0)\n        {\n            return;\n        }\n        \n        customComponents.splice(index, 1);\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Gets registered components\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return this._store.get<string[]|null>(CUSTOM_COMPONENTS) ?? [];\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for sample app\n */\n@Injectable()\nexport class SampleLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for sample app\n */\n@Injectable()\nexport class SampleRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}"],"names":["LayoutComponent","emptyMetadata","id","generateId","displayName","package","name","options","children","constructor","_route","_store","_metaManager","history","_id","metadata","this","ngOnInit","params","subscribe","getData","layout","save","getMetadata","undefined","setData","METADATA_STATE_MANAGER","LAYOUT_HISTORY_MANAGER","selectors","features","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","deps","StoreDataService","provideLayoutEditor","provideBasicLayoutEditor","provideMaterialLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideSampleLayoutEditor","provideEditorLayoutCustomComponents","SampleCustomComponentsRegister","PackageManager","useClass","SampleLayoutPackageManager","useExisting","CustomComponentsRegister","REFRESH_PALETTE_OBSERVABLES","register","registeredChange","multi","createStoreDataServiceFactory","decls","vars","consts","template","i0","ctx","ComponentRouteAuthorized","path","Authorize","ActivatedRoute","MetadataHistoryManager","RelationsComponent","layoutManager","relations","setLayout","RELATIONS_HISTORY_MANAGER","RELATIONS_METADATA_STORAGE","provideBasicLayoutRelationsEditor","provideMaterialLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideRestLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideSampleLayoutRelationsEditor","provideEditorRelationsCustomComponents","provideLayoutRelationsEditor","SampleRelationsPackageManager","LayoutManager","ResolverStaticRegister","Register","getDefinedTypes","result","DynamicDataResolverRelations","ActivatedRouteSnapshotRelations","factory","ResolverRelationsComponent","provideHandlebarsRelationsEditor","provideRestRelationsEditor","provideTinyMceRelationsEditor","provideSampleRelationsEditor","provideRelationsEditorWithStatic","components","DynamicContentModule","DynamicLayoutRelationsEditorModule","EditorControlsSAComponent","ModuleRoutes","CUSTOM_COMPONENTS","_registeredChange","asObservable","super","Subject","addCustomComponent","customComponents","getRegisteredComponents","indexOf","push","set","next","removeCustomComponent","index","splice","get","PERMANENT_STORAGE"],"sourceRoot":""}