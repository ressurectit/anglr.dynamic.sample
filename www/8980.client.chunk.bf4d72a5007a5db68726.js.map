{"version":3,"file":"8980.client.chunk.bf4d72a5007a5db68726.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/templateBlock/templateBlock.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/templateBlock/templateBlock.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/templateBlock/templateBlock.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/templateBlock/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\n\n/**\n * Template block layout metadata loader\n */\nexport const TemplateBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TemplateBlockComponentOptions>> = async () => new (await import('./metadata/templateBlock.layoutMetadata')).TemplateBlockLayoutEditorMetadata();\n\n/**\n * Template block layout designer type loader\n */\nexport const TemplateBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/templateBlockDesigner.component')).TemplateBlockDesignerSAComponent;","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\nimport {TemplateBlockLayoutDesignerTypeLoader, TemplateBlockLayoutMetadataLoader} from './templateBlock.metadata';\n\n/**\n * Component used for displaying template block\n */\n@Component(\n{\n    selector: 'template-block',\n    templateUrl: 'templateBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(TemplateBlockLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(TemplateBlockLayoutMetadataLoader)\nexport class TemplateBlockSAComponent extends LayoutComponentBase<TemplateBlockComponentOptions> implements LayoutComponent<TemplateBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onOptionsSet(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        const id = this.options?.layoutId;\n\n        if(!id)\n        {\n            return;\n        }\n\n        this.metadata = await this.layoutMetadataStorage.getMetadata(id);\n\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            const relations = await this.relationsMetadataStorage.getMetadata(id);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n    }\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockSAComponent} from './templateBlock.component';\n\nexport default TemplateBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["TemplateBlockLayoutMetadataLoader","TemplateBlockLayoutEditorMetadata","TemplateBlockLayoutDesignerTypeLoader","TemplateBlockDesignerSAComponent","TemplateBlockSAComponent","LayoutComponentBase","constructor","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","metadata","onOptionsSet","initialized","id","options","layoutId","getMetadata","relations","setRelations","RelationsComponentManager","RelationsProcessor","RelationsChangeDetector","LayoutComponentRendererSADirective","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","this","componentElement","extensionsOptions","changeDetector","injector","logger","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","instance"],"sourceRoot":""}