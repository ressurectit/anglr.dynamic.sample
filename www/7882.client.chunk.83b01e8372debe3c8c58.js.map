{"version":3,"file":"7882.client.chunk.83b01e8372debe3c8c58.js","mappings":"2YAMO,MAAMA,EAAkC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAoDC,mCAAoC,E,+KAAA,kBAA5K,mCCQxC,IAAMC,EAAN,MAwBQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EAEzBF,KAAKG,YACT,CAWAC,YAAYC,GAERL,KAAKM,wBAA0BD,EAASE,IAAIC,EAAAA,GAC5CR,KAAKS,0BAA4BJ,EAASE,IAAIG,EAAAA,EAClD,CAOOC,YAAYC,GAEf,IAAGC,EAAAA,EAAAA,GAA6B,YAAaD,GAEtCZ,KAAKD,kBAAkBe,WAAWC,OACrC,CACI,MAAMC,EAAKhB,KAAKS,0BAA0BQ,MAAMjB,MAEhD,IAAI,MAAMkB,KAAYlB,KAAKD,iBAAiBe,WAEjBd,KAERkB,EAASC,MAAQnB,KAAKoB,SAASF,EAASC,OAEpDE,EAAAA,EAAAA,IAAUL,IAEThB,KAAKM,wBAAwBgB,aAC7B,CACIC,YAAaP,EACbQ,WAAYN,EAASC,M,CAM7C,CAOOM,oBAEP,CAOUtB,aAEN,GAAGH,KAAKD,kBAEDC,KAAKD,iBAAiBe,WAAWC,OAEhC,IAAI,MAAMG,KAAYlB,KAAKD,iBAAiBe,WAErCI,EAASC,OAERO,OAAOC,eAAe3B,KACAkB,EAASC,KACT,CACIZ,IAAK,WAED,OAAOP,KAAK,IAAIkB,EAASC,OAC7B,EACAS,IAAK,SAAS1B,GAEVF,KAAK,IAAIkB,EAASC,QAAUjB,GAC5B2B,EAAAA,EAAAA,IAAmB7B,KAAMkB,EAASC,KACtC,IAG1BO,OAAOC,eAAe3B,KACA,GAAGkB,EAASC,aACZ,CACIjB,MAAO4B,EAAAA,IAG9BZ,EAASa,WAERC,EAAAA,EAAAA,IAAmBhC,KAAMkB,EAASC,MAM1D,IA9FAc,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,OAAO,4DAxCCpC,GAAoB,UAFhCqC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBxC,IAAmC,6BA6ClCyC,EAAAA,KA5CbvC,GCZb,S","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/deconstruct/deconstruct.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/deconstruct/deconstruct.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/deconstruct/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Deconstruct relations metadata loader\n */\nexport const DeconstructRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/deconstruct.relationsMetadata')).DeconstructRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, PureRelationsComponent, RelationsChangeDetector, RelationsComponent, RelationsComponentManager} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary, isPresent, nameof} from '@jscrpt/common';\nimport {NEVER} from 'rxjs';\n\nimport {DeconstructRelationsMetadataLoader} from './deconstruct.metadata';\nimport {DeconstructRelationsOptions} from './deconstruct.options';\n\n/**\n * Deconstruct relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(DeconstructRelationsMetadataLoader)\nexport class DeconstructRelations<TObj extends Dictionary = Dictionary> implements RelationsComponent<DeconstructRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: DeconstructRelationsOptions|undefined|null;\n\n    /**\n     * Current relations change detector instance\n     */\n    protected relationsChangeDetector: RelationsChangeDetector;\n\n    /**\n     * Current relations component manager instance\n     */\n    protected relationsComponentManager: RelationsComponentManager;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): DeconstructRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: DeconstructRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Initial state value that is set\n     */\n    @Input()\n    public object: TObj|undefined|null;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.relationsChangeDetector = injector.get(RelationsChangeDetector);\n        this.relationsComponentManager = injector.get(RelationsComponentManager);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DeconstructRelations>('object') in changes)\n        {\n            if(this.relationsOptions?.properties.length)\n            {\n                const id = this.relationsComponentManager.getId(this);\n\n                for(const property of this.relationsOptions.properties)\n                {\n                    const thisDictionary = this as Dictionary;\n\n                    thisDictionary[property.name] = this.object?.[property.name];\n\n                    if(isPresent(id))\n                    {\n                        this.relationsChangeDetector.markForCheck(\n                        {\n                            componentId: id,\n                            outputName: property.name,\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.properties.length)\n            {\n                for(const property of this.relationsOptions.properties)\n                {\n                    if(property.name)\n                    {\n                        Object.defineProperty(this,\n                                              property.name,\n                                              {\n                                                  get: function()\n                                                  {\n                                                      return this[`ɵ${property.name}`];\n                                                  },\n                                                  set: function(value)\n                                                  {\n                                                      this[`ɵ${property.name}`] = value;\n                                                      defineAssignedProp(this, property.name);\n                                                  }\n                                              });\n\n                        Object.defineProperty(this,\n                                              `${property.name}Change`,\n                                              {\n                                                  value: NEVER,\n                                              });\n\n                        if(property.skipInit)\n                        {\n                            defineSkipInitProp(this, property.name);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}","import {DeconstructRelations} from './deconstruct.relations';\n\nexport default DeconstructRelations;"],"names":["DeconstructRelationsMetadataLoader","DeconstructRelationsEditorMetadata","DeconstructRelations","relationsOptions","this","ɵRelationsOptions","value","initialize","constructor","injector","relationsChangeDetector","get","RelationsChangeDetector","relationsComponentManager","RelationsComponentManager","ngOnChanges","changes","nameof","properties","length","id","getId","property","name","object","isPresent","markForCheck","componentId","outputName","invalidateVisuals","Object","defineProperty","set","defineAssignedProp","NEVER","skipInit","defineSkipInitProp","__decorate","Input","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}