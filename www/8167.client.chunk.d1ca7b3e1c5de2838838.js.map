{"version":3,"file":"8167.client.chunk.d1ca7b3e1c5de2838838.js","mappings":"yUAMO,MAAMA,EAAmC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAqDC,oCAAqC,E,+KAAA,kBAA9K,mCCOzC,IAAMC,EAAN,MAkCIC,YAAYC,KAEZC,EAAAA,EAAAA,GAA8B,WAAYD,IAAWC,EAAAA,EAAAA,GAA8B,WAAYD,KAE3FE,KAAKC,MAEJD,KAAKE,KAAOF,KAAKC,MAEbD,KAAKG,QAETH,KAAKE,KAAOF,KAAKG,OAG7B,CAKOC,oBAEP,IA5BAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,0DA1BPV,GAAqB,UAFjCW,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBd,IACZE,GCXb,S,mFCWM,SAAUU,EAAcG,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIG,IAAK,WAOD,OALIf,KAAK,IAAIY,aAETZ,KAAK,IAAIY,WAAgB,IAAII,EAAAA,GAG1BhB,KAAK,IAAIY,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIG,IAAK,WAED,OAAOf,KAAK,IAAIY,IACpB,EACAK,IAAK,SAASC,GAKV,GAHAlB,KAAK,IAAIY,KAAUM,GACnBC,EAAAA,EAAAA,IAAmBnB,KAAMY,GAEtBH,GAASW,KAERpB,KAAK,GAAGY,WAAcS,WAG1B,CACI,MAAMC,EAAYtB,KAA+BuB,WAEjD,IAAID,EAEA,OAGJ,MAAME,EAAmBF,EAASP,IAAIU,EAAAA,GAChCC,EAAiBJ,EAASP,IAAIY,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAM7B,MAElC,IAAI4B,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYpB,G,CAGxB,IAGvBH,GAASwB,WAERC,EAAAA,EAAAA,IAAmBxB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/firstNonNull/firstNonNull.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/firstNonNull/firstNonNull.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/firstNonNull/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * First non null relations metadata loader\n */\nexport const FirstNonNullRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/firstNonNull.relationsMetadata')).FirstNonNullRelationsEditorMetadata();\n","import {SimpleChanges} from '@angular/core';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {FirstNonNullRelationsMetadataLoader} from './firstNonNull.metadata';\nimport {FirstNonNullRelationsOptions} from './firstNonNull.options';\n\n/**\n * First non null relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(FirstNonNullRelationsMetadataLoader)\nexport class FirstNonNullRelations implements RelationsComponent<FirstNonNullRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: FirstNonNullRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n    \n    /**\n     * First data to be cheched\n     */\n    public data1: unknown;\n\n    /**\n     * Next data to be checked\n     */\n    public data2: unknown;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Resulting data\n     */\n    @DynamicOutput()\n    public data: unknown;\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<FirstNonNullRelations>('data1') in changes || nameof<FirstNonNullRelations>('data2') in changes)\n        {\n            if(this.data1)\n            {\n                this.data = this.data1;\n            }\n            else if(this.data2)\n            {\n                this.data = this.data2;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {FirstNonNullRelations} from './firstNonNull.relations';\n\nexport default FirstNonNullRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["FirstNonNullRelationsMetadataLoader","FirstNonNullRelationsEditorMetadata","FirstNonNullRelations","ngOnChanges","changes","nameof","this","data1","data","data2","invalidateVisuals","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","options","target","propertyKey","prop","Object","defineProperty","get","Subject","set","value","defineAssignedProp","sync","next","injector","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}