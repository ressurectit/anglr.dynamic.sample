{"version":3,"file":"5895.client.chunk.0ea1a750b81a19e9df72.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/misc/components/configureRestParameter/configureRestParameter.model.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/misc/components/configureRestParameter/configureRestParameter.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/rest-components/src/dynamicItems/rest/misc/components/configureRestParameter/configureRestParameter.component.html","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/node/restNode.model.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/node/restNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/rest-components/src/dynamicItems/rest/node/restNode.component.html","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/metadata/rest.relationsMetadata.ts","webpack://ng-universal-demo/../../../packages/common/src/directives/ng_switch.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RestParam} from '../../interfaces';\nimport {ParamType} from '../../types';\n\n/**\n * Rest param model\n */\nexport class RestParamModel implements RestParam\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public type: ParamType = 'PATH';\n\n    /**\n     * @inheritdoc\n     */\n    public configurable: boolean = false;\n\n    /**\n     * @inheritdoc\n     */\n    public value: any;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RestParam|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ConfigureRestParameterData} from './configureRestParameter.interface';\nimport {RestParam} from '../../interfaces';\nimport {RestParamModel} from './configureRestParameter.model';\n\n/**\n * Component used for displaying configuration of rest parameters\n */\n@Component(\n{\n    selector: 'configure-rest-parameter',\n    templateUrl: 'configureRestParameter.component.html',\n    // styleUrls: ['configureRestParameter.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureRestParameterSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<RestParam>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureRestParameterData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<RestParam>(new RestParamModel(data.parameter));\n        this.form.valueChanges.subscribe(value => extend(data.parameter, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.parameter.value) ? JSON.stringify(this.data.parameter.value, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.parameter.value = getJson(result.content);\n        }\n    }\n}",null,"import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RestParam} from '../misc/interfaces';\nimport {MethodType} from '../misc/types';\nimport {RestRelationsOptions} from '../rest.options';\n\n/**\n * Rest relations options model\n */\nexport class RestRelationsOptionsModel implements RestRelationsOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public url: string|undefined|null = '';\n\n    /**\n     * @inheritdoc\n     */\n    public method: MethodType|undefined|null = 'GET';\n\n    /**\n     * @inheritdoc\n     */\n    public runImmediately: boolean|undefined|null = true;\n\n    /**\n     * @inheritdoc\n     */\n    public params: RestParam[]|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(value: RestRelationsOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {extend} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ConfigureRestParameterData, ConfigureRestParameterSAComponent} from '../misc/components';\nimport {RestRelationsOptions} from '../rest.options';\nimport {RestParam} from '../misc/interfaces';\nimport {RestRelationsOptionsModel} from './restNode.model';\n\n/**\n * Relations node component for rest\n */\n@Component(\n{\n    selector: 'rest-node',\n    templateUrl: 'restNode.component.html',\n    // styleUrls: ['negationNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RestNodeSAComponent extends RelationsNodeBase<RestRelationsOptions> implements RelationsNode<RestRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets rest parameters\n     */\n    protected get params(): RestParam[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            params: [],\n            url: null,\n            method: null,\n            runImmediately: true,\n        };\n\n        return (this.metadata.relationsOptions.params ??= []);\n    }\n\n    /**\n     * Instance of form that is being used\n     */\n    protected form: FormGroup<FormModelGroup<RestRelationsOptions>>;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n        super(changeDetector, element);\n\n        this.form = formModelBuilder.build<RestRelationsOptions>(new RestRelationsOptionsModel(null));\n        this.form.valueChanges.subscribe(value =>\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                extend(this.metadata.relationsOptions, value);\n                this.history.getNewState();\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new parameter\n     */\n    protected async addParam(): Promise<void>\n    {\n        const param: RestParam = \n        {\n            configurable: false,\n            name: null,\n            type: 'PATH',\n            value: null,\n        };\n\n        if(await this.configureRestParameter(param))\n        {\n            this.params.push(param);\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Removes parameter\n     * @param param - Param to be removed\n     */\n    protected removeParam(param: RestParam): void\n    {\n        const index = this.params.indexOf(param);\n\n        if(index >= 0)\n        {\n            this.params.splice(index, 1);\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Configures rest parameter\n     * @param param - Parameter to be configured\n     */\n    protected async configureRestParameter(param: RestParam): Promise<boolean>\n    {\n        const original = JSON.parse(JSON.stringify(param));\n        \n        const result = await lastValueFrom(this.dialog.open<ConfigureRestParameterSAComponent, ConfigureRestParameterData, true|undefined|null>(ConfigureRestParameterSAComponent,\n        {\n            title: 'configure rest parameter',\n            width: '60vw',\n            data:\n            {\n                parameter: param,\n                hasBody: param.type === 'BODY' ? false : !!this.params.find(itm => itm.type === 'BODY')\n            }\n        }).afterClosed());\n\n        if(!result)\n        {\n            extend(param, original);\n        }\n        else\n        {\n            this.history.getNewState();\n        }\n\n        return result ?? false;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        this.form.patchValue(this.metadata.relationsOptions);\n    }\n}",null,"import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {RestNodeSAComponent} from '../node/restNode.component';\n\n/**\n * Rest relations metadata\n */\nexport class RestRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Rest',\n        description: 'Restfull requests',\n        group: 'Http',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = RestNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, Optional, TemplateRef, ViewContainerRef, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Structural Directives](guide/structural-directives)\n *\n */\n@Directive({\n  selector: '[ngSwitch]',\n  standalone: true,\n})\nexport class NgSwitch {\n  private _defaultViews: SwitchView[] = [];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number {\n    return this._caseCount++;\n  }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (const defaultView of this._defaultViews) {\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\n@Directive({\n  selector: '[ngSwitchCase]',\n  standalone: true,\n})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n  /**\n   * Stores the HTML template to be selected on match.\n   */\n  @Input() ngSwitchCase: any;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() private ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');\n    }\n\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  /**\n   * Performs case matching. For internal use only.\n   * @nodoc\n   */\n  ngDoCheck() {\n    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\n@Directive({\n  selector: '[ngSwitchDefault]',\n  standalone: true,\n})\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');\n    }\n\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n\nfunction throwNgSwitchProviderNotFoundError(attrName: string, directiveName: string): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.PARENT_NG_SWITCH_NOT_FOUND,\n      `An element with the \"${attrName}\" attribute ` +\n          `(matching the \"${\n              directiveName}\" directive) must be located inside an element with the \"ngSwitch\" attribute ` +\n          `(matching \"NgSwitch\" directive)`);\n}\n"],"names":["RestParamModel","constructor","value","type","configurable","name","mapValuesToThis","this","ConfigureRestParameterSAComponent","data","dialog","formModelBuilder","form","build","parameter","valueChanges","subscribe","extend","showCodeEditor","content","isPresent","JSON","stringify","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","languageModel","JsonLanguageModel","afterClosed","getJson","TITLED_DIALOG_DATA","FormModelBuilder","CommonModule","ReactiveFormsModule","MatDialogModule","RestRelationsOptionsModel","url","method","runImmediately","RestNodeSAComponent","RelationsNodeBase","params","metadata","relationsOptions","changeDetector","element","super","history","getNewState","addParam","param","configureRestParameter","push","removeParam","index","indexOf","splice","original","parse","hasBody","find","itm","metadataSet","patchValue","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","RestRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze","SwitchView","_viewContainerRef","_templateRef","_created","create","createEmbeddedView","destroy","clear","enforceState","created","NgSwitch","_defaultViews","_defaultUsed","_caseCount","_lastCaseCheckIndex","_lastCasesMatched","ngSwitch","newValue","_ngSwitch","_updateDefaultCases","_addCase","_addDefault","view","_matchCase","matched","useDefault","length","defaultView","NgSwitchCase","viewContainer","templateRef","_view","ngDoCheck","ngSwitchCase","i0","NgSwitchDefault"],"sourceRoot":""}