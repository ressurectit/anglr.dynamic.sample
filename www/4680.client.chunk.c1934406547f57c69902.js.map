{"version":3,"file":"4680.client.chunk.c1934406547f57c69902.js","mappings":"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","sources":["webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/state/node/stateNode.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/state/node/stateNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/state/state.interface.d.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/state/metadata/state.relationsMetadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../../../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html","webpack://ng-universal-demo/../../../src/modules/codeEditor/misc/types/languageModels/typescriptLanguageModel.ts"],"sourcesContent":[null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, TypescriptLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {ConfigureNodeEndpointData, ConfigureNodeEndpointSAComponent} from '@anglr/dynamic/layout-relations';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {generateId} from '@jscrpt/common';\nimport typings from '!!raw-loader?esModule!@anglr/dynamic/typings/state';\nimport {languages} from 'monaco-editor';\nimport {lastValueFrom} from 'rxjs';\n\nimport {StateRelationsEditorOptions, StateRelationsInputFunctionData, StateRelationsOptions} from '../state.options';\n\nlanguages.typescript.typescriptDefaults.addExtraLib(typings, 'file:///node_modules/@types/state/index.d.ts');\n\n/**\n * Relations node component for state\n */\n@Component(\n{\n    selector: 'state-node',\n    templateUrl: 'stateNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StateNodeSAComponent extends RelationsNodeBase<StateRelationsOptions, StateRelationsEditorOptions> implements RelationsNode<StateRelationsOptions, StateRelationsEditorOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets added input function names\n     */\n    protected get inputFunctions(): string[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n        inputFunctions: {},\n        };\n\n        return Object.keys(this.metadata.relationsOptions.inputFunctions ?? {});\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new input function\n     */\n    protected async addInputFunc(): Promise<void>\n    {\n        const inputFunc: StateRelationsInputFunctionData = \n        {\n            id: generateId(12),\n            code: null,\n        };\n\n        const name: ConfigureNodeEndpointData =\n        {\n            name: `inputFunc${this.inputFunctions.length + 1}`,\n            defaultValue: null,\n            noDefaultValue: true,\n            skipInit: false,\n        };\n\n        if(await this.configureEndpoint(name))\n        {\n            if(!this.metadata?.relationsOptions || !this.metadata.nodeMetadata)\n            {\n                return;\n            }\n\n            this.metadata.relationsOptions.inputFunctions ??= {};\n            this.metadata.relationsOptions.inputFunctions[name.name] = inputFunc;\n\n            this.metadata.nodeMetadata.options ??= \n            {\n                contents: {}\n            };\n\n            if(this.metadata.nodeMetadata.options.contents)\n            {\n                this.metadata.nodeMetadata.options.contents[name.name] = '';\n            }\n\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Removes input function\n     * @param name - Name of input function to be removed\n     */\n    protected removeInputFunc(name: string): void\n    {\n        if(this.metadata?.relationsOptions?.inputFunctions && name in this.metadata.relationsOptions.inputFunctions)\n        {\n            delete this.metadata.relationsOptions.inputFunctions[name];\n\n            if(this.metadata.nodeMetadata?.options?.contents)\n            {\n                delete this.metadata.nodeMetadata.options.contents[name];\n            }\n\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Renames input func\n     * @param name - Allows renaming of input func\n     */\n    protected async rename(name: string): Promise<void>\n    {\n        await this.configureEndpoint(\n        {\n            name,\n            defaultValue: null,\n            noDefaultValue: true,\n            skipInit: false,\n        });\n\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Configures endpoint\n     * @param endpoint - Endpoint to be configured\n     */\n    protected async configureEndpoint(endpoint: ConfigureNodeEndpointData): Promise<boolean>\n    {\n        const copy = JSON.parse(JSON.stringify(endpoint));\n        \n        const result = await lastValueFrom(this.dialog.open<ConfigureNodeEndpointSAComponent, ConfigureNodeEndpointData, true|undefined|null>(ConfigureNodeEndpointSAComponent,\n        {\n            title: 'configure input function',\n            width: '60vw',\n            data: copy,\n        }).afterClosed());\n\n        //rename\n        if(result)\n        {\n            if(this.metadata?.relationsOptions?.inputFunctions?.[endpoint.name] && (this.metadata.nodeMetadata?.options?.contents?.[endpoint.name] === '' || this.metadata.nodeMetadata?.options?.contents?.[endpoint.name]))\n            {\n                this.metadata.relationsOptions.inputFunctions[copy.name] = this.metadata.relationsOptions.inputFunctions[endpoint.name];\n                delete this.metadata.relationsOptions.inputFunctions[endpoint.name];\n    \n                this.metadata.nodeMetadata.options.contents[copy.name] = this.metadata.nodeMetadata.options.contents[endpoint.name];\n                delete this.metadata.nodeMetadata.options.contents[endpoint.name];\n    \n                this.history.getNewState();\n            }\n            else\n            {\n                endpoint.name = copy.name;\n            }\n        }\n\n        return result ?? false;\n    }\n\n    /**\n     * Shows code editor\n     * @param name - Name of input func\n     */\n    protected async showCodeEditor(name: string): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.nodeMetadata?.options?.contents?.[name] ?? '',\n                languageModel: TypescriptLanguageModel(\n`import {InputFunction} from 'state';\n\n/**\n * Input function that handles incoming data and can change state\n */\nconst inputFunc: InputFunction<any, any> = function(_data)\n{\n};\n\nexport default inputFunc;\n\n`),\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions || !result || !this.metadata.nodeMetadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.inputFunctions ??= {};\n        this.metadata.nodeMetadata.options ??= \n        {\n            contents: {}\n        };\n\n        this.metadata.nodeMetadata.options.contents ??= {};\n\n        this.metadata.relationsOptions.inputFunctions[name].code = result.code;\n        this.metadata.nodeMetadata.options.contents[name] = result.content;\n\n        this.history.getNewState();\n    }\n}","export default \"/**\\n * Function that is used for handling input value\\n * @param data - Data that are passed to this function for processing\\n */\\nexport type InputFunction<TData = unknown, TState = unknown> = (this: StatefullClass<TState>, data: TData) => void;\\n/**\\n * Definition of statefull class\\n */\\nexport interface StatefullClass<TState = unknown> {\\n    /**\\n     * Current state that is stored for this class\\n     */\\n    state: TState | undefined | null;\\n}\\n//# sourceMappingURL=state.interface.d.ts.map\";","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {StateNodeSAComponent} from '../node/stateNode.component';\n\n/**\n * State relations metadata\n */\nexport class StateRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'State',\n        description: 'Node that allows storing and manipulation with statefull object',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = StateNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public skipInit: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\nimport {ConfigureNodeEndpointData} from './configureNodeEndpoint.interface';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n        CommonModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureNodeEndpointData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result.content);\n        }\n    }\n}",null,"import {languages} from 'monaco-editor';\n\nimport {LanguageModel} from './languageModel';\n\n/**\n * Typescript language model for code editor\n * @param initialValue - Initial value to be used as initial code\n */\nexport const TypescriptLanguageModel = (initialValue: string): LanguageModel => new LanguageModel('typescript',\n                                                                                                  'ts',\n                                                                                                  async editor =>\n                                                                                                  {\n                                                                                                      const uri = editor.getModel()?.uri;\n                                                                                                  \n                                                                                                      if(!uri)\n                                                                                                      {\n                                                                                                          return '';\n                                                                                                      }\n                                                                                                  \n                                                                                                      const worker = await languages.typescript.getTypeScriptWorker();\n                                                                                                      const client = await worker(uri);\n                                                                                                      const result = await client.getEmitOutput(uri.toString());\n                                                                                                  \n                                                                                                      return result.outputFiles[0].text;\n                                                                                                  },\n                                                                                                  initialValue);\n"],"names":["languages","StateNodeSAComponent","RelationsNodeBase","inputFunctions","this","metadata","relationsOptions","Object","keys","constructor","changeDetector","element","dialog","super","addInputFunc","inputFunc","id","generateId","code","name","length","defaultValue","noDefaultValue","skipInit","configureEndpoint","nodeMetadata","options","contents","history","getNewState","removeInputFunc","rename","detectChanges","endpoint","copy","JSON","parse","stringify","result","lastValueFrom","open","ConfigureNodeEndpointSAComponent","title","width","data","afterClosed","showCodeEditor","CodeEditorDialogComponent","height","content","languageModel","TypescriptLanguageModel","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","CommonModule","StateRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","freeze","ComponentEndpointModel","value","mapValuesToThis","formModelBuilder","form","build","valueChanges","subscribe","extend","isPresent","JsonLanguageModel","getJson","TITLED_DIALOG_DATA","FormModelBuilder","ReactiveFormsModule","MatDialogModule","initialValue","LanguageModel","editor","uri","getModel","worker","client","getEmitOutput","toString","outputFiles","text"],"sourceRoot":""}