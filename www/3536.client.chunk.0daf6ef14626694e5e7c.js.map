{"version":3,"file":"3536.client.chunk.0daf6ef14626694e5e7c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/rest.metadata.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/rest.relations.ts","webpack://ng-universal-demo/../../../rest-components/src/dynamicItems/rest/type.ts"],"sourcesContent":["import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Rest relations metadata loader\n */\nexport const RestRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/rest.relationsMetadata')).RestRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {HttpClient, HttpEventType, HttpParams, HttpRequest} from '@angular/common/http';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {LOGGER, Logger, ProgressIndicatorService} from '@anglr/common';\nimport {handleHeaderParam, handlePathParam, handleQueryObjectParam, handleQueryParam, mergeQueryObjectParamsWithHttpParams, QueryStringSerializer} from '@anglr/rest';\nimport {isBlank, isEmptyObject, StringDictionary} from '@jscrpt/common';\nimport {catchError} from 'rxjs/operators';\nimport {EMPTY, Subscription} from 'rxjs';\n\nimport {RestRelationsMetadataLoader} from './rest.metadata';\nimport {RestRelationsOptions} from './rest.options';\n\n//TODO: add required to rest param\n\n/**\n * Rest relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(RestRelationsMetadataLoader)\nexport class RestRelations implements RelationsComponent<RestRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: RestRelationsOptions|undefined|null;\n\n    /**\n     * Instance of http client\n     */\n    protected http: HttpClient;\n\n    /**\n     * Instance of logger\n     */\n    protected logger: Logger;\n\n    /**\n     * Instance of query string serializer\n     */\n    protected queryStringSerializer: QueryStringSerializer;\n\n    /**\n     * Subscription for running request\n     */\n    protected runningRequestSubscription: Subscription|undefined|null;\n\n    /**\n     * Service used for handling progress indicator\n     */\n    protected progressIndicator: ProgressIndicatorService;\n\n    /**\n     * Indication whether there is null or undefined required param\n     */\n    protected emptyParam: boolean[] = [];\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): RestRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: RestRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Success output for rest result\n     */\n    @DynamicOutput()\n    public success: unknown;\n\n    /**\n     * Error output for rest result\n     */\n    @DynamicOutput()\n    public error: unknown;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.http = injector.get(HttpClient);\n        this.logger = injector.get(LOGGER);\n        this.queryStringSerializer = injector.get(QueryStringSerializer);\n        this.progressIndicator = injector.get(ProgressIndicatorService);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(_changes: SimpleChanges): void\n    {\n        this.makeRequest();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n            {\n                for(const index in this.relationsOptions.params)\n                {\n                    const param = this.relationsOptions.params[index];\n                    this.emptyParam.push(true);\n\n                    if(param.configurable && param.name)\n                    {\n                        Object.defineProperty(this,\n                                              param.name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: value =>\n                                                  {\n                                                      param.value = value;\n\n                                                      this.emptyParam[index] = isBlank(value);\n                                                  }\n                                              });\n                    }\n                }\n            }\n        }\n\n        if(this.relationsOptions?.runImmediately)\n        {\n            this.makeRequest();\n        }\n    }\n\n    /**\n     * Make http request\n     */\n    protected makeRequest(): void\n    {\n        //on empty param\n        if(this.emptyParam.find(itm => itm))\n        {\n            return;\n        }\n\n        if(this.runningRequestSubscription)\n        {\n            this.runningRequestSubscription.unsubscribe();\n            this.progressIndicator.hideProgress();\n        }\n\n        if(!this.relationsOptions ||\n           !this.relationsOptions.method ||\n           !this.relationsOptions.url)\n        {\n            this.logger.warn('RestRelations: missing options for craeting http request {@data}', this.relationsOptions);\n\n            return;\n        }\n\n        let body: any = null;\n        let url: string = this.relationsOptions.url;\n        const params: StringDictionary = {};\n        const headers: StringDictionary = {};\n        const queryStrings: string[] = [];\n\n        if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n        {\n            for(const param of this.relationsOptions.params)\n            {\n                if(!param.name)\n                {\n                    continue;\n                }\n\n                const data =\n                {\n                    index: 0,\n                    key: param.name,\n                    value: param.value,\n                    transformFn: null\n                };\n\n                switch(param.type)\n                {\n                    case 'PATH':\n                    {\n                        url = handlePathParam(data, url);\n\n                        break;\n                    }\n                    case 'BODY':\n                    {\n                        body = param.value;\n\n                        break;\n                    }\n                    case 'QUERY':\n                    {\n                        handleQueryParam(data, params);\n\n                        break;\n                    }\n                    case 'QUERY OBJECT':\n                    {\n                        handleQueryObjectParam(data, queryStrings, this.queryStringSerializer);\n\n                        break;\n                    }\n                    case 'HEADER':\n                    {\n                        handleHeaderParam(data, headers);\n\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n\n        let request: HttpRequest<any> = new HttpRequest(this.relationsOptions.method,\n                                                        url,\n                                                        body,\n                                                        {\n                                                            reportProgress: false,\n                                                            responseType: 'json',\n                                                        });\n\n        // query params\n        if(!isEmptyObject(params))\n        {\n            request = request.clone(\n            {\n                setParams: params\n            });\n        }\n\n        // header params\n        if(!isEmptyObject(headers))\n        {\n            request = request.clone(\n            {\n                setHeaders: headers\n            });\n        }\n\n        // query object params\n        if(queryStrings.length)\n        {\n            const requestParams: HttpParams = mergeQueryObjectParamsWithHttpParams(queryStrings, request.params);\n\n            request = request.clone(\n            {\n                params: requestParams\n            });\n        }\n\n        this.runningRequestSubscription = this.http.request(request)\n            .pipe(catchError(error =>\n            {\n                //TODO: proper handling\n                this.success = null;\n                this.error = error;\n\n                return EMPTY;\n            }))\n            .subscribe(result =>\n            {\n                if(result.type == HttpEventType.Response)\n                {\n                    if(result.status >= 200 && result.status <= 300)\n                    {\n                        this.success = result.body;\n                        this.error = null;\n\n                        return;\n                    }\n                }\n            });\n    }\n}","import {RestRelations} from './rest.relations';\n\nexport default RestRelations;"],"names":["DynamicOutput","options","target","propertyKey","prop","Object","defineProperty","get","this","Subject","set","value","defineAssignedProp","sync","next","injector","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp","RestRelationsMetadataLoader","RestRelationsEditorMetadata","RestRelations","relationsOptions","ɵRelationsOptions","initialize","constructor","emptyParam","http","HttpClient","logger","LOGGER","queryStringSerializer","QueryStringSerializer","progressIndicator","ProgressIndicatorService","ngOnChanges","_changes","makeRequest","invalidateVisuals","params","Array","isArray","index","param","push","configurable","name","enumerable","isBlank","runImmediately","find","itm","runningRequestSubscription","unsubscribe","hideProgress","method","url","warn","body","headers","queryStrings","data","key","transformFn","type","handlePathParam","handleQueryParam","handleQueryObjectParam","handleHeaderParam","request","HttpRequest","reportProgress","responseType","isEmptyObject","clone","setParams","setHeaders","length","requestParams","mergeQueryObjectParamsWithHttpParams","pipe","catchError","error","success","EMPTY","subscribe","result","HttpEventType","status","__decorate","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}