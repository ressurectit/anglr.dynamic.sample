{"version":3,"file":"1766.client.chunk.f13475de4fb44b83a2cd.js","mappings":"mMASM,MAAOA,EAGTC,YAAgDC,GAAA,KAAAA,QAAAA,CAEhD,CASOC,UAAkBC,EAA+CC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQF,GAEA,KAGRA,aAAiBG,EAAAA,GAETH,GAGXI,KAAKN,SAASO,KAAK,iDAEZ,KACX,E,iCA7BST,GAAiB,IAGMU,EAAAA,GAAM,M,wCAH7BV,EAAiB,S,2GCJvB,MAAMW,EAAoB,I,SAAIC,GAAc,OAAQ,QAAQC,GAExDA,EAAOC,YAAYC,YAAc,K,eCEtC,MAAOC,EAUTf,YAAYG,GAHL,KAAAa,QAAiC,KAKpCC,EAAAA,GAAAA,KAAqBV,KAArBU,CAA2Bd,EAC/B,ECZE,MAAOe,EAuCTlB,cAhCO,KAAAmB,SACP,CACIC,KAAM,aACNC,YAAa,uCACbC,MAAO,OACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,IAGR,CACIH,UAAWV,EACXY,mBACA,EACIE,EAAAA,EAAAA,GAAyC,UAAWnB,OAKpEoB,eACA,CACId,QAAS,wDAObe,OAAOC,OAAOzB,KAClB,E,qWC/BE,MAAO0B,UAA6DC,EAAAA,EAiBtElC,YAAYmC,EACAC,EACUC,GAElBC,MAAMH,EAAgBC,GAFJ,KAAAC,OAAAA,CAGtB,CAOgBE,iBAAc,I,EAAA,c,EAAA,YAE1B,IAAGlC,EAAAA,EAAAA,IAAQ,EAAKmC,YAAc,EAAKC,cAE/B,OAGJ,MAAMC,QAAeC,EAAAA,EAAAA,GAAc,EAAKN,OAAOO,KAA8EC,EAAAA,EAC7H,CACIC,MAAO,cACPC,MAAO,OACPC,OAAQ,OACRC,KACA,CACIjC,QAAS,EAAKkC,MAAMC,IAAI,EAAKX,WAAWrC,OAAS,GACjDsC,cAAe,EAAKA,iBAGzBW,eAEH,IAAGC,EAAAA,EAAAA,IAAUX,GACb,CACI,MAAMY,EAAU,EAAKJ,MAAMC,IAAI,EAAKX,UAEjCc,aAAmBhD,EAAAA,IAElBgD,EAAQC,SAASb,EAAO1B,Q,CAE/B,E,gLACL,EAQE,SAAUa,EAAiCW,EAAyCC,GAEtF,MAUMe,UAA8CvB,EAVpDjC,c,oBAgBoB,KAAAwC,SAAkCA,EAMlC,KAAAC,cAA8CA,C,EAGlE,O,6DAfMe,KAAqB,GAArBA,EAAqB,E,qBAArBA,EAAqB,oI,yNCnGoF,kBAAgB,I,gCACjG,M,mCAAP,sCDiHhBA,C,kCA7FEvB,GAAoC,6B,kBAApCA,EAAoC,yI,yNCrBkE,kBAAgB,I,gCACjG,M,mCAAP,qC","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../src/modules/codeEditor/misc/types/languageModels/htmlLanguageModel.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.model.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.layoutMetadata.ts","webpack://ng-universal-demo/../../../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {LanguageModel} from './languageModel';\n\n/**\n * Html language model for code editor\n */\nexport const HtmlLanguageModel = new LanguageModel('html', 'html', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\n\n//TODO: check all models for \"public\" \n\n/**\n * Html block model for properties editor\n */\nexport class HtmlBlockModel implements HtmlBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    public content: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: HtmlBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {HtmlLanguageModel} from '@anglr/dynamic';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\nimport {HtmlBlockModel} from './htmlBlock.model';\n\n/**\n * Html block layout metadata\n */\nexport class HtmlBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<HtmlBlockComponentOptions> =\n    {\n        name: 'Html block',\n        description: 'Html block - displays html or string',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: HtmlBlockModel,\n                    propertiesControls:\n                    [\n                        codePropertiesControlFor<HtmlBlockModel>('content', HtmlLanguageModel),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            content: '<div>This is your <strong>HTML</strong> block</div>'\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel, CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result.content);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","HtmlLanguageModel","LanguageModel","editor","getModel","getValue","HtmlBlockModel","content","mapValuesToThis","HtmlBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","codePropertiesControlFor","defaultOptions","Object","freeze","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","dialog","super","showCodeEditor","property","languageModel","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","form","get","afterClosed","isPresent","control","setValue","CodePropertiesControl"],"sourceRoot":""}