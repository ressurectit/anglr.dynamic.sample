{"version":3,"file":"5247.client.chunk.9a8c7050fcc32ac083d1.js","mappings":"oVAMO,MAAMA,EAAmC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAqDC,oCAAqC,E,+KAAA,kBAA9K,mCCQzC,IAAMC,EAAN,MAmBQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EAEtBF,KAAKC,mBAAmBE,WAEvBH,KAAKG,SAAWH,KAAKC,mBAAmBE,SACxCH,KAAKI,iBAAmBC,EAAAA,QAAmBL,KAAKG,UAAY,IAC5DH,KAAKM,OAASN,KAAKI,iBAAiBJ,KAAKO,OAAS,GAE1D,CA2BOC,YAAYC,IAEZC,EAAAA,EAAAA,GAA8B,cAAeD,IAE5CT,KAAKI,iBAAmBC,EAAAA,QAAmBL,KAAKG,UAAY,IAE5DH,KAAKM,OAASN,KAAKI,iBAAiBJ,KAAKO,QAG1CG,EAAAA,EAAAA,GAA8B,UAAWD,IAExCT,KAAKM,OAASN,KAAKI,mBAAmBJ,KAAKO,OAAS,GAE5D,CAKOI,oBAEP,IA5BAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,4DApDPf,GAAqB,UAFjCgB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBnB,IACZE,GCZb,S,mFCWM,SAAUe,EAAcG,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIG,IAAK,WAOD,OALItB,KAAK,IAAImB,aAETnB,KAAK,IAAImB,WAAgB,IAAII,EAAAA,GAG1BvB,KAAK,IAAImB,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIG,IAAK,WAED,OAAOtB,KAAK,IAAImB,IACpB,EACAK,IAAK,SAAStB,GAKV,GAHAF,KAAK,IAAImB,KAAUjB,GACnBuB,EAAAA,EAAAA,IAAmBzB,KAAMmB,GAEtBH,GAASU,KAER1B,KAAK,GAAGmB,WAAcQ,WAG1B,CACI,MAAMC,EAAY5B,KAA+B6B,WAEjD,IAAID,EAEA,OAGJ,MAAME,EAAmBF,EAASN,IAAIS,EAAAA,GAChCC,EAAiBJ,EAASN,IAAIW,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAMnC,MAElC,IAAIkC,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYnB,G,CAGxB,IAGvBH,GAASuB,WAERC,EAAAA,EAAAA,IAAmBvB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataTemplate/dataTemplate.metadata.ts","webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataTemplate/dataTemplate.relations.ts","webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataTemplate/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Data template relations metadata loader\n */\nexport const DataTemplateRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/dataTemplate.relationsMetadata')).DataTemplateRelationsEditorMetadata();\n","import {SimpleChanges} from '@angular/core';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\nimport Handlebars from 'handlebars';\n\nimport {DataTemplateRelationsMetadataLoader} from './dataTemplate.metadata';\nimport {DataTemplateRelationsOptions} from './dataTemplate.options';\n\n/**\n * Data template relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(DataTemplateRelationsMetadataLoader)\nexport class DataTemplateRelations implements RelationsComponent<DataTemplateRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: DataTemplateRelationsOptions|undefined|null;\n\n    /**\n     * Instance of compiled template\n     */\n    protected compiledTemplate: HandlebarsTemplateDelegate|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): DataTemplateRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: DataTemplateRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        if(this.ɵRelationsOptions?.template)\n        {\n            this.template = this.ɵRelationsOptions?.template;\n            this.compiledTemplate = Handlebars.compile(this.template ?? '');\n            this.output = this.compiledTemplate(this.data) ?? '';\n        }\n    }\n\n    //######################### public properties - inputs #########################\n    \n    /**\n     * Data for template rendering\n     */\n    public data: any;\n\n    /**\n     * Template to be used for rendering of data\n     */\n    public template: string|undefined|null;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output of template compilation\n     */\n    @DynamicOutput()\n    public output: string|undefined|null;\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DataTemplateRelations>('template') in changes)\n        {\n            this.compiledTemplate = Handlebars.compile(this.template ?? '');\n\n            this.output = this.compiledTemplate(this.data);\n        }\n\n        if(nameof<DataTemplateRelations>('data') in changes)\n        {\n            this.output = this.compiledTemplate?.(this.data) ?? '';\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {DataTemplateRelations} from './dataTemplate.relations';\n\nexport default DataTemplateRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["DataTemplateRelationsMetadataLoader","DataTemplateRelationsEditorMetadata","DataTemplateRelations","relationsOptions","this","ɵRelationsOptions","value","template","compiledTemplate","Handlebars","output","data","ngOnChanges","changes","nameof","invalidateVisuals","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","options","target","propertyKey","prop","Object","defineProperty","get","Subject","set","defineAssignedProp","sync","next","injector","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}