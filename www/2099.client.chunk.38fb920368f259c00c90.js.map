{"version":3,"file":"2099.client.chunk.38fb920368f259c00c90.js","mappings":"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","sources":["webpack://ng-universal-demo/./node_modules/@anglr/common/src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../src/modules/tooltip/components/tooltip/tooltip.component.ts","webpack://ng-universal-demo/../../../src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../src/modules/tooltip/misc/tokens.ts","webpack://ng-universal-demo/../../../src/modules/tooltip/directives/tooltipTemplate/tooltipTemplate.directive.ts","webpack://ng-universal-demo/../../../src/modules/tooltip/directives/tooltip/tooltip.directive.ts","webpack://ng-universal-demo/../../../src/services/position/position.utils.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/modules/propertiesControls/components/propertiesControlBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.js"],"sourcesContent":[null,"import {Component, ChangeDetectionStrategy, TemplateRef, ChangeDetectorRef, ElementRef, HostListener} from '@angular/core';\n\nimport {TooltipTemplateContext} from '../../directives';\nimport {TooltipRenderer} from '../../misc/tooltip.interface';\n\n/**\n * Component used for displaying tooltip content\n */\n@Component(\n{\n    selector: 'tooltip-popup',\n    templateUrl: 'tooltip.component.html',\n    styleUrls: ['tooltip.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent<TData = any> implements TooltipRenderer<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Called when mouse enter tooltip component, hover\n     */\n    protected _enterFn: () => void = () => null;\n\n    /**\n     * Called when mouse leaves tooltip component\n     */\n    protected _leaveFn: () => void = () => null;\n\n    //######################### public properties - implementation of TooltipRenderer #########################\n\n    /**\n     * Data that are rendered in tooltip\n     */\n    public data: TData|null|undefined;\n\n    /**\n     * Template used for rendering tooltip\n     */\n    public template: TemplateRef<TooltipTemplateContext<TData>>|null|undefined;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    public allowHtml: boolean = false;\n\n    /**\n     * Css class that is applied to tooltip renderer component\n     */\n    public cssClass: string|null|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of TooltipRenderer #########################\n\n    /**\n     * Registers handlers that allows reaction to entering or leaving tooltip\n     * @param enter - Called when mouse enter tooltip component, hover\n     * @param leave - Called when mouse leaves tooltip component\n     */\n    public registerHoverEvents(enter: () => void, leave: () => void): void\n    {\n        this._enterFn = enter;\n        this._leaveFn = leave;\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        if(this.cssClass)\n        {\n            this._element.nativeElement.classList.add(this.cssClass);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse enter event over tooltip\n     * @internal\n     */\n    @HostListener('mouseenter')\n    public mouseEnter(): void\n    {\n        this._enterFn();\n    }\n\n    /**\n     * Handles mouse leave event over tooltip\n     * @internal\n     */\n    @HostListener('mouseleave')\n    public mouseLeave(): void\n    {\n        this._leaveFn();\n    }\n}","<div *ngIf=\"!template && !allowHtml\">{{data}}</div>\r\n<div *ngIf=\"!template && allowHtml\" [innerHTML]=\"data\"></div>\r\n\r\n<ng-template [ngIf]=\"template\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: data}\"></ng-container>\r\n</ng-template>","import {InjectionToken} from '@angular/core';\n\nimport {TooltipOptions} from './tooltip.interface';\n\n/**\n * Injection token used for injecting tooltip options\n */\nexport const TOOLTIP_OPTIONS: InjectionToken<Partial<TooltipOptions>> = new InjectionToken<Partial<TooltipOptions>>('TOOLTIP_OPTIONS');\n","import {Directive, TemplateRef} from '@angular/core';\n\nimport {TooltipTemplateContext} from './tooltipTemplate.context';\n\n/**\n * Directive used for obtaining custom tooltip template\n */\n@Directive(\n{\n    selector: '[tooltipTemplate]'\n})\nexport class TooltipTemplateDirective<TData = any>\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<TooltipTemplateContext<TData>>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: TooltipTemplateDirective, _ctx: unknown): _ctx is TooltipTemplateContext\n    {\n        return true;\n    }\n}","import {ComponentRef, ContentChild, Directive, ElementRef, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {AnimationBuilder, AnimationFactory} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {fadeInAnimation, fadeOutAnimation} from '@anglr/animations';\nimport {extend, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {TooltipComponent} from '../../components/tooltip/tooltip.component';\nimport {TooltipOptions, TooltipRenderer} from '../../misc/tooltip.interface';\nimport {TOOLTIP_OPTIONS} from '../../misc/tokens';\nimport {applyPositionResult, Position, PositionOffset, PositionPlacement} from '../../../../services/position';\nimport {TooltipTemplateDirective} from '../tooltipTemplate/tooltipTemplate.directive';\nimport {TooltipTemplateContext} from '../tooltipTemplate/tooltipTemplate.context';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Default options for tooltip\n */\nconst defaultOptions: TooltipOptions =\n{\n    delay: 200,\n    position:\n    {\n        offset: PositionOffset.MouseEnter,\n        placement: PositionPlacement.TopStart\n    },\n    allowSelection: false,\n    tooltipRenderer: TooltipComponent,\n    tooltipCssClass: null,\n    stopPropagation: false,\n    enterAnimation: fadeInAnimation,\n    exitAnimation: fadeOutAnimation,\n};\n\n/**\n * Directive used for rendering tooltip\n */\n@Directive(\n{\n    selector: '[tooltip]'\n})\nexport class TooltipDirective<TData = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of component used for rendering tooltip\n     */\n    protected _tooltipComponent?: ComponentRef<TooltipRenderer<TData>>;\n\n    /**\n     * Instance of HTML element for tooltip renderer\n     */\n    protected _tooltipElement?: HTMLElement;\n\n    /**\n     * Animation factory used for enter animation of tooltip\n     */\n    protected _enterAnimation: AnimationFactory;\n\n    /**\n     * Animation factory used for exit animation of tooltip\n     */\n    protected _exitAnimation: AnimationFactory;\n\n    /**\n     * Instance of options provided for this tooltip\n     */\n    protected _options: TooltipOptions;\n\n    /**\n     * Indication whether there is active show tooltip request\n     */\n    protected _showRequest: boolean = false;\n\n    /**\n     * Indication whether keep open tooltip component\n     */\n    protected _keepOpen: boolean = false;\n\n    /**\n     * Timeout that is used for handling mouse move\n     */\n    protected _timeout: number|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Tooltip text that is displayed, or any data that could be passed to template\n     */\n    @Input()\n    public tooltip?: TData;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    @Input()\n    public allowHtml: boolean = false;\n\n    /**\n     * Instance of tooltip template that is used for rendering\n     */\n    @Input()\n    public template?: TemplateRef<TooltipTemplateContext<TData>>;\n\n    /**\n     * Options used for displaying tooltip\n     */\n    @Input()\n    public get tooltipOptions(): Partial<TooltipOptions>\n    {\n        return this._options;\n    }\n    public set tooltipOptions(value: Partial<TooltipOptions>)\n    {\n        this._options = extend(true, {}, this._options, value);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    /**\n     * Gets or sets indication whether is tooltip visible, if has boolean value, mouse events cant override this\n     */\n    @Input()\n    public tooltipVisible?: boolean;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of template from element content, used for rendering\n     */\n    @ContentChild(TooltipTemplateDirective)\n    public tooltipTemplateChild?: TooltipTemplateDirective;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _injector: Injector,\n                protected _element: ElementRef<HTMLElement>,\n                protected _animationsPlayer: AnimationBuilder,\n                @Inject(DOCUMENT) protected _document: Document,\n                @Inject(POSITION) protected _position: Position,\n                @Optional() @Inject(TOOLTIP_OPTIONS) options?: Partial<TooltipOptions>,)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TooltipDirective>('tooltipVisible') in changes)\n        {\n            if(this.tooltipVisible)\n            {\n                this._showTooltip();\n            }\n            else\n            {\n                this._hideTooltip();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._timeout)\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._destroyTooltip();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse leave event, hover ends\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public mouseLeave(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        if(isBlank(this.tooltipVisible))\n        {\n            setTimeout(() =>\n            {\n                if(!this._keepOpen)\n                {\n                    this._showRequest = false;\n                    this._hideTooltip();\n                }\n            }, 10);\n        }\n    }\n\n    /**\n     * Handles mouse move event, displaying tooltip\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mousemove', ['$event'])\n    public mouseMove(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        this._showRequest = true;\n\n        //do nothing if tooltip is visible\n        if(this._tooltipComponent || isPresent(this.tooltipVisible))\n        {\n            return;\n        }\n\n        if(isPresent(this._timeout))\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._timeout = setTimeout(() =>\n        {\n            this._timeout = null;\n\n            if(this._showRequest)\n            {\n                this._showTooltip(event);\n\n                this._showRequest = false;\n            }\n        }, this._options.delay) as any;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Shows tooltip\n     * @param event - Mouse event\n     */\n    protected _showTooltip(event?: MouseEvent): void\n    {\n        this._createTooltip();\n\n        //if element was not created do nothing\n        if(!this._tooltipElement)\n        {\n            return;\n        }\n\n        this._showData();\n\n        this._position.placeElement(this._tooltipElement,\n                                    this._element.nativeElement,\n                                    {\n                                        placement: this._options.position.placement,\n                                        offset: this._options.position.offset,\n                                        flip: true,\n                                        mouseEvent: event,\n                                        autoUpdate: false\n                                    })\n            .toPromise()\n            .then(result => applyPositionResult(result));\n    }\n\n    /**\n     * Hides tooltip\n     */\n    protected _hideTooltip(): void\n    {\n        this._destroyTooltip();\n    }\n\n    /**\n     * Destroys tooltip component\n     */\n    protected _destroyTooltip(): void\n    {\n        if(this._tooltipComponent)\n        {\n            const component = this._tooltipComponent;\n            const element = this._tooltipElement;\n\n            const exitAnimation = this._exitAnimation.create(element);\n\n            exitAnimation.onDone(() =>\n            {\n                component.destroy();\n                exitAnimation.destroy();\n            });\n            \n            this._tooltipComponent = undefined;\n            this._tooltipElement = undefined;\n\n            exitAnimation.play();\n        }\n    }\n\n    /**\n     * Creates tooltip renderer component\n     */\n    protected _createTooltip(): void\n    {\n        // 0. Destroys tooltip if it exists\n        this._destroyTooltip();\n\n        // 1. Create a component reference from the component\n        this._tooltipComponent = this._viewContainerRef\n            .createComponent(this._options.tooltipRenderer,\n                             {\n                                 injector: this._injector\n                             });\n\n        // 3. Get DOM element from component\n        this._tooltipElement = (this._tooltipComponent.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        this._document.body.appendChild(this._tooltipElement);\n        this._enterAnimation.create(this._tooltipElement).play();\n    }\n\n    /**\n     * Sets data to tooltip component and shows them\n     */\n    protected _showData(): void\n    {\n        if(this._tooltipComponent)\n        {\n            this._tooltipComponent.instance.allowHtml = this.allowHtml;\n            this._tooltipComponent.instance.data = this.tooltip;\n            this._tooltipComponent.instance.template = this.template ?? this.tooltipTemplateChild?.template;\n            this._tooltipComponent.instance.cssClass = this._options.tooltipCssClass;\n\n            this._tooltipComponent.instance.registerHoverEvents(() =>\n                                                                {\n                                                                    if(this._options.allowSelection)\n                                                                    {\n                                                                        this._keepOpen = true;\n                                                                        this._showRequest = false;\n                                                                    }\n                                                                },\n                                                                () =>\n                                                                {\n                                                                    setTimeout(() =>\n                                                                    {\n                                                                        this._keepOpen = false;\n\n                                                                        if(!this._showRequest)\n                                                                        {\n                                                                            this._hideTooltip();\n                                                                        }\n\n                                                                        this._showRequest = false;\n                                                                    }, 5);\n                                                                });\n\n            this._tooltipComponent.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `tooltip` input\n     */\n    public static ngAcceptInputType_tooltip: any;\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n","import { DynamicPropertyMetadata } from '@anglr/dynamic';\nimport { LayoutPropertyMetadata } from '../../misc/types';\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\n\nexport function LayoutPropertyDescription(description) {\n  return DynamicPropertyMetadata({\n    description\n  }, LayoutPropertyMetadata);\n}","import { DynamicPropertyMetadata } from '@anglr/dynamic';\nimport { LayoutPropertyMetadata } from '../../misc/types';\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\n\nexport function LayoutPropertyName(name) {\n  return DynamicPropertyMetadata({\n    name\n  }, LayoutPropertyMetadata);\n}","import { DynamicPropertyMetadata } from '@anglr/dynamic';\nimport { LayoutPropertyMetadata } from '../../misc/types';\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\n\nexport function LayoutPropertyType(type) {\n  return DynamicPropertyMetadata({\n    type\n  }, LayoutPropertyMetadata);\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, Input } from '@angular/core';\nimport { LayoutEditorMetadataExtractor } from '../../../services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services\";\n/**\n * Base class for properties control\n */\n\nexport class PropertiesControlBase {\n  //######################### constructor #########################\n  constructor(_changeDetector, _extractor) {\n    this._changeDetector = _changeDetector;\n    this._extractor = _extractor; //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n\n    this._initialized = false;\n    /**\n     * @inheritdoc\n     */\n\n    this.propertiesMetadata = null;\n  } //######################### public methods - implementation of OnInit #########################\n\n  /**\n   * Initialize component\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._initialized) {\n        return;\n      }\n\n      _this._initialized = true;\n      yield _this._initialize();\n    })();\n  } //######################### public methods - implementation of PropertiesControl #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.ngOnInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this._changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Use this method for initialization of component\n   */\n\n\n  _initialize() {}\n\n}\n\nPropertiesControlBase.ɵfac = function PropertiesControlBase_Factory(t) {\n  return new (t || PropertiesControlBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.LayoutEditorMetadataExtractor));\n};\n\nPropertiesControlBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: PropertiesControlBase,\n  inputs: {\n    form: \"form\",\n    propertiesMetadata: \"propertiesMetadata\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PropertiesControlBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.LayoutEditorMetadataExtractor\n    }];\n  }, {\n    form: [{\n      type: Input\n    }],\n    propertiesMetadata: [{\n      type: Input\n    }]\n  });\n})();","import { extend, noop } from '@jscrpt/common';\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\n\nexport function DynamicPropertyMetadata(value, property) {\n  if (ngDesignerMetadata) {\n    return function (target, propertyKey) {\n      var _a;\n\n      const metadata = Reflect.get(target, property) ?? {};\n      const propertyMetadata = metadata[_a = propertyKey] ?? (metadata[_a] = {});\n      extend(true, propertyMetadata, value);\n\n      if (!Reflect.has(target, property)) {\n        Reflect.defineProperty(target, property, {\n          value: metadata\n        });\n      }\n    };\n  }\n\n  return noop;\n}"],"names":["TooltipComponent","constructor","_changeDetector","_element","_enterFn","_leaveFn","allowHtml","registerHoverEvents","enter","leave","this","invalidateVisuals","cssClass","nativeElement","classList","add","detectChanges","mouseEnter","mouseLeave","i0","i1","TOOLTIP_OPTIONS","InjectionToken","TooltipTemplateDirective","template","_dir","_ctx","defaultOptions","delay","position","offset","PositionOffset","placement","PositionPlacement","allowSelection","tooltipRenderer","tooltipCssClass","stopPropagation","enterAnimation","fadeInAnimation","exitAnimation","fadeOutAnimation","TooltipDirective","_viewContainerRef","_injector","_animationsPlayer","_document","_position","options","_showRequest","_keepOpen","_timeout","_options","extend","_enterAnimation","build","_exitAnimation","tooltipOptions","value","ngOnChanges","changes","nameof","tooltipVisible","_showTooltip","_hideTooltip","ngOnDestroy","clearTimeout","_destroyTooltip","event","isBlank","setTimeout","mouseMove","_tooltipComponent","isPresent","_createTooltip","_tooltipElement","_showData","placeElement","flip","mouseEvent","autoUpdate","toPromise","then","result","applyPositionResult","component","element","create","onDone","destroy","undefined","play","createComponent","injector","hostView","rootNodes","body","appendChild","instance","data","tooltip","tooltipTemplateChild","DOCUMENT","POSITION","Object","assign","target","style","top","left","transform","x","y","LayoutPropertyDescription","description","LayoutPropertyName","name","LayoutPropertyType","type","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","_asyncToGenerator","fn","self","args","arguments","apply","err","PropertiesControlBase","_extractor","_initialized","propertiesMetadata","ngOnInit","_this","_initialize","initialize","_this2","t","inputs","form","DynamicPropertyMetadata","property","propertyKey","_a","metadata","Reflect","get","propertyMetadata","has","defineProperty"],"sourceRoot":""}