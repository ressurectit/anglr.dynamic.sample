{"version":3,"file":"7499.client.chunk.c92f0f424617eeb99a33.js","mappings":"0LAKO,MAAMA,EAAmB,I,SAAIC,GAAc,MAAO,OAAOC,GAErDA,EAAOC,YAAYC,YAAc,K,eCCtC,MAAOC,EAeTC,YAAYC,GAHL,KAAAC,MAA+B,GAKlCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BF,EAC9B,ECdC,MAAOI,EAsDTL,cA/CO,KAAAM,SACP,CACIC,KAAM,QACNC,YAAa,0CACbC,MAAO,SACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWb,EACXc,mBACA,EACIC,EAAAA,EAAAA,GAA0C,QAASpB,QAUhE,KAAAqB,cAAwF,CAACC,EAAUC,KAEtGA,EAAQC,QAAUF,CAAlB,EAMG,KAAAG,gBAA+EF,IAAYA,GAASC,QAKpG,KAAAE,eAAgGH,GAAWA,GAASC,QAAU,CAACD,GAASC,SAAW,GAKnJ,KAAAG,iBAAkE,CAACC,EAAGL,KAEzEA,EAAQC,QAAU,IAAlB,EAMAK,OAAOC,OAAOpB,KACjB,E,qWChDC,MAAOqB,UAA6DC,EAAAA,EAiBtE1B,YAAY2B,EACAC,EACUC,GAElBC,MAAMH,EAAgBC,GAFJ,KAAAC,OAAAA,CAGrB,CAOeE,iBAAc,I,EAAA,c,EAAA,YAE1B,IAAGC,EAAAA,EAAAA,IAAQ,EAAKC,YAAc,EAAKC,cAE/B,OAGJ,MAAMC,QAAeC,EAAAA,EAAAA,GAAc,EAAKP,OAAOQ,KAA8EC,EAAAA,EAC7H,CACIC,MAAO,cACPC,MAAO,OACPC,OAAQ,OACRC,KACA,CACIxB,QAAS,EAAKyB,MAAMC,IAAI,EAAKX,WAAWhC,OAAS,GACjDiC,cAAe,EAAKA,iBAGzBW,eAEH,IAAGC,EAAAA,EAAAA,IAAUX,GACb,CACI,MAAMY,EAAU,EAAKJ,MAAMC,IAAI,EAAKX,UAEjCc,aAAmBC,EAAAA,IAElBD,EAAQE,SAASd,EAAOjB,QAE/B,CA5ByB,E,gLA6B7B,EAQC,SAAUJ,EAAiCmB,EAAyCC,GAEtF,MAUMgB,UAA8CzB,EAVpDzB,c,oBAgBoB,KAAAiC,SAAkCA,EAMlC,KAAAC,cAA8CA,CACjE,EAED,O,6DAfMgB,KAAAA,GAAAA,E,uBAAAA,E,gTCnGV,c,IAA0G,2BAAS,kBAAT,I,KACtG,U,IAAM,G,oBAAA,G,KAAA,uB,sCDiHCA,CACV,C,iCA9FYzB,GAAAA,EAAAA,EAAoC0B,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,G,oBAApC1B,E,qTCrBb,c,IAA0G,2BAAS,kBAAT,I,KACtG,U,IAAM,G,oBAAA,G,KAAA,uB,obCaJ,MAAgBC,EAwBlB1B,YAAsBoD,EACAC,GADA,KAAAD,gBAAAA,EACA,KAAAC,WAAAA,EAlBZ,KAAAC,cAAwB,EAc3B,KAAA3C,mBAA2F,IAMjG,CAOY4C,WAAQ,iCAEd,EAAKD,eAKR,EAAKA,cAAe,QAEd,EAAKE,cATM,KAUpB,CAOYC,aAAU,uCAEb,EAAKF,UAFQ,KAGtB,CAKMG,oBAEHtD,KAAKgD,gBAAgBO,eACxB,CAOSH,cAET,E,iCAvEiB9B,GAAAA,EAAAA,EAAqByB,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,G,oBAArBzB,E","sources":["webpack://ng-universal-demo/../../../src/modules/codeEditor/misc/types/languageModels/cssLanguageModel.ts","webpack://ng-universal-demo/../../../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.model.ts","webpack://ng-universal-demo/../../../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.layoutMetadata.ts","webpack://ng-universal-demo/../../../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts"],"sourcesContent":["import {LanguageModel} from './languageModel';\n\n/**\n * Css language model for code editor\n */\nexport const CssLanguageModel = new LanguageModel('css', 'css', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\n\n/**\n * Style block model for properties editor\n */\nexport class StyleBlockModel implements StyleBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public style: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: StyleBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {CssLanguageModel} from '@anglr/dynamic';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\nimport {StyleBlockModel} from './styleBlock.model';\n\n/**\n * Style block layout metadata\n */\nexport class StyleBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<StyleBlockComponentOptions> =\n    {\n        name: 'Style',\n        description: 'Style block - allows styling of content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata: \n            [\n                {\n                    modelType: StyleBlockModel,\n                    propertiesControls: \n                    [\n                        codePropertiesControlFor<StyleBlockModel>('style', CssLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StyleBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StyleBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [StyleBlockComponentOptions|undefined|null]> = options => options?.content ? [options?.content] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StyleBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel, CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result.content);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}",null,"import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}"],"names":["CssLanguageModel","LanguageModel","editor","getModel","getValue","StyleBlockModel","constructor","value","style","mapValuesToThis","this","StyleBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","codePropertiesControlFor","addDescendant","metadata","options","content","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","dialog","super","showCodeEditor","isBlank","property","languageModel","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","form","get","afterClosed","isPresent","control","FormControl","setValue","CodePropertiesControl","i0","_changeDetector","_extractor","_initialized","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges"],"sourceRoot":""}