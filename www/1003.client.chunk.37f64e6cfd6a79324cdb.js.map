{"version":3,"file":"1003.client.chunk.37f64e6cfd6a79324cdb.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/dynamicItems/submitButton/submitButton.metadata.ts","webpack://ng-universal-demo/./app/dynamicItems/submitButton/submitButton.component.ts","webpack://ng-universal-demo/./app/dynamicItems/submitButton/submitButton.component.html","webpack://ng-universal-demo/./app/dynamicItems/submitButton/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {SubmitButtonComponentOptions} from './submitButton.options';\n\n/**\n * Submit button layout metadata loader\n */\nexport const SubmitButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<SubmitButtonComponentOptions>> = async () => new (await import('./metadata/submitButton.layoutMetadata')).SubmitButtonLayoutEditorMetadata();\n\n/**\n * Submit button relations metadata loader\n */\nexport const SubmitButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/submitButton.relationsMetadata')).SubmitButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {SubmitButtonComponentOptions} from './submitButton.options';\nimport {SubmitButtonLayoutMetadataLoader, SubmitButtonRelationsMetadataLoader} from './submitButton.metadata';\n\n/**\n * Component used for displaying submit button\n */\n@Component(\n{\n    selector: 'submit-button-component',\n    templateUrl: 'submitButton.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(SubmitButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(SubmitButtonLayoutMetadataLoader)\nexport class SubmitButtonSAComponent extends LayoutComponentBase<SubmitButtonComponentOptions> implements LayoutComponent<SubmitButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting new void object value when clicked\n     */\n    @DynamicOutput()\n    public click: VoidObject = {};\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n    }\n}","<button type=\"submit\" [disabled]=\"disabled\" [ngClass]=\"options?.buttonCssClass ?? ''\" (click)=\"click = {}\">\n    <span>{{options?.text}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {SubmitButtonSAComponent} from './submitButton.component';\n\nexport default SubmitButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["SubmitButtonLayoutMetadataLoader","SubmitButtonLayoutEditorMetadata","SubmitButtonRelationsMetadataLoader","SubmitButtonRelationsEditorMetadata","SubmitButtonSAComponent","LayoutComponentBase","constructor","disabled","click","onOptionsSet","this","options","selectors","inputs","standalone","features","decls","vars","consts","template","i0","CommonModule","styles","changeDetection","__decorate","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","target","propertyKey","prop","Object","defineProperty","get","Subject","set","value","defineAssignedProp","sync","next","ɵɵinjector","componentManager","RelationsComponentManager","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp","relationsProcessor","metadata","instance","RelationsProcessor","registerComponent","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}