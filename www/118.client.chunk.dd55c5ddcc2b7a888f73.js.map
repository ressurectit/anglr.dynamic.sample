{"version":3,"file":"118.client.chunk.dd55c5ddcc2b7a888f73.js","mappings":"wUAMO,MAAMA,EAAgC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAkDC,iCAAkC,E,+KAAA,kBAAxK,mCCOtC,IAAMC,EAAN,MAAAC,cAcI,KAAAC,OAAiB,EAKjB,KAAAC,OAAiB,CA8B5B,CAfWC,YAAYC,KAEZC,EAAAA,EAAAA,GAA2B,WAAYD,IACvCC,EAAAA,EAAAA,GAA2B,WAAYD,KAEtCE,KAAKC,OAASD,KAAKL,OAASK,KAAKJ,MAEzC,CAKOM,oBAEP,IAtBAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,4DA1BPX,GAAkB,UAF9BY,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBf,IACZE,GCXb,S,mFCWM,SAAUW,EAAcG,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIG,IAAK,WAOD,OALIb,KAAK,IAAIU,aAETV,KAAK,IAAIU,WAAgB,IAAII,EAAAA,GAG1Bd,KAAK,IAAIU,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIG,IAAK,WAED,OAAOb,KAAK,IAAIU,IACpB,EACAK,IAAK,SAASC,GAKV,GAHAhB,KAAK,IAAIU,KAAUM,GACnBC,EAAAA,EAAAA,IAAmBjB,KAAMU,GAEtBH,GAASW,KAERlB,KAAK,GAAGU,WAAcS,WAG1B,CACI,MAAMC,EAAYpB,KAA+BqB,WAEjD,IAAID,EAEA,OAGJ,MAAME,EAAmBF,EAASP,IAAIU,EAAAA,GAChCC,EAAiBJ,EAASP,IAAIY,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAM3B,MAElC,IAAI0B,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYpB,G,CAGxB,IAGvBH,GAASwB,WAERC,EAAAA,EAAAA,IAAmBxB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/logicalOr/logicalOr.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/logicalOr/logicalOr.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/logicalOr/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Logical or relations metadata loader\n */\nexport const LogicalOrRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/logicalOr.relationsMetadata')).LogicalOrRelationsEditorMetadata();\n","import {SimpleChanges} from '@angular/core';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {LogicalOrRelationsMetadataLoader} from './logicalOr.metadata';\nimport {LogicalOrRelationsOptions} from './logicalOr.options';\n\n/**\n * Logical or relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(LogicalOrRelationsMetadataLoader)\nexport class LogicalOrRelations implements RelationsComponent<LogicalOrRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: LogicalOrRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n    \n    /**\n     * Condition 1 which value will used in logical or operation\n     */\n    public cond1: boolean = false;\n\n    /**\n     * Condition 2 which value will used in logical or operation\n     */\n    public cond2: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Logical or result value\n     */\n    @DynamicOutput()\n    public result: boolean|undefined|null;\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LogicalOrRelations>('cond1') in changes ||\n           nameof<LogicalOrRelations>('cond2') in changes)\n        {\n            this.result = this.cond1 || this.cond2;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {LogicalOrRelations} from './logicalOr.relations';\n\nexport default LogicalOrRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["LogicalOrRelationsMetadataLoader","LogicalOrRelationsEditorMetadata","LogicalOrRelations","constructor","cond1","cond2","ngOnChanges","changes","nameof","this","result","invalidateVisuals","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","options","target","propertyKey","prop","Object","defineProperty","get","Subject","set","value","defineAssignedProp","sync","next","injector","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}