{"version":3,"file":"8712.client.chunk.46edd5556c3e7ed7215c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataBlock/dataBlock.metadata.ts","webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataBlock/dataBlock.component.ts","webpack://ng-universal-demo/../../../handlebars-components/src/dynamicItems/dataBlock/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\n\n/**\n * Data block layout metadata loader\n */\nexport const DataBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<DataBlockComponentOptions>> = async () => new (await import('./metadata/dataBlock.layoutMetadata')).DataBlockLayoutEditorMetadata();\n\n/**\n * Data block relations metadata loader\n */\nexport const DataBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/dataBlock.relationsMetadata')).DataBlockRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, SimpleChanges, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\nimport Handlebars from 'handlebars';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\nimport {DataBlockLayoutMetadataLoader, DataBlockRelationsMetadataLoader} from './dataBlock.metadata';\n\n/**\n * Component used for displaying data block\n */\n@Component(\n{\n    selector: 'data-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(DataBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(DataBlockLayoutMetadataLoader)\nexport class DataBlockSAComponent extends LayoutComponentBase<DataBlockComponentOptions> implements LayoutComponent<DataBlockComponentOptions>, RelationsComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of compiled template\n     */\n    protected compiledTemplate: HandlebarsTemplateDelegate|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of data to be set to template\n     */\n    @Input()\n    public data: any;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public override async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.ngOnChanges(changes);\n\n        if(nameof<DataBlockSAComponent>('data') in changes)\n        {\n            this.componentElement.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        if(this.options?.template)\n        {\n            this.compiledTemplate = Handlebars.compile(this.options.template);\n        }\n\n        this.componentElement.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {DataBlockSAComponent} from './dataBlock.component';\n\nexport default DataBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["DataBlockLayoutMetadataLoader","DataBlockLayoutEditorMetadata","DataBlockRelationsMetadataLoader","DataBlockRelationsEditorMetadata","DataBlockSAComponent","LayoutComponentBase","ngOnChanges","changes","nameof","componentElement","nativeElement","innerHTML","compiledTemplate","data","onOptionsSet","this","initialized","options","template","Handlebars","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","injector","logger","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","LOGGER","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}