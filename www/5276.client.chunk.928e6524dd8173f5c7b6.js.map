{"version":3,"file":"5276.client.chunk.928e6524dd8173f5c7b6.js","mappings":"0WAMO,MAAMA,EAA4B,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAA8CC,6BAA8B,E,+KAAA,kBAAhK,mC,yHCQlC,IAAMC,EAAN,MAmBQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EAEzBF,KAAKG,YACT,CAmBAC,YAAsBC,GAAA,KAAAA,SAAAA,EAnCZ,KAAAC,aAA6BN,KAAKK,SAASE,IAAIC,EAAAA,EAqCzD,CAOOC,YAAYC,IAEZC,EAAAA,EAAAA,GAAuB,eAAgBD,IAEtCV,KAAKY,MAAQZ,KAAKa,UAE1B,CAOOC,oBAEP,CAOUX,aAAU,WAEhB,GAAGH,KAAKD,kBAEDC,KAAKD,iBAAiBgB,eAErB,IAAI,MAAMC,KAAQhB,KAAKD,iBAAiBgB,eACxC,CACI,MAAME,EAAgBjB,KAAKD,iBAAiBgB,eAAeC,GAExDC,EAAcC,MAEbC,OAAOC,eAAepB,KACAgB,EACA,CACIK,cAAc,EACdC,YAAY,EACZC,IAAK,WAAF,I,EAAA,G,EAAE,UAAMrB,GAEP,IAAIe,EAAcC,KAEd,OAGJ,MAAMM,QAAkB,EAAKlB,aAAamB,SAAwBR,EAAcS,GAAIT,EAAcC,MAElG,GAAIM,EAKJ,IAEIA,EAAUG,KAAK,EAAfH,CAAqBtB,E,CAEzB,MAAM0B,GAEFC,QAAQC,MAAMF,E,CAEtB,E,+KAAC,mDAtBI,I,CA4BnD,IAxFAG,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,OAAO,gEAQRD,EAAAA,EAAAA,IAAAA,EAACE,EAAAA,EAAAA,MAAe,2DA3CPnC,GAAc,UAF1BoC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBvC,IAA6B,6BAgDlBwC,EAAAA,KA/CvBtC,GCZb,S,mFCWM,SAAUmC,EAAcI,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbpB,OAAOC,eAAekB,EACA,GAAGE,UACH,CACIjC,IAAK,WAOD,OALIP,KAAK,IAAIwC,aAETxC,KAAK,IAAIwC,WAAgB,IAAIC,EAAAA,GAG1BzC,KAAK,IAAIwC,UACpB,IAG1BrB,OAAOC,eAAekB,EACAE,EACA,CACIjC,IAAK,WAED,OAAOP,KAAK,IAAIwC,IACpB,EACAjB,IAAK,SAASrB,GAKV,GAHAF,KAAK,IAAIwC,KAAUtC,GACnBwC,EAAAA,EAAAA,IAAmB1C,KAAMwC,GAEtBH,GAASM,KAER3C,KAAK,GAAGwC,WAAcI,WAG1B,CACI,MAAMvC,EAAYL,KAA+B6C,WAEjD,IAAIxC,EAEA,OAGJ,MAAMyC,EAAmBzC,EAASE,IAAIwC,EAAAA,GAChCC,EAAiB3C,EAASE,IAAI0C,EAAAA,GAC9BvB,EAAKoB,EAAiBI,MAAMlD,MAElC,IAAI0B,EAEA,OAGJsB,EAAeG,aACf,CACIC,YAAa1B,EACb2B,WAAYb,G,CAGxB,IAGvBH,GAASiB,WAERC,EAAAA,EAAAA,IAAmBjB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/state/state.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/state/state.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/state/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * State relations metadata loader\n */\nexport const StateRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/state.relationsMetadata')).StateRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {CodeExecutor, DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {StateRelationsMetadataLoader} from './state.metadata';\nimport {StateRelationsOptions} from './state.options';\nimport {StatefullClass, InputFunction} from './state.interface';\n\n/**\n * State relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(StateRelationsMetadataLoader)\nexport class StateRelations<TState = unknown> implements RelationsComponent<StateRelationsOptions>, StatefullClass<TState>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: StateRelationsOptions|undefined|null;\n\n    /**\n     * Code executor used for execution o\n     */\n    protected codeExecutor: CodeExecutor = this.injector.get(CodeExecutor);\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): StateRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: StateRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Initial state value that is set\n     */\n    @Input()\n    public initState: TState|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Data that represents current state\n     */\n    @DynamicOutput()\n    public state: TState|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<StateRelations>('initState') in changes)\n        {\n            this.state = this.initState;\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.inputFunctions)\n            {\n                for(const name in this.relationsOptions.inputFunctions)\n                {\n                    const inputFuncData = this.relationsOptions.inputFunctions[name];\n\n                    if(inputFuncData.code)\n                    {\n                        Object.defineProperty(this,\n                                              name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: async value =>\n                                                  {\n                                                      if(!inputFuncData.code)\n                                                      {\n                                                          return;\n                                                      }\n\n                                                      const inputFunc = await this.codeExecutor.loadData<InputFunction>(inputFuncData.id, inputFuncData.code);\n  \n                                                      if(!inputFunc)\n                                                      {\n                                                          return;\n                                                      }\n                                          \n                                                      try\n                                                      {\n                                                          inputFunc.bind(this)(value);\n                                                      }\n                                                      catch(e)\n                                                      {\n                                                          console.error(e);\n                                                      }\n                                                  }\n                                              });\n                    }\n                }\n            }\n        }\n    }\n}","import {StateRelations} from './state.relations';\n\nexport default StateRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["StateRelationsMetadataLoader","StateRelationsEditorMetadata","StateRelations","relationsOptions","this","ɵRelationsOptions","value","initialize","constructor","injector","codeExecutor","get","CodeExecutor","ngOnChanges","changes","nameof","state","initState","invalidateVisuals","inputFunctions","name","inputFuncData","code","Object","defineProperty","configurable","enumerable","set","inputFunc","loadData","id","bind","e","console","error","__decorate","Input","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector","options","target","propertyKey","prop","Subject","defineAssignedProp","sync","next","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}