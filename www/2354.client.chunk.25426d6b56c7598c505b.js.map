{"version":3,"file":"2354.client.chunk.25426d6b56c7598c505b.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/misc/validationErrorsContainerView.ts","webpack://ng-universal-demo/../../../src/animations/animateChildren/animateChildren.animation.ts","webpack://ng-universal-demo/../../../src/triggers/animateChildren/animateChildren.trigger.ts","webpack://ng-universal-demo/../../../forms/src/components/defaultValidationErrors/defaultValidationErrors.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/common/forms/src/components/defaultValidationErrors/defaultValidationErrors.component.html","webpack://ng-universal-demo/../../../forms/src/components/defaultValidationErrors/defaultValidationErrors.component.html","webpack://ng-universal-demo/../../../forms/src/components/defaultValidationErrorsContainer/defaultValidationErrorsContainer.component.ts","webpack://ng-universal-demo/../../../forms/src/services/errorMessagesExtractor/errorMessagesExtractor.service.ts","webpack://ng-universal-demo/../../../forms/src/services/validationErrorRenderer/validationErrorRenderer.service.ts","webpack://ng-universal-demo/../../../forms/src/directives/groupHasError/groupHasError.directive.ts","webpack://ng-universal-demo/../../../forms/src/directives/hasError/hasError.directive.ts","webpack://ng-universal-demo/../../../forms/src/services/submitted/submitted.service.ts","webpack://ng-universal-demo/../../../rxjs/src/utils/common.ts"],"sourcesContent":["import {ViewContainerRef} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Class that holds validation errors view container\n */\nexport class ValidationErrorsContainerView\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current instance of view container\n     */\n    private _viewContainer: ViewContainerRef;\n    \n    /**\n     * Used for emitting viewContainer changes\n     */\n    private _viewContainerChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets or sets current instance of view container\n     */\n    public get viewContainer(): ViewContainerRef\n    {\n        return this._viewContainer;\n    }\n    public set viewContainer(value: ViewContainerRef)\n    {\n        this._viewContainer = value;\n        this._viewContainerChange.next();\n    }\n\n    /**\n     * Occurs when view container instance changes\n     */\n    public get viewContainerChange(): Observable<void>\n    {\n        return this._viewContainerChange.asObservable();\n    }\n}","import {animateChild, animation, AnimationReferenceMetadata, query} from '@angular/animations';\n\n/**\n * Animates children animations\n */\nexport const animateChildrenAnimation: AnimationReferenceMetadata = animation(\n[\n    query('@*', animateChild(), {optional: true})\n]);\n","import {trigger, transition, useAnimation} from '@angular/animations';\n\nimport {animateChildrenAnimation} from '../../animations/animateChildren/animateChildren.animation';\n\n/**\n * Animate children trigger\n */\nexport const animateChildrenTrigger = trigger('animateChildren',\n[\n    transition(':enter, :leave',\n    [\n        useAnimation(animateChildrenAnimation)\n    ])\n]);\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding} from '@angular/core';\nimport {slideInOutTrigger, animateChildrenTrigger} from '@anglr/animations';\n\nimport {ValidationErrorsResult} from '../../services/errorMessagesExtractor/errorMessagesExtractor.interface';\nimport {ValidationErrorsComponent, ValidationErrorsOptions} from '../../services/validationErrorRenderer/validationErrorRenderer.interface';\n\n/**\n * Default validation errors component, displaying validation errors\n */\n@Component(\n{\n    selector: 'default-validation-errors',\n    templateUrl: 'defaultValidationErrors.component.html',\n    styleUrls: ['defaultValidationErrors.component.css'],\n    animations: \n    [\n        slideInOutTrigger,\n        animateChildrenTrigger\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultValidationErrorsComponent implements ValidationErrorsComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Errors to be shown\n     * @internal\n     */\n    public errors: ValidationErrorsResult;\n    \n    /**\n     * Options used for displaying validation errors\n     * @internal\n     */\n    public options: ValidationErrorsOptions;\n\n    //######################### public properties - host #########################\n\n    /**\n     * Enables leave animations for internal stuff\n     */\n    @HostBinding('@animateChildren')\n    public animate: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef)\n    {\n    }\n\n    //######################### public methods - implementation of ValidationErrorsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public show(errors: ValidationErrorsResult, options: ValidationErrorsOptions): void\n    {\n        this.errors = errors;\n        this.options = options;\n\n        this._changeDetector.detectChanges();\n    }\n}",null,"<div [ngClass]=\"options?.wrapperDivClass\" *ngIf=\"errors?.errorMessages?.length\" @slideInOut>\n    <div *ngFor=\"let error of errors?.errorMessages\">{{error}}</div>\n</div>","import {Component, ChangeDetectionStrategy, ViewContainerRef, ComponentRef, EmbeddedViewRef} from '@angular/core';\n\nimport {ValidationErrorsResult} from '../../services/errorMessagesExtractor/errorMessagesExtractor.interface';\nimport {ValidationErrorsComponent, ValidationErrorsContainerComponent, ValidationErrorsContainerOptions, ValidationErrorsTemplateContext} from '../../services/validationErrorRenderer/validationErrorRenderer.interface';\n\n/**\n * Component that serves as container for validation errors, either component or templates\n */\n@Component(\n{\n    selector: 'default-validation-errors-container',\n    template: '',\n    styleUrls: ['defaultValidationErrorsContainer.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultValidationErrorsContainerComponent implements ValidationErrorsContainerComponent\n{\n    //######################### protected fields #########################\n\n    /**\n     * Errors to be shown\n     * @internal\n     */\n    protected _errors: ValidationErrorsResult;\n    \n    /**\n     * Options used for displaying validation errors\n     * @internal\n     */\n    protected _options: ValidationErrorsContainerOptions;\n\n    /**\n     * Instance of component reference for rendered errors\n     */\n    protected _component: ComponentRef<ValidationErrorsComponent>;\n\n    /**\n     * Instance of template reference for rendered errors\n     */\n    protected _template: EmbeddedViewRef<ValidationErrorsTemplateContext>;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainer: ViewContainerRef)\n    {\n    }\n\n    //######################### public methods - implementation of  #########################\n\n    /**\n     * Shows validation errors\n     * @param errors - Errors to be shown\n     * @param options - Options used for displaying validation errors\n     * @param errorClasses - Array of css error classes\n     */\n    public show(errors: ValidationErrorsResult, options: ValidationErrorsContainerOptions): void\n    {\n        this._errors = errors;\n        this._options = options;\n\n        if(options.template)\n        {\n            this._renderTemplate();\n        }\n        else if(options.component)\n        {\n            this._renderComponent();\n        }\n        else\n        {\n            throw new Error('Missing template or component for rendering validation errors!');\n        }\n    }\n\n    /**\n     * Hides validation errors\n     */\n    public hide(): void\n    {\n        this._viewContainer.clear();\n        this._component = null;\n        this._template = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Renders validation errors component\n     */\n    protected _renderComponent(): void\n    {\n        if(!this._component)\n        {\n            this._component = this._viewContainer.createComponent(this._options.component);\n        }\n\n        this._component.instance.show(this._errors, this._options);\n    }\n\n    /**\n     * Renders validation errors template\n     */\n    protected _renderTemplate(): void\n    {\n        if(!this._template)\n        {\n            this._template = this._viewContainer.createEmbeddedView(this._options.template,\n            {\n                $implicit: this._errors,\n                options: this._options\n            });\n        }\n        else\n        {\n            this._template.context =\n            {\n                $implicit: this._errors,\n                options: this._options\n            };\n\n            this._template.detectChanges();\n        }\n    }\n}","import {Injectable, Inject, Optional} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {StringLocalization, STRING_LOCALIZATION} from '@anglr/common';\nimport {StringDictionary, extend, isString} from '@jscrpt/common';\n\nimport {IGNORED_VALIDATION_ERRORS, VALIDATION_ERROR_MESSAGES} from '../../misc/tokens';\nimport {ValidationErrorsResult} from './errorMessagesExtractor.interface';\n\n/**\n * Default error messages displayed\n */\nconst defaultErrorMessages: StringDictionary =\n{\n    required: 'Field is required.',\n    number: 'Value must be number.',\n    pattern: 'Value is not valid.',\n    minValue: 'Value is too small.',\n    maxValue: 'Value is too big.',\n    minlength: 'Value is short.',\n    maxlength: 'Value is too long.'\n};\n\n/**\n * Service used for extracting error messages from form control\n */\n@Injectable({providedIn: 'root'})\nexport class ErrorMessagesExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Dictionary with error names that have defined message\n     */\n    protected _errorMessages: StringDictionary;\n\n    //######################### constructor #########################\n    constructor(@Inject(STRING_LOCALIZATION) protected _stringLocalization: StringLocalization,\n                @Inject(IGNORED_VALIDATION_ERRORS) protected _ignoredValidationErrors: string[],\n                @Inject(VALIDATION_ERROR_MESSAGES) @Optional() globalErrorMessages?: StringDictionary)\n    {\n        this._errorMessages = extend(true, {}, defaultErrorMessages, globalErrorMessages);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validation errors result for provided control, or null of no errors are present\n     * @param control - Form control instance that should be inspected for errors\n     * @param messages - Object containing error messages that should patch existing error messages\n     */\n    public getErrors(control: FormControl, messages?: StringDictionary): ValidationErrorsResult\n    {\n        const errorMessages: StringDictionary = extend(true, {}, this._errorMessages, messages);\n\n        //no control or no errors\n        if(!control || !control.errors)\n        {\n            return null;\n        }\n\n        const result: ValidationErrorsResult =\n        {\n            errors: Object.keys(control.errors).filter(itm => this._ignoredValidationErrors.indexOf(itm) < 0),\n            errorMessages: []\n        };\n\n        result.errors.forEach(error =>\n        {\n            const errorData = control.errors[error];\n            \n            //error message is present for error\n            if(errorMessages[error])\n            {\n                result.errorMessages.push(this._stringLocalization.get(errorMessages[error], control.errors));\n            }\n            //display error data if it is string and there is missing translation\n            else if(isString(errorData))\n            {\n                result.errorMessages.push(errorData);\n            }\n            //error data are array of strings, each string is considered error message\n            else if(Array.isArray(errorData))\n            {\n                errorData.forEach(errorItm =>\n                {\n                    if(isString(errorItm))\n                    {\n                        result.errorMessages.push(this._stringLocalization.get(errorItm, control.errors));\n                    }\n                });\n            }\n        });\n\n        return result;\n    }\n}","import {Injectable, Inject, Optional, Injector, ComponentRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {extend, StringDictionary} from '@jscrpt/common';\n\nimport {ErrorMessagesExtractor} from '../errorMessagesExtractor/errorMessagesExtractor.service';\nimport {ValidationErrorRenderer, IsSubmittedOrDirtyFunc, ValidationErrorsRendererOptions, ValidationErrorRendererFactoryOptions, ValidationErrorsContainerComponent} from './validationErrorRenderer.interface';\nimport {ValidationErrorsResult} from '../errorMessagesExtractor/errorMessagesExtractor.interface';\nimport {VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '../../misc/tokens';\nimport {ValidationErrorsContainerView} from '../../misc/validationErrorsContainerView';\nimport {DefaultValidationErrorsComponent, DefaultValidationErrorsContainerComponent} from '../../components';\n\n/**\n * Service used for creating validation errors renderer\n */\n@Injectable({providedIn: 'root'})\nexport class ValidationErrorRendererFactory\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for validation error renderer factory\n     */\n    protected _options: ValidationErrorRendererFactoryOptions;\n\n    //######################### constructor #########################\n    constructor(protected _errorMessagesExtractor: ErrorMessagesExtractor,\n                @Optional() @Inject(VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS) options: ValidationErrorRendererFactoryOptions)\n    {\n        this._options = extend(true, {}, DEFAULT_OPTIONS, options);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Creates new instance of ValidationErrorRenderer\n     * @param control - Control that is being processed for errors\n     * @param containerView - Class that stores view container for rendering errors\n     * @param injector - Injector for obtaining dependencies\n     * @param isSubmittedOrDirty - Function used for testing if control is submitted or dirty\n     */\n    public create(control: FormControl,\n                  containerView: ValidationErrorsContainerView,\n                  injector: Injector,\n                  isSubmittedOrDirty: IsSubmittedOrDirtyFunc): ValidationErrorRenderer\n    {\n        return new this._options.rendererType(this._errorMessagesExtractor,\n                                              control,\n                                              containerView,\n                                              injector,\n                                              isSubmittedOrDirty,\n                                              this._options);\n    }\n}\n\n/**\n * Default implementation of validation error renderer\n */\nexport class DefaultValidationErrorRenderer implements ValidationErrorRenderer\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing last obtained errors\n     */\n    protected _lastErrors: ValidationErrorsResult;\n\n    /**\n     * Component used as validation errors container\n     */\n    protected _container: ComponentRef<ValidationErrorsContainerComponent>;\n\n    //######################### constructor #########################\n    constructor(protected _errorMessagesExtractor: ErrorMessagesExtractor,\n                protected _control: FormControl,\n                protected _containerView: ValidationErrorsContainerView,\n                protected _injector: Injector,\n                protected _isSubmittedOrDirty: IsSubmittedOrDirtyFunc,\n                protected _options: ValidationErrorsRendererOptions)\n    {\n        this._initialize();\n    }\n\n    //######################### public methods - implementation of ValiDationErrorRenderer #########################\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._containerView.viewContainer.clear();\n        this._container = null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public update(options: ValidationErrorsRendererOptions, errorMessages?: StringDictionary): boolean\n    {\n        let result = false;\n        this._lastErrors = this._errorMessagesExtractor.getErrors(this._control, errorMessages);\n\n        //has errors\n        if(this._lastErrors)\n        {\n            this._isSubmittedOrDirty(() =>\n                                     {\n                                         // const errorsClasses = this._lastErrors.errors.map(error => `${this._options.prefix}${error.toLowerCase()}${this._options.suffix}`);\n                                         const opts = extend(true, {}, this._options, options);\n\n                                         this._container.instance.show(this._lastErrors, opts);\n                                         result = true;\n                                     },\n                                     () =>\n                                     {\n                                         this._container.instance.hide();\n                                         result = false;\n                                     });\n        }\n        else\n        {\n            this._container.instance.hide();\n            result = false;\n        }\n\n        return result;\n    }\n\n    /**\n     * Initialize renderer\n     */\n    protected _initialize(): void\n    {\n        this._container = this._containerView.viewContainer.createComponent(this._options.container, {injector: this._injector});\n        this._container.instance.hide();\n    }\n}\n\n/**\n * Default options for validation error renderer factory\n */\nconst DEFAULT_OPTIONS: ValidationErrorRendererFactoryOptions =\n{\n    prefix: 'ng-',\n    suffix: '-error',\n    wrapperDivClass: 'validation-error-div',\n    rendererType: DefaultValidationErrorRenderer,\n    component: DefaultValidationErrorsComponent,\n    container: DefaultValidationErrorsContainerComponent,\n};","import {Directive, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\n/**\n * Default options for GroupHasErrorDirective\n */\nconst defaultOptions: GroupHasErrorOptions =\n{\n    cssClass: 'has-error'\n};\n\n/**\n * Options for GroupHasErrorDirective\n */\nexport interface GroupHasErrorOptions\n{\n    /**\n     * Css class applied to element when there is an error\n     */\n    cssClass?: string;\n}\n\n/**\n * Directive that is attached to parent element of inputs group and handles css class that is added to this element\n */\n@Directive(\n{\n    selector: '[groupHasError]'\n})\nexport class GroupHasErrorDirective\n{\n    //######################### private fields #########################\n\n    /**\n     * Options for this directive\n     */\n    private _options: GroupHasErrorOptions = null;\n\n    /**\n     * Array of invalid controls\n     */\n    private _invalidControls: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _element: ElementRef<HTMLElement>)\n    {\n        this._options = extend(true, {}, defaultOptions);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Registers control as invalid control\n     * @param id - Name of control to be registered\n     */\n    public registerControl(id: string): void\n    {\n        //control is not registered yet\n        if(!this._invalidControls.find(itm => itm == id))\n        {\n            this._invalidControls.push(id);\n        }\n\n        this._updateStatus();\n    }\n\n    /**\n     * Unregisters control from invalid controls\n     * @param id - Id of control to be unregistered\n     */\n    public unregisterControl(id: string): void\n    {\n        //control was registered already\n        if(this._invalidControls.find(itm => itm == id))\n        {\n            this._invalidControls.splice(this._invalidControls.indexOf(id), 1);\n        }\n\n        this._updateStatus();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Updates status of element (css classes)\n     */\n    private _updateStatus(): void\n    {\n        if(this._invalidControls.length)\n        {\n            this._element.nativeElement.classList.add(this._options.cssClass);\n        }\n        else\n        {\n            this._element.nativeElement.classList.remove(this._options.cssClass);\n        }\n    }\n}","import {Directive, ElementRef, Optional, SkipSelf, OnInit, OnDestroy, Inject, Input, Injector, ViewContainerRef, AfterViewInit, Type, TemplateRef} from '@angular/core';\nimport {FormControlDirective, FormControlName, FormControl, NgModel} from '@angular/forms';\nimport {StringLocalization, STRING_LOCALIZATION} from '@anglr/common';\nimport {generateId, BindThis, StringDictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ValidationErrorRendererFactory} from '../../services/validationErrorRenderer/validationErrorRenderer.service';\nimport {ValidationErrorRenderer, ValidationErrorsComponent, ValidationErrorsRendererOptions, ValidationErrorsTemplateContext} from '../../services/validationErrorRenderer/validationErrorRenderer.interface';\nimport {SubmittedService} from '../../services/submitted/submitted.service';\nimport {GroupHasErrorDirective} from '../groupHasError/groupHasError.directive';\nimport {ValidationErrorsContainerView} from '../../misc/validationErrorsContainerView';\n\n//TODO - add support for setting renderer factory options using input\n\n/**\n * Directive that is attached to control element and handles css classes that are added to this element\n */\n@Directive(\n{\n    selector: '[hasError]'\n})\nexport class HasErrorDirective implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Subscriptions that are destroyed with destruction of this directive\n     */\n    private _subscriptions: Subscription = new Subscription();\n\n    /**\n     * Unique generated id of control\n     */\n    private _id: string = generateId(10);\n\n    /**\n     * Last value of control pristine attribute\n     */\n    private _previousDirty: boolean = false;\n\n    /**\n     * Indication whether currently are any errors rendered\n     */\n    private _hasErrors: boolean = false;\n\n    /**\n     * Mutation observer used for observing changes on class of element\n     */\n    private _observer: MutationObserver;\n\n    //######################### private properties #########################\n\n    /**\n     * Gets control which was assigned to this element\n     */\n    private get control(): FormControl\n    {\n        return this._formControl?.control || this._formControlName?.control || this._ngModel?.control;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Instance of validation error renderer\n     */\n    public renderer: ValidationErrorRenderer;\n\n    //######################### public propeties - inputs #########################\n\n    /**\n     * Customized error messages\n     */\n    @Input()\n    public errorMessages: StringDictionary;\n\n    /**\n     * Custom component used for rendering validation errors\n     */\n    @Input()\n    public errorsComponent?: Type<ValidationErrorsComponent>;\n\n    /**\n     * Custom template used for rendering validation errors\n     */\n    @Input()\n    public errorsTemplate?: TemplateRef<ValidationErrorsTemplateContext>;\n\n    //######################### constructor #########################\n    constructor(private _element: ElementRef<HTMLElement>,\n                private _rendererFactory: ValidationErrorRendererFactory,\n                private _viewContainer: ViewContainerRef,\n                @Optional() @SkipSelf() private _groupHasError: GroupHasErrorDirective,\n                @Optional() private _formControl: FormControlDirective,\n                @Optional() private _formControlName: FormControlName,\n                @Optional() private _ngModel: NgModel,\n                @Optional() private _submittedSvc: SubmittedService,\n                @Optional() private _containerView: ValidationErrorsContainerView,\n                @Inject(STRING_LOCALIZATION) protected _stringLocalization: StringLocalization,\n                protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._containerView ??= new ValidationErrorsContainerView();\n        this._containerView.viewContainer ??= this._viewContainer;\n\n        this._registerMutationObserver();\n\n        this._subscriptions.add(this._stringLocalization.textsChange.subscribe(() => this._updateStatus()));\n        this._subscriptions.add(this.control.statusChanges.subscribe(() => this._updateStatus()));\n\n        if(this._submittedSvc)\n        {\n            this._subscriptions.add(this._submittedSvc.submittedChange.subscribe(() => this._isSubmittedOrDirty(() => this._updateStatus())));\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.renderer = this._rendererFactory.create(this.control,\n                                                     this._containerView,\n                                                     this._injector,\n                                                     this._isSubmittedOrDirty);\n\n        this._updateStatus();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._subscriptions.unsubscribe();\n\n        this._groupHasError?.unregisterControl(this._id);\n        this._observer?.disconnect();\n        this.renderer?.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Updates status of control and css classes\n     */\n    private _updateStatus(): void\n    {\n        if(!this.renderer)\n        {\n            return;\n        }\n\n        const opts: ValidationErrorsRendererOptions = {};\n\n        if(this.errorsTemplate)\n        {\n            opts.template = this.errorsTemplate;\n        }\n        else if(this.errorsComponent)\n        {\n            opts.component = this.errorsComponent;\n        }\n\n        this._previousDirty = this.control.dirty;\n        this._hasErrors = this.renderer.update(opts, this.errorMessages);\n        this._toggleGroupHasError();\n    }\n\n    /**\n     * Toggles registration of control in parent group\n     */\n    private _toggleGroupHasError(): void\n    {\n        if(this._groupHasError)\n        {\n            this._isSubmittedOrDirty(() => this._groupHasError.registerControl(this._id),\n                                     () => this._groupHasError.unregisterControl(this._id),\n                                     this._hasErrors);\n        }\n    }\n\n    /**\n     * Calls action when form is submitted or control is dirty\n     * @param action - Action to be called when form is submitted or control dirty\n     * @param falseAction - Action to be called when form is not submitted and control is not dirty\n     * @param additionalCondition - Additional condition to be evaluated\n     */\n    @BindThis\n    private _isSubmittedOrDirty(action: () => void, falseAction: () => void = () => {}, additionalCondition: boolean = true): void\n    {\n        //submitted form or dirty control\n        if((this._submittedSvc?.submitted ||\n            this.control?.dirty) &&\n           additionalCondition)\n        {\n            action();\n        }\n        else\n        {\n            falseAction();\n        }\n    }\n\n    /**\n     * Registers mutation observer which watch for changes of class list\n     */\n    private _registerMutationObserver(): void\n    {\n        this._observer = new MutationObserver(() =>\n        {\n            if(this.control.dirty != this._previousDirty)\n            {\n                this._updateStatus();\n            }\n        });\n\n        this._observer.observe(this._element.nativeElement, \n        {\n            attributeFilter: ['class'],\n            attributes: true\n        });\n    }\n}","import {Injectable} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\n\n/**\n * Service used for handling submitted state of form\n */\n@Injectable()\nexport class SubmittedService\n{\n    //######################### private fields #########################\n\n    /**\n     * Subject for indication when submitted changes\n     */\n    private _submittedChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Indication whether was form submitted\n     */\n    private _submitted: boolean = false;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets indication whether was form submitted\n     */\n    public get submitted(): boolean\n    {\n        return this._submitted;\n    }\n\n    /**\n     * Occurs when indication whether was form submitted changes\n     */\n    public get submittedChange(): Observable<void>\n    {\n        return this._submittedChangeSubject.asObservable();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets submitted to true\n     * @param submitted - If set to false, sets submitted to false\n     */\n    public setSubmitted(submitted: boolean = true): void\n    {\n        if(this._submitted != submitted)\n        {\n            this._submitted = submitted;\n            this._submittedChangeSubject.next();\n        }\n    }\n}","import {lastValueFrom as rxjsLastValueFrom, Observable} from 'rxjs';\n\n/**\n * Method calls rxjs `lastValueFrom` with empty value `undefined` or provided emptyValue\n * @param source - Observable source to be processed\n * @param emptyValue - Empty value that is returned in case of `EmptyError`\n */\nexport function lastValueFrom<TResult, TEmpty = undefined>(source: Observable<TResult>, emptyValue?: TEmpty): Promise<TResult|TEmpty>\n{\n    return rxjsLastValueFrom<TResult, TEmpty>(source, {defaultValue: emptyValue as TEmpty});\n}\n"],"names":["ValidationErrorsContainerView","constructor","_viewContainerChange","Subject","viewContainer","this","_viewContainer","value","next","viewContainerChange","asObservable","animateChildrenAnimation","animation","query","animateChild","optional","animateChildrenTrigger","trigger","transition","useAnimation","DefaultValidationErrorsComponent","_changeDetector","animate","show","errors","options","detectChanges","i1","slideInOutTrigger","DefaultValidationErrorsContainerComponent","_errors","_options","template","_renderTemplate","component","Error","_renderComponent","hide","clear","_component","_template","createComponent","instance","context","$implicit","createEmbeddedView","defaultErrorMessages","required","number","pattern","minValue","maxValue","minlength","maxlength","ErrorMessagesExtractor","_stringLocalization","_ignoredValidationErrors","globalErrorMessages","_errorMessages","extend","getErrors","control","messages","errorMessages","result","Object","keys","filter","itm","indexOf","forEach","error","errorData","push","get","isString","Array","isArray","errorItm","STRING_LOCALIZATION","IGNORED_VALIDATION_ERRORS","VALIDATION_ERROR_MESSAGES","ValidationErrorRendererFactory","_errorMessagesExtractor","DEFAULT_OPTIONS","create","containerView","injector","isSubmittedOrDirty","rendererType","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","prefix","suffix","wrapperDivClass","_control","_containerView","_injector","_isSubmittedOrDirty","_initialize","destroy","_container","update","_lastErrors","opts","container","defaultOptions","cssClass","GroupHasErrorDirective","_element","_invalidControls","registerControl","id","find","_updateStatus","unregisterControl","splice","length","nativeElement","classList","add","remove","HasErrorDirective","_rendererFactory","_groupHasError","_formControl","_formControlName","_ngModel","_submittedSvc","_subscriptions","Subscription","_id","generateId","_previousDirty","_hasErrors","ngOnInit","_registerMutationObserver","textsChange","subscribe","statusChanges","submittedChange","ngAfterViewInit","renderer","ngOnDestroy","unsubscribe","_observer","disconnect","errorsTemplate","errorsComponent","dirty","_toggleGroupHasError","action","falseAction","additionalCondition","submitted","MutationObserver","observe","attributeFilter","attributes","BindThis","SubmittedService","_submittedChangeSubject","_submitted","setSubmitted","lastValueFrom","source","emptyValue","rxjsLastValueFrom","defaultValue"],"sourceRoot":""}