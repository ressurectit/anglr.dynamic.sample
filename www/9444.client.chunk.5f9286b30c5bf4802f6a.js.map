{"version":3,"file":"9444.client.chunk.5f9286b30c5bf4802f6a.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.model.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.html","webpack://ng-universal-demo/../../../relations-editor/src/pipes/toColor/toColor.pipe.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../../../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts"],"sourcesContent":["import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, OnDestroy, inject} from '@angular/core';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_HISTORY_MANAGER} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of resize observer\n     */\n    protected observer: ResizeObserver;\n\n    /**\n     * Metadata history manager\n     */\n    protected history: MetadataHistoryManager<RelationsNodeMetadata[]> = inject(RELATIONS_HISTORY_MANAGER);\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether user moved node during drag\n     */\n    protected moved: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n\n        this.observer = new ResizeObserver(() =>this.updateRelations());\n        this.observer.observe(this.element.nativeElement);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(): void\n    {\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.moved = false;\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.moved = true;\n\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            if(this.moved)\n            {\n                this.history.getNewState();\n            }\n\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, HostBinding, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Indication whether node endpoint is highlighted\n     */\n    @HostBinding('class.highlighted')\n    protected _isHighlighted: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Highlight node endpoit\n     */\n    public highlight(): void\n    {\n        this._isHighlighted = true;\n    }\n\n    /**\n     * Cancel highlight for node endpoint\n     */\n    public cancelHighlight(): void\n    {\n        this._isHighlighted = false;\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RelationsNodeProperties} from './relationsNodePropertiesEditor.interface';\n\n/**\n * Relations node properties model\n */\nexport class RelationsNodePropertiesModel implements RelationsNodeProperties\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public displayName: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public scope: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RelationsNodeProperties|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\n\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from './relationsNodePropertiesEditor.interface';\nimport {RelationsNodePropertiesModel} from './relationsNodePropertiesEditor.model';\n\n/**\n * Component used for editing display name of relations node\n */\n@Component(\n{\n    selector: 'relations-node-properties-editor',\n    templateUrl: 'relationsNodePropertiesEditor.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodePropertiesEditorSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control for editation of display name\n     */\n    protected form: FormGroup<FormModelGroup<RelationsNodeProperties>>;\n\n    /**\n     * Array of available scopes\n     */\n    protected scopes: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: RelationsNodePropertiesEditorData,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.form = formModelBuilder.build<RelationsNodeProperties>(new RelationsNodePropertiesModel(data.properties));\n        this.scopes = data.scopeRegister.scopes;\n    }\n}",null,"import {Pipe, PipeTransform} from '@angular/core';\n\nimport {stringToColour} from '../../misc/utils';\n\n/**\n * Converts string to color code\n */\n@Pipe({name: 'toColor', standalone: true})\nexport class ToColorSAPipe implements PipeTransform\n{\n    /**\n     * Converts string to color code\n     * @param value - String to be converted\n     */\n    public transform(value: string|undefined|null): string|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        return stringToColour(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {TooltipModule} from '@anglr/common';\nimport {lastValueFrom, Subject} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodePropertiesEditorSAComponent} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.component';\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.interface';\nimport {ToColorSAPipe} from '../../pipes/toColor/toColor.pipe';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\nimport {ScopeRegister} from '../../services';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        ToColorSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent relations node of node header\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    /**\n     * Subject used for destroying relations node\n     */\n    @Input()\n    public destroySubject: Subject<void>|undefined|null;\n\n    /**\n     * Name of node to be displayed\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected dialog: TitledDialogService,\n                protected changeDetector: ChangeDetectorRef,\n                protected scopeRegister: ScopeRegister,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Opens editation of properties\n     */\n    protected async editProperties(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RelationsNodePropertiesEditorSAComponent, RelationsNodePropertiesEditorData, RelationsNodeProperties|undefined|null>(RelationsNodePropertiesEditorSAComponent,\n        {\n            title: 'edit properties',\n            width: '30vw',\n            data: \n            {\n                properties: \n                {\n                    displayName: this.parent?.metadata?.displayName || this.name || this.parent?.metadata?.id || '',\n                    scope: this.parent?.metadata?.scope ?? '',\n                },\n                scopeConfigurable: this.parent?.metadata?.nodeMetadata?.scopeConfigurable ?? false,\n                scopeRegister: this.scopeRegister,\n            }\n        }).afterClosed());\n\n        if(result && this.parent?.metadata)\n        {\n            this.parent.metadata.displayName = result.displayName ?? undefined;\n            this.parent.metadata.scope = result.scope ?? undefined;\n            this.history.getNewState();\n\n            this.changeDetector.detectChanges();\n        }\n    }\n}",null,"import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n\n        this._relation?.highlight();\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n\n        this._relation?.cancelHighlight();\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.highlight());\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.cancelHighlight());\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}"],"names":["RelationsNodeBase","id","this","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","destroy","destroySubject","asObservable","constructor","changeDetector","element","history","inject","RELATIONS_HISTORY_MANAGER","initialized","isDragging","moved","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","Subject","zoomLevel","nativeElement","classList","add","updatePosition","observer","ResizeObserver","updateRelations","observe","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","ngOnDestroy","disconnect","invalidateVisuals","detectChanges","initEndpoints","initialize","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","onMouseUp","getNewState","updateInputs","inputsChildren","forEach","input","name","Object","freeze","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","style","left","top","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","RelationNodeEndpointBase","parentId","parent","_element","_relationManager","_canvas","_isDragging","_isHighlighted","_lastMouseDownPosition","parentCoordiantes","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","highlight","cancelHighlight","RelationsNodePropertiesModel","value","displayName","scope","mapValuesToThis","RelationsNodePropertiesEditorSAComponent","data","formModelBuilder","scopes","form","build","properties","scopeRegister","TITLED_DIALOG_DATA","FormModelBuilder","CommonModule","MatDialogModule","ReactiveFormsModule","ToColorSAPipe","transform","stringToColour","RelationsNodeHeaderSAComponent","dialog","editProperties","result","lastValueFrom","open","title","width","scopeConfigurable","afterClosed","undefined","TooltipModule","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","_"],"sourceRoot":""}