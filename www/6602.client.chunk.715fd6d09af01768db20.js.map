{"version":3,"file":"6602.client.chunk.715fd6d09af01768db20.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/components/formComponentBase/formComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/tokens.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/components/layoutComponentBase/layoutComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/extensions/componentStyling/componentStyling.extension.js","webpack://ng-universal-demo/../../../src/material/checkbox/checkbox-module.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/checkbox/checkbox.metadata.js","webpack://ng-universal-demo/../../../src/material/checkbox/checkbox-config.ts","webpack://ng-universal-demo/../../../src/material/checkbox/checkbox.ts","webpack://ng-universal-demo/../src/material/checkbox/checkbox.html","webpack://ng-universal-demo/../../../src/material/checkbox/checkbox.html","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/checkbox/checkbox.component.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/checkbox/type.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/decorators/dynamicOutput/dynamicOutput.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/extensions/relationsRegistration/relationsRegistration.extension.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/misc/dynamicItemExtensionBase.js"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional } from '@angular/core';\nimport { AbstractControl, FormControl, Validators } from '@angular/forms';\nimport { LayoutComponentBase } from '@anglr/dynamic/layout';\nimport { LOGGER } from '@anglr/common';\nimport { DynamicOutput } from '@anglr/dynamic/relations';\nimport { FORM_COMPONENT_CONTROL } from '../../misc/tokens';\nimport { FormComponentControlType } from '../../misc/enums';\nimport { getControlForType, getFormControl } from '../../misc/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\n/**\n * Base component for form component\n */\n\nexport class FormComponentBase extends LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(_changeDetector, _element, _injector, _parentControl, _logger) {\n    super(_changeDetector, _element, _injector, _logger);\n    this._parentControl = _parentControl; //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n\n    this.control = new FormControl();\n  } //######################### public properties - inputs #########################\n\n  /**\n   * Form component value\n   */\n\n\n  set value(value) {\n    const oldValue = this.value;\n    this.valueOutput = value;\n\n    if (value !== oldValue) {\n      this.control?.patchValue(value);\n    }\n  }\n\n  get value() {\n    return this.valueOutput;\n  }\n  /**\n   * Indication whether form component is required\n   */\n\n\n  set required(value) {\n    this._required = value;\n\n    if (value === true) {\n      this.control?.addValidators(Validators.required);\n      return;\n    }\n\n    this.control?.removeValidators(Validators.required);\n  }\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * Indication whether form component is disabled\n   */\n\n\n  set disabled(value) {\n    this._disabled = value;\n\n    if (value === true) {\n      this.control?.disable();\n      return;\n    }\n\n    this.control?.enable();\n  }\n\n  get disabled() {\n    return this._disabled;\n  } //######################### protected methods - _onOptionsSet implementation #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsSet() {\n    if (!this.options) {\n      return;\n    }\n\n    this.controlSubscription?.unsubscribe();\n    this.controlSubscription = null;\n    this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value);\n\n    this._registerValidations();\n\n    this.controlSubscription = this.control?.valueChanges?.subscribe(value => {\n      this.valueOutput = value;\n    });\n  } //######################### protected methods #########################\n\n  /**\n   * Registers component-specific validators\n   */\n\n\n  _registerValidations() {} //######################### private methods #########################\n\n  /**\n   * Gets form component control for control name\n   * @param controlName Form component control name\n   * @param parentControl Parent form control\n   * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n   * @param initValue Initial value for control\n   * @returns Specified type of control\n   */\n\n\n  _getFormControl(controlName, parentControl, defaultControlType = FormComponentControlType.FormControl, initValue) {\n    let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n    if (!control) {\n      this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {\n        name: controlName\n      });\n      control = getControlForType(defaultControlType, initValue);\n    }\n\n    if (this.required) {\n      control.addValidators(Validators.required);\n    }\n\n    if (this.disabled) {\n      control.disable();\n    }\n\n    return control;\n  }\n\n}\n\nFormComponentBase.ɵfac = function FormComponentBase_Factory(t) {\n  return new (t || FormComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(FORM_COMPONENT_CONTROL, 8), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nFormComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FormComponentBase,\n  inputs: {\n    value: \"value\",\n    required: \"required\",\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n__decorate([DynamicOutput(), __metadata(\"design:type\", Object)], FormComponentBase.prototype, \"valueOutput\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i1.AbstractControl,\n      decorators: [{\n        type: Inject,\n        args: [FORM_COMPONENT_CONTROL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    valueOutput: []\n  });\n})();","import { InjectionToken } from '@angular/core';\n/**\n * Injection token for form component control\n */\n\nexport const FORM_COMPONENT_CONTROL = new InjectionToken('FORM_COMPONENT_CONTROL');","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\n\nexport function LayoutEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'layoutEditorMetadata');\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport { isEmptyObject, nameof } from '@jscrpt/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Base component for layout component\n */\n\nexport class LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(changeDetector, componentElement, injector, logger) {\n    this.changeDetector = changeDetector;\n    this.componentElement = componentElement;\n    this.injector = injector;\n    this.logger = logger; //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n\n    this.extensions = [];\n    /**\n     * Indication whether initialization was already done\n     */\n\n    this.initialized = false;\n    /**\n     * Indication whether was component destroyed\n     */\n\n    this.destroyed = false;\n  } //######################### protected properties #########################\n\n  /**\n   * Gets element that is used within extension\n   */\n\n\n  get element() {\n    return this.componentElement;\n  }\n  /**\n   * Gets options that are used within extension\n   */\n\n\n  get extensionsOptions() {\n    return this.options;\n  } //######################### public methods - implementation of OnDestroy #########################\n\n  /**\n   * Called when component is destroyed\n   */\n\n\n  ngOnDestroy() {\n    if (this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n\n    for (const ext of this.extensions) {\n      ext.destroy();\n    }\n\n    this.onDestroy();\n  } //######################### public methods - implementation of LayoutComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.initialized) {\n        return;\n      }\n\n      _this.initialized = true;\n      const extensionsOptions = _this.extensionsOptions;\n      yield _this.onInit();\n      yield _this.onOptionsSet();\n\n      if (extensionsOptions) {\n        for (const extension of _this.extensions) {\n          yield extension.initialize(_this.injector, _this.element, _this);\n        }\n      }\n\n      yield _this.afterInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnChanges(changes) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      //options has changed\n      if (nameof('options') in changes) {\n        yield _this2.onOptionsSet();\n        const extensionsOptions = _this2.extensionsOptions; //set options in extensions\n\n        if (extensionsOptions) {\n          for (const extension of _this2.extensions) {\n            yield extension.optionsChange(extensionsOptions);\n          }\n        }\n\n        if (!_this2.initialized) {\n          return;\n        }\n\n        yield _this2.onOptionsChange();\n      }\n\n      delete changes[nameof('options')];\n\n      if (!isEmptyObject(changes)) {\n        _this2.onChanges(changes);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  registerExtensions(extensions) {\n    this.extensions = extensions;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this.changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialzation of component, options are already set\n   */\n\n\n  onInit() {}\n  /**\n   * Called right after initialization finished, including extesions\n   */\n\n\n  afterInit() {}\n  /**\n   * Called on change of options, after initialization\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Occurs when some property changes on component\n   * @param _changes - Changes that occured on component\n   */\n\n\n  onChanges(_changes) {}\n  /**\n   * Called everytime options are set, after initialization and later\n   */\n\n\n  onOptionsSet() {}\n  /**\n   * Called when component is being destroyed\n   */\n\n\n  onDestroy() {}\n\n}\n\nLayoutComponentBase.ɵfac = function LayoutComponentBase_Factory(t) {\n  return new (t || LayoutComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nLayoutComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LayoutComponentBase,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { isPresent } from '@jscrpt/common';\n/**\n * Extension that applies common component styling to component\n */\n\nexport class ComponentStylingExtension extends DynamicItemExtensionBase {\n  //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n  onInit() {\n    this._applyStyling();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsChange() {\n    this._applyStyling();\n  } //######################### protected methods #########################\n\n  /**\n   * Applies component styling to element\n   */\n\n\n  _applyStyling() {\n    const options = this.options;\n    const style = this.element?.nativeElement.style;\n\n    if (this.element) {\n      if (isPresent(this.lastCssClass)) {\n        for (const cssClass of this.lastCssClass.split(' ')) {\n          if (cssClass) {\n            this.element.nativeElement.classList.remove(cssClass);\n          }\n        }\n      }\n\n      this.lastCssClass = options?.cssClass;\n\n      if (options?.cssClass) {\n        for (const cssClass of options.cssClass.split(' ')) {\n          if (cssClass) {\n            this.element?.nativeElement.classList.add(cssClass);\n          }\n        }\n      }\n    }\n\n    if (isPresent(style)) {\n      if (options?.margin) {\n        if (isPresent(options.margin.bottom)) {\n          style.marginBottom = options.margin.bottom;\n        }\n\n        if (isPresent(options.margin.right)) {\n          style.marginRight = options.margin.right;\n        }\n\n        if (isPresent(options.margin.top)) {\n          style.marginTop = options.margin.top;\n        }\n\n        if (isPresent(options.margin.left)) {\n          style.marginLeft = options.margin.left;\n        }\n      }\n\n      if (options?.padding) {\n        if (isPresent(options.padding.bottom)) {\n          style.paddingBottom = options.padding.bottom;\n        }\n\n        if (isPresent(options.padding.right)) {\n          style.paddingRight = options.padding.right;\n        }\n\n        if (isPresent(options.padding.top)) {\n          style.paddingTop = options.padding.top;\n        }\n\n        if (isPresent(options.padding.left)) {\n          style.paddingLeft = options.padding.left;\n        }\n      }\n\n      if (options?.textStyling) {\n        if (isPresent(options.textStyling.fontSize)) {\n          style.fontSize = options.textStyling.fontSize;\n        }\n\n        if (isPresent(options.textStyling.fontWeight)) {\n          style.fontWeight = options.textStyling.fontWeight.toString();\n        }\n      }\n    }\n  }\n\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Material checkbox layout metadata loader\n */\nexport const MaterialCheckboxLayoutMetadataLoader = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/checkbox.layoutMetadata')).MaterialCheckboxLayoutEditorMetadata();\n  });\n\n  return function MaterialCheckboxLayoutMetadataLoader() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Material checkbox relations metadata loader\n */\n\nexport const MaterialCheckboxRelationsMetadataLoader = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/checkbox.relationsMetadata')).MaterialCheckboxRelationsEditorMetadata();\n  });\n\n  return function MaterialCheckboxRelationsMetadataLoader() {\n    return _ref2.apply(this, arguments);\n  };\n}();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  /** Default theme color palette to be used for checkboxes. */\n  color?: ThemePalette;\n  /** Default checkbox click action for checkboxes. */\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken<MatCheckboxDefaultOptions>(\n  'mat-checkbox-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Directive,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxDefaultOptions,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n} from './checkbox-config';\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate,\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxMixinBase = mixinTabIndex(\n  mixinColor(\n    mixinDisableRipple(\n      mixinDisabled(\n        class {\n          constructor(public _elementRef: ElementRef) {}\n        },\n      ),\n    ),\n  ),\n);\n\n@Directive()\nexport abstract class _MatCheckboxBase<E>\n  extends _MatCheckboxMixinBase\n  implements\n    AfterViewInit,\n    ControlValueAccessor,\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    CanDisableRipple,\n    FocusableOption\n{\n  /** Focuses the checkbox. */\n  abstract focus(origin?: FocusOrigin): void;\n\n  /** Creates the change event that will be emitted by the checkbox. */\n  protected abstract _createChangeEvent(isChecked: boolean): E;\n\n  /** Gets the element on which to add the animation CSS classes. */\n  protected abstract _getAnimationTargetElement(): HTMLElement | null;\n\n  /** CSS classes to add when transitioning between the different checkbox states. */\n  protected abstract _animationClasses: {\n    uncheckedToChecked: string;\n    uncheckedToIndeterminate: string;\n    checkedToUnchecked: string;\n    checkedToIndeterminate: string;\n    indeterminateToChecked: string;\n    indeterminateToUnchecked: string;\n  };\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n  }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<E> = new EventEmitter<E>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The native `<label>` element */\n  @ViewChild('label') _labelElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(\n    idPrefix: string,\n    elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    protected _ngZone: NgZone,\n    tabIndex: string,\n    public _animationMode?: string,\n    protected _options?: MatCheckboxDefaultOptions,\n  ) {\n    super(elementRef);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: BooleanInput) {\n    const checked = coerceBooleanProperty(value);\n\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  override get disabled(): boolean {\n    return this._disabled;\n  }\n  override set disabled(value: BooleanInput) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: BooleanInput) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n        );\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n      oldState,\n      newState,\n    );\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element!.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  protected _handleInputClick() {\n    const clickAction = this._options?.clickAction;\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n      );\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n    oldState: TransitionCheckState,\n    newState: TransitionCheckState,\n  ): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          return this._checked\n            ? this._animationClasses.checkedToIndeterminate\n            : this._animationClasses.uncheckedToIndeterminate;\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.uncheckedToChecked\n          : this._animationClasses.uncheckedToIndeterminate;\n      case TransitionCheckState.Checked:\n        return newState === TransitionCheckState.Unchecked\n          ? this._animationClasses.checkedToUnchecked\n          : this._animationClasses.checkedToIndeterminate;\n      case TransitionCheckState.Indeterminate:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.indeterminateToChecked\n          : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox\n  extends _MatCheckboxBase<MatCheckboxChange>\n  implements AfterViewInit, OnDestroy\n{\n  protected _animationClasses = {\n    uncheckedToChecked: 'mat-checkbox-anim-unchecked-checked',\n    uncheckedToIndeterminate: 'mat-checkbox-anim-unchecked-indeterminate',\n    checkedToUnchecked: 'mat-checkbox-anim-checked-unchecked',\n    checkedToIndeterminate: 'mat-checkbox-anim-checked-indeterminate',\n    indeterminateToChecked: 'mat-checkbox-anim-indeterminate-checked',\n    indeterminateToUnchecked: 'mat-checkbox-anim-indeterminate-unchecked',\n  };\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n    options?: MatCheckboxDefaultOptions,\n  ) {\n    super('mat-checkbox-', elementRef, changeDetectorRef, ngZone, tabIndex, animationMode, options);\n  }\n\n  protected _createChangeEvent(isChecked: boolean) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  protected _getAnimationTargetElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        this._onBlur();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n    super._handleInputClick();\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n}\n",null,"<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label>\n  <span class=\"mat-checkbox-inner-container\"\n       [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n    <input #input\n           class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [checked]=\"checked\"\n           [attr.value]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabIndex]=\"tabIndex\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"_getAriaChecked()\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"_onInteractionEvent($event)\"\n           (click)=\"_onInputClick($event)\">\n    <span matRipple class=\"mat-checkbox-ripple mat-focus-indicator\"\n         [matRippleTrigger]=\"label\"\n         [matRippleDisabled]=\"_isRippleDisabled()\"\n         [matRippleRadius]=\"20\"\n         [matRippleCentered]=\"true\"\n         [matRippleAnimation]=\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\">\n      <span class=\"mat-ripple-element mat-checkbox-persistent-ripple\"></span>\n    </span>\n    <span class=\"mat-checkbox-frame\"></span>\n    <span class=\"mat-checkbox-background\">\n      <svg version=\"1.1\"\n           focusable=\"false\"\n           class=\"mat-checkbox-checkmark\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mat-checkbox-checkmark-path\"\n              fill=\"none\"\n              stroke=\"white\"\n              d=\"M4.1,12.7 9,17.6 20.3,6.3\"/>\n      </svg>\n      <!-- Element for rendering the indeterminate state checkbox. -->\n      <span class=\"mat-checkbox-mixedmark\"></span>\n    </span>\n  </span>\n  <span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n","import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LayoutEditorMetadata } from '@anglr/dynamic/layout-editor';\nimport { CastPipesModule, HostDisplayBlockStyle } from '@anglr/common';\nimport { FormPipesModule } from '@anglr/common/forms';\nimport { FormComponentBase, FormComponentControlSAPipe } from '@anglr/dynamic/form';\nimport { RelationsEditorMetadata } from '@anglr/dynamic/relations-editor';\nimport { MaterialCheckboxLayoutMetadataLoader, MaterialCheckboxRelationsMetadataLoader } from './checkbox.metadata';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@anglr/common/forms\";\nimport * as i2 from \"@anglr/common\";\nimport * as i3 from \"@angular/material/checkbox\";\nimport * as i4 from \"@angular/forms\";\n/**\n * Component used for displaying material checkbox\n */\n\nlet MaterialCheckboxSAComponent = class MaterialCheckboxSAComponent extends FormComponentBase {};\n\nMaterialCheckboxSAComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵMaterialCheckboxSAComponent_BaseFactory;\n  return function MaterialCheckboxSAComponent_Factory(t) {\n    return (ɵMaterialCheckboxSAComponent_BaseFactory || (ɵMaterialCheckboxSAComponent_BaseFactory = i0.ɵɵgetInheritedFactory(MaterialCheckboxSAComponent)))(t || MaterialCheckboxSAComponent);\n  };\n}();\n\nMaterialCheckboxSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MaterialCheckboxSAComponent,\n  selectors: [[\"material-checkbox\"]],\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 4,\n  vars: 6,\n  consts: [[3, \"formControl\"]],\n  template: function MaterialCheckboxSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-checkbox\", 0);\n      i0.ɵɵpipe(1, \"asRequired\");\n      i0.ɵɵpipe(2, \"asFormControl\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formControl\", i0.ɵɵpipeBind1(1, 2, i0.ɵɵpipeBind1(2, 4, ctx.control)));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.options == null ? null : ctx.options.label);\n    }\n  },\n  dependencies: [FormPipesModule, i1.AsFormControlPipe, CastPipesModule, i2.AsRequiredTypePipe, MatCheckboxModule, i3.MatCheckbox, ReactiveFormsModule, i4.NgControlStatus, i4.FormControlDirective],\n  styles: [\"[_nghost-%COMP%]{display: block;}\"],\n  changeDetection: 0\n});\nMaterialCheckboxSAComponent = __decorate([RelationsEditorMetadata(MaterialCheckboxRelationsMetadataLoader), LayoutEditorMetadata(MaterialCheckboxLayoutMetadataLoader)], MaterialCheckboxSAComponent);\nexport { MaterialCheckboxSAComponent };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialCheckboxSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'material-checkbox',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [FormPipesModule, CastPipesModule, FormComponentControlSAPipe, MatCheckboxModule, ReactiveFormsModule],\n      template: \"<mat-checkbox [formControl]=\\\"control|asFormControl|asRequired\\\">{{options?.label}}</mat-checkbox>\",\n      styles: [\":host{display: block;}\"]\n    }]\n  }], null, null);\n})();","import { ComponentStylingExtension } from '@anglr/dynamic/layout';\nimport { RelationsRegistrationExtension } from '@anglr/dynamic/relations';\nimport { MaterialCheckboxSAComponent } from './checkbox.component';\nexport default MaterialCheckboxSAComponent;\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\n\nexport function RelationsEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'relationsEditorMetadata');\n}","import { Subject } from 'rxjs';\n/**\n * Creates dynamic output for property\n */\n\nexport function DynamicOutput() {\n  return function (target, propertyKey) {\n    const prop = propertyKey;\n    Object.defineProperty(target, `${prop}Change`, {\n      get: function () {\n        if (!this[`ɵ${prop}Change`]) {\n          this[`ɵ${prop}Change`] = new Subject();\n        }\n\n        return this[`ɵ${prop}Change`];\n      }\n    });\n    Object.defineProperty(target, prop, {\n      get: function () {\n        return this[`ɵ${prop}`];\n      },\n      set: function (value) {\n        this[`ɵ${prop}`] = value;\n        this[`${prop}Change`].next();\n      }\n    });\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { RelationsComponentManager, RelationsProcessor } from '../../services';\n/**\n * Extension that allows registration of component for relations\n */\n\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase {\n  constructor() {\n    //######################### protected properties #########################\n    super(...arguments);\n    /**\n     * Instance of relations processor\n     */\n\n    this.relationsProcessor = null;\n    /**\n     * Instance of component manager\n     */\n\n    this.componentManager = null;\n  } //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.injector || !_this.metadata || !_this.instance) {\n        return;\n      }\n\n      _this.relationsProcessor ?? (_this.relationsProcessor = _this.injector.get(RelationsProcessor, null));\n      _this.componentManager ?? (_this.componentManager = _this.injector.get(RelationsComponentManager, null));\n\n      if (!_this.relationsProcessor || !_this.componentManager) {\n        return;\n      }\n\n      _this.componentManager.registerComponent(_this.metadata.id, _this.instance);\n\n      yield _this.relationsProcessor.initialized;\n\n      _this.relationsProcessor.updateRelations(_this.metadata.id);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onDestroy() {\n    if (!this.relationsProcessor || !this.componentManager || !this.metadata) {\n      return;\n    }\n\n    this.relationsProcessor.destroyComponent(this.metadata.id);\n    this.componentManager.unregisterComponent(this.metadata.id);\n  }\n\n}","//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata(metadataLoader, propertyName) {\n  if (ngDesignerMetadata) {\n    return function (target) {\n      target[propertyName] = metadataLoader();\n      return target;\n    };\n  }\n\n  return function (target) {\n    return target;\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Dynamic item extension base class\n */\nexport class DynamicItemExtensionBase {\n  //######################### constructor #########################\n  constructor(metadata) {\n    this.metadata = metadata;\n    /**\n     * Indication whether was extension initialized\n     */\n\n    this.initialized = false;\n  } //######################### public methods - implementation of DynamicItemExtension #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize(injector, element, instance) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.initialized = true;\n      _this.injector = injector;\n      _this.element = element;\n      _this.instance = instance;\n      yield _this.onInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  optionsChange(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.options = options;\n\n      if (!_this2.initialized) {\n        return;\n      }\n\n      yield _this2.onOptionsChange();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  destroy() {\n    this.onDestroy();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialization of component\n   */\n\n\n  onInit() {}\n  /**\n   * Called on change of options of component\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Called on destruction of component\n   */\n\n\n  onDestroy() {}\n\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","FormComponentBase","_changeDetector","_element","_injector","_parentControl","super","control","oldValue","valueOutput","patchValue","required","_required","removeValidators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","logger","name","t","type","inputs","features","Object","prototype","FORM_COMPONENT_CONTROL","LayoutEditorMetadata","metadataLoader","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","LayoutComponentBase","changeDetector","componentElement","injector","extensions","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","optionsChange","onOptionsChange","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","ComponentStylingExtension","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatRippleModule","MatCommonModule","ObserversModule","MaterialCheckboxLayoutMetadataLoader","_ref","MaterialCheckboxLayoutEditorMetadata","MaterialCheckboxRelationsMetadataLoader","_ref2","MaterialCheckboxRelationsEditorMetadata","MAT_CHECKBOX_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","_elementRef","_MatCheckboxBase","idPrefix","elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","labelPosition","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_indeterminate","defaultColor","parseInt","id","_uniqueId","inputId","coerceBooleanProperty","ngAfterViewInit","_syncIndeterminate","checked","markForCheck","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","_getAnimationTargetElement","_getAnimationClassForCheckStateTransition","length","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","_createChangeEvent","_inputElement","toggle","_handleInputClick","_onInteractionEvent","event","stopPropagation","_onBlur","_animationClasses","uncheckedToChecked","checkedToIndeterminate","uncheckedToIndeterminate","checkedToUnchecked","indeterminateToChecked","indeterminateToUnchecked","nativeCheckbox","MatRipple","changeDetectorRef","_focusMonitor","ngZone","animationMode","isChecked","source","monitor","focusOrigin","stopMonitoring","_onInputClick","focus","origin","focusVia","i0","ANIMATION_MODULE_TYPE","i2","MaterialCheckboxSAComponent","selectors","standalone","decls","vars","consts","template","rf","ctx","label","dependencies","i","styles","changeDetection","RelationsEditorMetadata","DynamicOutput","target","propertyKey","prop","defineProperty","get","set","next","RelationsRegistrationExtension","relationsProcessor","componentManager","metadata","instance","registerComponent","updateRelations","destroyComponent","unregisterComponent","DynamicClassMetadata","propertyName","DynamicItemExtensionBase"],"sourceRoot":""}