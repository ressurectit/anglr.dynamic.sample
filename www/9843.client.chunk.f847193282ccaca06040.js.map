{"version":3,"file":"9843.client.chunk.f847193282ccaca06040.js","mappings":"wLAaM,SAAUA,EAAcC,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIG,IAAK,WAOD,OALIC,KAAK,IAAIJ,aAETI,KAAK,IAAIJ,WAAgB,IAAIK,EAAAA,GAG1BD,KAAK,IAAIJ,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIG,IAAK,WAED,OAAOC,KAAK,IAAIJ,IACpB,EACAM,IAAK,SAASC,GAKV,GAHAH,KAAK,IAAIJ,KAAUO,GACnBC,EAAAA,EAAAA,IAAmBJ,KAAMJ,GAEtBH,GAASY,KAERL,KAAK,GAAGJ,WAAcU,WAG1B,CACI,MAAMC,EAAYP,KAA+BQ,WAEjD,IAAID,EAEA,OAGJ,MAAME,EAAmBF,EAASR,IAAIW,EAAAA,GAChCC,EAAiBJ,EAASR,IAAIa,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAMd,MAElC,IAAIa,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYrB,G,CAGxB,IAGvBH,GAASyB,WAERC,EAAAA,EAAAA,IAAmBzB,EAAQE,EAEnC,CACJ,C,yNC3EO,MAAMwB,EAAqC,e,EAAA,G,EAA6D,mBAAY,WAAW,8EAAuDC,sCAAuC,E,+KAAA,kBAAlL,mCCM3C,IAAMC,EAAN,MAcQC,uBAEP,OAAOvB,KAAKwB,iBAChB,CACWD,qBAAiBpB,GAExBH,KAAKwB,kBAAoBrB,EAEtBH,KAAKwB,mBAAmBC,UAEvBzB,KAAK0B,WAAa1B,KAAKwB,kBAAkBC,QAEjD,CAeOE,YAAYC,GAEnB,CAKOC,oBAEP,IAjBAC,EAAAA,EAAAA,IAAAA,EAACtC,EAAAA,EAAAA,MAAe,gEAjCP8B,GAAuB,UAFnCS,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBZ,IACZE,GCVb,S","sources":["webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextSource/richTextSource.metadata.ts","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextSource/richTextSource.relations.ts","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextSource/type.ts"],"sourcesContent":["import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Rich text source relations metadata loader\n */\nexport const RichTextSourceRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/richTextSource.relationsMetadata')).RichTextSourceRelationsEditorMetadata();\n","import {SimpleChanges} from '@angular/core';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {RichTextSourceRelationsMetadataLoader} from './richTextSource.metadata';\nimport {RichTextSourceRelationsOptions} from './richTextSource.options';\n\n/**\n * Rich text source relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(RichTextSourceRelationsMetadataLoader)\nexport class RichTextSourceRelations implements RelationsComponent<RichTextSourceRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: RichTextSourceRelationsOptions|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): RichTextSourceRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: RichTextSourceRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        if(this.ɵRelationsOptions?.content)\n        {\n            this.htmlString = this.ɵRelationsOptions.content;\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Html rich text output\n     */\n    @DynamicOutput()\n    public htmlString: string|undefined|null;\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(_changes: SimpleChanges): void\n    {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {RichTextSourceRelations} from './richTextSource.relations';\n\nexport default RichTextSourceRelations;"],"names":["DynamicOutput","options","target","propertyKey","prop","Object","defineProperty","get","this","Subject","set","value","defineAssignedProp","sync","next","injector","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp","RichTextSourceRelationsMetadataLoader","RichTextSourceRelationsEditorMetadata","RichTextSourceRelations","relationsOptions","ɵRelationsOptions","content","htmlString","ngOnChanges","_changes","invalidateVisuals","__decorate","PureRelationsComponent","RelationsEditorMetadata"],"sourceRoot":""}