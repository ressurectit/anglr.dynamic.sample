{"version":3,"file":"4135.client.chunk.e3807fbacafb477df3e1.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/dynamicItems/routerLink/metadata/routerLink.model.ts","webpack://ng-universal-demo/./app/dynamicItems/routerLink/metadata/routerLink.layoutMetadata.ts","webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts"],"sourcesContent":["import {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {RouterLinkComponentOptions} from '../routerLink.options';\n\n/**\n * Router link model for properties editor\n */\nexport class RouterLinkModel implements RouterLinkComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Text')\n    @LayoutPropertyDescription('Text to be displayed in link')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public text: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Link css class')\n    @LayoutPropertyDescription('Css class applied to link (anchor) element itself')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public linkCssClass: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Router link')\n    @LayoutPropertyDescription('Link address to be routed to')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public link: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RouterLinkComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RouterLinkComponentOptions} from '../routerLink.options';\nimport {RouterLinkModel} from './routerLink.model';\n\n/**\n * Router link layout metadata\n */\nexport class RouterLinkLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RouterLinkComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RouterLinkComponentOptions> =\n    {\n        name: 'Router link',\n        description: 'Represents navigation link in application',\n        group: 'Navigation',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: RouterLinkModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<RouterLinkModel>(['link', 'linkCssClass', 'text']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            text: 'Link',\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}",null,"<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}"],"names":["RouterLinkModel","constructor","value","text","linkCssClass","link","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","RouterLinkLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","Object","freeze","AsFormControlPipe","_logger","transform","_valueHash","isBlank","FormControl","warn","LOGGER","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_componentRef","values","ngOnChanges","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","CommonModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","i1","ReactiveFormsModule","CastPipesModule","NumberInputModule"],"sourceRoot":""}