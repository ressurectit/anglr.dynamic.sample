{"version":3,"file":"8342.client.chunk.593923b35e7edc3c512b.js","mappings":";oQA+BO,MAgBDA,EAA2E,CAC/E,CACEC,SAAU,aACVC,WAAY,CAAC,aAAc,mBAE7B,CACED,SAAU,kBACVC,WAAY,CAAC,aAAc,yBAA0B,8BAEvD,CACED,SAAU,oBACVC,WAAY,CAAC,aAAc,qBAAsB,0BAEnD,CACED,SAAU,qBACVC,WAAY,CAAC,aAAc,uBAAwB,4BAErD,CACED,SAAU,UACVC,WAAY,CAAC,UAAW,gBAE1B,CACED,SAAU,eACVC,WAAY,CAAC,UAAW,gBAAiB,qBAE3C,CACED,SAAU,kBACVC,WAAY,CAAC,kBAAmB,yBAMvBC,GAAkBC,EAAAA,EAAAA,IAC7BC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,GACE,MACEC,YAAmBC,GAAA,KAAAA,YAAAA,CAA0B,MAQ/C,MAAOC,UACHN,EAWRI,YACEG,EACOC,EACAC,EACAC,GAEPC,MAAMJ,GAJC,KAAAC,UAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,eAAAA,EAZQ,KAAAE,eAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,IAGxC,KAAAC,QAAS,EAaP,MAAMC,EAAaT,EAAWU,cAA8BD,UAI5D,IAAK,MAAME,KAAQrB,EACbsB,KAAKC,mBAAmBF,EAAKpB,WAC/BoB,EAAKnB,WAAWsB,SAASC,IACvBN,EAAUO,IAAID,EAAU,GAIhC,CAEAE,kBACEL,KAAKP,cAAca,QAAQN,KAAKd,aAAa,EAC/C,CAEAqB,cACEP,KAAKP,cAAce,eAAeR,KAAKd,YACzC,CAGAuB,MAAMC,EAAuB,UAAWC,GAClCD,EACFV,KAAKP,cAAcmB,SAASZ,KAAKd,YAAYY,cAAeY,EAASC,GAErEX,KAAKd,YAAYY,cAAcW,MAAME,EAEzC,CAGQV,sBAAsBY,GAC5B,OAAOA,EAAWC,MAAKC,GAAaf,KAAKd,YAAYY,cAAckB,aAAaD,IAClF,CAEAE,oBACE,OAAOjB,KAAKkB,eAAiBlB,KAAKmB,QACpC,8CAzDWhC,EAAa,wBAUJ,GAVI,UAUbiC,EAAAA,EAAS,oEA4EhB,MAAOC,UAAsBlC,EAGjCF,YAAYG,EAAwBkC,EAAoBC,EAAgBC,GACtEhC,MAAMJ,EAAYkC,EAAUC,EAAQC,GActC,KAAAC,oBAAuBC,IAEjB1B,KAAKmB,WACPO,EAAMC,iBACND,EAAME,4BAjBV,CAEAC,WACE7B,KAAKV,QAAQwC,mBAAkB,KAC7B9B,KAAKd,YAAYY,cAAciC,iBAAiB,QAAS/B,KAAKyB,oBAAoB,GAEtF,CAESlB,cACPf,MAAMe,cACNP,KAAKd,YAAYY,cAAckC,oBAAoB,QAAShC,KAAKyB,oBACnE,8CAhBWJ,EAAa,wNCrJ1B,ySAeM,MAAOY,UAAsB9C,EAAAA,GACjCF,YACEG,EACAkC,EACAC,EAC2CC,GAE3ChC,MAAMJ,EAAYkC,EAAUC,EAAQC,EACtC,mCARWS,GAAa,gCAKFC,EAAAA,GAAqB,uBALhCD,EAAa,4XAf1B,qVCrB6C,qFAGE,wFCK/CE,EAAAA,GAAA,k1JFsDM,MAAOC,UAAsBf,EAAAA,GACjCpC,YACEG,EACAkC,EACAC,EAC2CC,GAE3ChC,MAAMJ,EAAYkC,EAAUC,EAAQC,EACtC,mCARWY,GAAa,gCAKFF,EAAAA,GAAqB,uBALhCE,EAAa,meAzC1B,8jBGZ6C,oEAfL,kFAkBM,gECI9CD,EAAAA,GAAA,QJKA,syJILA,sHCcM,MAAOE,oCAAAA,EAAe,oBAAfA,0BAvBDC,EAAAA,GAAiBC,EAAAA,GAUzBD,EAAAA","sources":["webpack://ng-universal-demo/../../../src/material/button/button-base.ts","webpack://ng-universal-demo/../../../src/material/button/icon-button.ts","webpack://ng-universal-demo/../src/material/button/icon-button.html","webpack://ng-universal-demo/../../../src/material/button/icon-button.html","webpack://ng-universal-demo/../src/material/button/button.html","webpack://ng-universal-demo/../../../src/material/button/button.html","webpack://ng-universal-demo/../../../src/material/button/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  inject,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n/** Inputs common to all buttons. */\nexport const MAT_BUTTON_INPUTS = ['disabled', 'disableRipple', 'color'];\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {selector: string; mdcClasses: string[]}[] = [\n  {\n    selector: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    selector: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    selector: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    selector: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    selector: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    selector: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    selector: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  },\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport const _MatButtonMixin = mixinColor(\n  mixinDisabled(\n    mixinDisableRipple(\n      class {\n        constructor(public _elementRef: ElementRef) {}\n      },\n    ),\n  ),\n);\n\n/** Base class for all buttons.  */\n@Directive()\nexport class MatButtonBase\n  extends _MatButtonMixin\n  implements CanDisable, CanColor, CanDisableRipple, AfterViewInit, OnDestroy\n{\n  private readonly _focusMonitor = inject(FocusMonitor);\n\n  /** Whether this button is a FAB. Used to apply the correct class on the ripple. */\n  _isFab = false;\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(\n    elementRef: ElementRef,\n    public _platform: Platform,\n    public _ngZone: NgZone,\n    public _animationMode?: string,\n  ) {\n    super(elementRef);\n\n    const classList = (elementRef.nativeElement as HTMLElement).classList;\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const pair of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (this._hasHostAttributes(pair.selector)) {\n        pair.mdcClasses.forEach((className: string) => {\n          classList.add(className);\n        });\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (_origin) {\n      this._focusMonitor.focusVia(this._elementRef.nativeElement, _origin, options);\n    } else {\n      this._elementRef.nativeElement.focus(options);\n    }\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  private _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._elementRef.nativeElement.hasAttribute(attribute));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n}\n\n/** Shared inputs by buttons using the `<a>` tag */\nexport const MAT_ANCHOR_INPUTS = ['disabled', 'disableRipple', 'color', 'tabIndex'];\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n};\n\n/**\n * Anchor button base.\n */\n@Directive()\nexport class MatAnchorBase extends MatButtonBase implements OnInit, OnDestroy {\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone, animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  ngOnInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n    });\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase,\n} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'icon-button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  inputs: MAT_ANCHOR_INPUTS,\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n",null,"<span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span>\n\n<ng-content></ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span matRipple class=\"mat-mdc-button-ripple\"\n      [matRippleDisabled]=\"_isRippleDisabled()\"\n      [matRippleCentered]=\"true\"\n      [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n",null,"<span\n    class=\"mat-mdc-button-persistent-ripple\"\n    [class.mdc-button__ripple]=\"!_isFab\"\n    [class.mdc-fab__ripple]=\"_isFab\"></span>\n\n<ng-content select=\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\">\n</ng-content>\n\n<span class=\"mdc-button__label\"><ng-content></ng-content></span>\n\n<ng-content select=\".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\">\n</ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span matRipple class=\"mat-mdc-button-ripple\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton, MatMiniFabAnchor, MatMiniFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n})\nexport class MatButtonModule {}\n"],"names":["HOST_SELECTOR_MDC_CLASS_PAIR","selector","mdcClasses","_MatButtonMixin","mixinColor","mixinDisabled","mixinDisableRipple","constructor","_elementRef","MatButtonBase","elementRef","_platform","_ngZone","_animationMode","super","_focusMonitor","inject","FocusMonitor","_isFab","classList","nativeElement","pair","this","_hasHostAttributes","forEach","className","add","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","_origin","options","focusVia","attributes","some","attribute","hasAttribute","_isRippleDisabled","disableRipple","disabled","MatRipple","MatAnchorBase","platform","ngZone","animationMode","_haltDisabledEvents","event","preventDefault","stopImmediatePropagation","ngOnInit","runOutsideAngular","addEventListener","removeEventListener","MatIconButton","ANIMATION_MODULE_TYPE","i2","MatIconAnchor","MatButtonModule","MatCommonModule","MatRippleModule"],"sourceRoot":""}