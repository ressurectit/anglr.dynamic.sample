{"version":3,"file":"7.client.chunk.f39e35ac88c4b8e41a6e.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../../../forms/src/misc/formModel/decorators/formGroupProperty.decorator.ts","webpack://ng-universal-demo/../../../forms/src/misc/formModel/decorators/modelPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutPropertyObject/propertyObject.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/misc/models/margin.model.ts","webpack://ng-universal-demo/../../../layout-editor/src/misc/models/padding.model.ts","webpack://ng-universal-demo/../../../layout-editor/src/misc/models/componentStyling.model.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../../../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../../../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts"],"sourcesContent":["import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()',\n        '[disabled]': 'disabled',\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n\n    /**\n     * Indication whether is number input disabled\n     */\n    public disabled: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setDisabledState?(isDisabled: boolean): void\n    {\n        this.disabled = isDisabled;\n    }\n}\n","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {FormGroup} from '@angular/forms';\n\nimport {ModelPropertyMetadata} from './modelPropertyMetadata.decorator';\n\n/**\n * Defines property value as FormGroup\n */\nexport function FormGroupProperty(): PropertyDecorator\n{\n    return ModelPropertyMetadata(\n    {\n        type: FormGroup\n    });\n}","import {Dictionary, nameof} from '@jscrpt/common';\n\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from '../misc/defaults';\n\n/**\n * Defines metadata for model property\n * @param metadata - Metadata for model property, used for creating form\n */\nexport function ModelPropertyMetadata<TArgs extends Dictionary<any> = any,\n                                      TModel = any>(metadata: ModelPropertyDecoratorMetadata<TArgs>): PropertyDecorator\n{\n    return function(target: Object, propertyKey: string|symbol): void\n    {\n        const trgt = target as ModelDecoratorMetadata<TModel>;\n\n        if(!trgt.ɵControlsMetadata)\n        {\n            Object.defineProperty(trgt, nameof<ModelDecoratorMetadata>('ɵControlsMetadata'),\n            {\n                value: {},\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n        }\n\n        //keep current validators\n        const originValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.validators ?? [];\n        const originAsyncValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.asyncValidators ?? [];\n\n        //merge all other values\n        trgt.ɵControlsMetadata[propertyKey as keyof TModel] = \n        {\n            ...ɵDefaultPropertyMetadata,\n            ...trgt.ɵControlsMetadata[propertyKey as keyof TModel],\n            ...metadata\n        };\n\n        //merge validators\n        const propertyMetadata = trgt.ɵControlsMetadata[propertyKey as keyof TModel];\n\n        propertyMetadata.validators =\n        [\n            ...originValidators,\n            ...propertyMetadata.validators,\n        ];\n\n        propertyMetadata.asyncValidators =\n        [\n            ...originAsyncValidators,\n            ...propertyMetadata.asyncValidators,\n        ];\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicPropertyMetadata} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyObjectData} from './propertyObject.interface';\n\n/**\n * Adds object metadata to component property for designer\n * @param type - Type containing metadata for nested object\n * @param metadataSymbols - Array of symbols that are storing metadata\n */\nexport function LayoutPropertyObject(type: Type<any>, metadataSymbols: symbol[]): PropertyDecorator\n{\n    const objMetadata = {};\n\n    for(const metaSymbol of metadataSymbols)\n    {\n        const typeMetadata = Reflect.get(type.prototype, metaSymbol);\n\n        extend(true, objMetadata, typeMetadata);\n    }\n\n    return DynamicPropertyMetadata<LayoutPropertyObjectData>({object: objMetadata}, LayoutPropertyMetadata);\n}","import {Margin} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Margin model for properties editor\n */\nexport class MarginModel implements Margin\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin top')\n    @LayoutPropertyDescription('Top margin of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin right')\n    @LayoutPropertyDescription('Right margin of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin bottom')\n    @LayoutPropertyDescription('Bottom margin of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin left')\n    @LayoutPropertyDescription('Left margin of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Margin|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Padding} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Padding model for properties editor\n */\nexport class PaddingModel implements Padding\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding top')\n    @LayoutPropertyDescription('Top padding of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding right')\n    @LayoutPropertyDescription('Right padding of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding bottom')\n    @LayoutPropertyDescription('Bottom padding of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding left')\n    @LayoutPropertyDescription('Left padding of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Padding|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {FormGroupProperty} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin, Padding, TextStyling} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyObject, LayoutPropertyType} from '../../decorators';\nimport {DefaultKnownPropertyTypes, LayoutPropertyMetadata} from '../types';\nimport {MarginModel} from './margin.model';\nimport {PaddingModel} from './padding.model';\n\n/**\n * Component styling model for properties editor\n */\nexport class ComponentStylingModel implements ComponentStylingOptions\n{\n    //######################### public properties #########################\n\n    @LayoutPropertyName('Css class')\n    @LayoutPropertyDescription('Css class that should be applied to component')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public cssClass: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin')\n    @LayoutPropertyDescription('Margin of component')\n    @LayoutPropertyObject(MarginModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public margin: Margin|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding')\n    @LayoutPropertyDescription('Padding of component')\n    @LayoutPropertyObject(PaddingModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public padding: Padding|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public textStyling: TextStyling|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: ComponentStylingOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n\n        this.margin = new MarginModel(value?.margin);\n        this.padding = new PaddingModel(value?.padding);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}",null,"<input class=\"properties-form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}",null,"<input-number class=\"dynamic-flex-1\" [control]=\"_value\"></input-number> <select-value style=\"flex: 0 0 48px;\" [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n",null,"<div>Margin</div>\n\n<div>\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-bottom-extra-small\">\n        <span class=\"fas fa-arrow-left\"></span>\n        <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-right dynamic-margin-left-big\"></span>\n        <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center\">\n        <span class=\"fas fa-arrow-up\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-down dynamic-margin-left-big\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n",null,null,"<div>Padding</div>\n\n<div>\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-bottom-extra-small\">\n        <span class=\"fas fa-arrow-left\"></span>\n        <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-right dynamic-margin-left-big\"></span>\n        <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center\">\n        <span class=\"fas fa-arrow-up\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-down dynamic-margin-left-big\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n    </div>\n</div>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","<div class=\"properties-form-group\">\n    <label class=\"properties-control-label\">{{propertiesMetadata?.cssClass?.name ?? 'cssClass'}} <span *ngIf=\"propertiesMetadata?.cssClass?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.cssClass?.description\"></span></label>\n    <input-string [control]=\"form?.controls?.cssClass | asRequired\"></input-string>\n</div>\n\n<margin-control class=\"properties-form-group\" [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></margin-control>\n<padding-control class=\"properties-form-group\" [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></padding-control>","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Dictionary, extend, globalDefine, isBlank, noop} from '@jscrpt/common';\n\ndeclare let ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}"],"names":["NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","constructor","_renderer","_elementRef","onChange","_","onTouched","disabled","writeValue","value","this","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","setDisabledState","isDisabled","i0","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","control","isNaN","max","isPresent","min","number","ɵDefaultPropertyMetadata","asyncValidators","validators","type","FormControl","childType","args","LayoutPropertyDescription","description","DynamicPropertyMetadata","LayoutPropertyMetadata","LayoutPropertyName","name","LayoutPropertyType","FormGroupProperty","metadata","FormGroup","target","propertyKey","trgt","ɵControlsMetadata","Object","defineProperty","nameof","writable","enumerable","configurable","originValidators","originAsyncValidators","propertyMetadata","LayoutPropertyObject","metadataSymbols","objMetadata","metaSymbol","typeMetadata","Reflect","get","prototype","extend","object","MarginModel","top","right","bottom","left","mapValuesToThis","__decorate","PaddingModel","ComponentStylingModel","cssClass","margin","padding","textStyling","InputNumberComponent","PropertyTypeControlBase","i1","InputSizeComponent","_value","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","subscribe","unit","MarginControlComponent","PropertiesControlBase","_margin","form","controls","PaddingControlComponent","_padding","ComponentStylingPropertiesControlComponent","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","initialize","invalidateVisuals","detectChanges","property","has","globalDefine","global","ngDesignerMetadata"],"sourceRoot":""}