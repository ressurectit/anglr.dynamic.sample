{"version":3,"file":"9316.client.chunk.1bf81b5ac2399bdb5e15.js","mappings":"mjBAKY,W,KACI,2B,KACA,S,IAAK,G,+CADgB,G,IAAA,mC,CAAA,wB,CAAA,c,CAAA,Y,IAChB,G,KAAA,O,gCAKT,U,CAAA,S,IACS,G,YACL,4B,6CADK,G,KAAA,Q,IACiB,G,IAAA,mC,CAAA,wB,CAAA,c,CAAA,W,ECgBhC,MAAOA,UAAuCC,EAAAA,EAfpDC,c,oBAsBc,KAAAC,0BAAqEC,EAAAA,EAAAA,IAAOC,EAAAA,IAK5E,KAAAC,0BAAqDF,EAAAA,EAAAA,IAAOG,EAAAA,EA2CzE,CAxByBC,aAAU,I,EAAA,c,EAAA,Y,MAE5B,IAAI,EAAKC,SAEL,QAGJ,IAAKA,UAASC,mBAAgBC,EAAhBD,iBACd,CACIE,KAAM,KAGV,MAAMC,QAAsB,EAAKP,yBAAyBQ,iBAAiB,EAAKL,SAASG,MAEzF,IAAIC,EAEA,OAGJ,EAAKJ,SAASC,iBAAiBE,KAAO,EAAKH,SAASG,KACpD,MAAMG,SAAkB,EAAKZ,0BAA0Ba,YAAYH,KAAkB,GACrF,EAAKI,YAAaC,EAAAA,EAAAA,GAAUH,GAC5B,EAAKI,aAAcC,EAAAA,EAAAA,GAAWL,EAtBF,E,gLAuB/B,E,6DAtDQf,KAAAA,GAAAA,E,uBAAAA,E,4YD9Bb,6B,KAEA,U,CAAA,U,CAAA,W,IAGY,iB,YAMJ,W,IACI,iB,sBAZW,W,CAAA,mC,IAK8B,G,IAAA,6G,IAOE,G,IAAA,iH,gBCW/CqB,EAAAA,EAAYC,EAAAA,GACZC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,G,oCClBF,MAAOC,EAkBTxB,cAXO,KAAAyB,SACP,CACIC,MAAO,cAMJ,KAAAC,eAAsC7B,EAKzC8B,OAAOC,OAAOC,KACjB,E","sources":["webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-relations/src/dynamicItems/customComponent/node/customComponentNode.component.html","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/node/customComponentNode.component.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/metadata/customComponent.relationsMetadata.ts"],"sourcesContent":[null,"import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeOutputSAComponent, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentRelationsOptions} from '../customComponent.options';\nimport {ComponentInputsRelationsOptions} from '../../componentInputs';\nimport {ComponentOutputsRelationsOptions} from '../../componentOutputs';\nimport {LayoutComponentsRegister} from '../../../services';\nimport {getInputs, getOutputs} from '../customComponent.utils';\n\n/**\n * Relations node component for custom component\n */\n@Component(\n{\n    selector: 'custom-component-node',\n    templateUrl: 'customComponentNode.component.html',\n    // styleUrls: ['customComponentNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponentNodeSAComponent extends RelationsNodeBase<CustomComponentRelationsOptions> implements RelationsNode<CustomComponentRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]> = inject(RELATIONS_METADATA_STORAGE);\n\n    /**\n     * Layout components register instance\n     */\n    protected layoutComponentsRegister: LayoutComponentsRegister = inject(LayoutComponentsRegister);\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Metadata that contains information about available inputs\n     */\n    protected inputsMeta: RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined;\n\n    /**\n     * Metadata that contains information about available outputs\n     */\n    protected outputsMeta: RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override async initialize(): Promise<void>\n    {\n        if(!this.metadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            name: ''\n        };\n\n        const componentName = await this.layoutComponentsRegister.getComponentName(this.metadata.name);\n\n        if(!componentName)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.name = this.metadata.name;\n        const relations = await this.relationsMetadataStorage?.getMetadata(componentName) ?? [];\n        this.inputsMeta = getInputs(relations);\n        this.outputsMeta = getOutputs(relations);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentNodeSAComponent} from '../node/customComponentNode.component';\n\n/**\n * Custom component relations metadata\n */\nexport class CustomComponentRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        group: 'Components',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = CustomComponentNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["CustomComponentNodeSAComponent","RelationsNodeBase","constructor","relationsMetadataStorage","inject","RELATIONS_METADATA_STORAGE","layoutComponentsRegister","LayoutComponentsRegister","initialize","metadata","relationsOptions","_a","name","componentName","getComponentName","relations","getMetadata","inputsMeta","getInputs","outputsMeta","getOutputs","CommonModule","i1","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","CustomComponentRelationsEditorMetadata","metaInfo","group","nodeDefinition","Object","freeze","this"],"sourceRoot":""}