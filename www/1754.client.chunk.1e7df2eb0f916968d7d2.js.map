{"version":3,"file":"1754.client.chunk.1e7df2eb0f916968d7d2.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../../../src/material/dialog/dialog-content-directives.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/modules/codeEditor/misc/types/languageModels/cssLanguageModel.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/css-components/src/dynamicItems/styleBlock/metadata/styleBlock.model.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/css-components/src/dynamicItems/styleBlock/metadata/styleBlock.layoutMetadata.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/modules/propertiesControls/components/propertiesControlBase.js"],"sourcesContent":[null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","import { LanguageModel } from './languageModel';\n/**\n * Css language model for code editor\n */\n\nexport const CssLanguageModel = new LanguageModel('css', 'css', editor => {\n  return editor.getModel()?.getValue() ?? '';\n});","import { mapValuesToThis } from '@jscrpt/common';\n/**\n * Style block model for properties editor\n */\n\nexport class StyleBlockModel {\n  //######################### constructor #########################\n  constructor(value) {\n    /**\n     * @inheritdoc\n     */\n    this.style = '';\n    mapValuesToThis.bind(this)(value);\n  }\n\n}","import { codePropertiesControlFor } from '@anglr/dynamic/layout-editor';\nimport { CssLanguageModel } from '@anglr/dynamic';\nimport { StyleBlockModel } from './styleBlock.model';\n/**\n * Style block layout metadata\n */\n\nexport class StyleBlockLayoutEditorMetadata {\n  //######################### constructor #########################\n  constructor() {\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    this.metaInfo = {\n      name: 'Style',\n      description: 'Style block - allows styling of content',\n      group: 'Layout',\n      optionsMetadata: {\n        propertiesMetadata: [{\n          modelType: StyleBlockModel,\n          propertiesControls: [codePropertiesControlFor('style', CssLanguageModel)]\n        }]\n      }\n    };\n    /**\n     * @inheritdoc\n     */\n\n    this.addDescendant = (metadata, options) => {\n      options.content = metadata;\n    };\n    /**\n     * @inheritdoc\n     */\n\n\n    this.canDropMetadata = options => !options?.content;\n    /**\n     * @inheritdoc\n     */\n\n\n    this.getDescendants = options => options?.content ? [options?.content] : [];\n    /**\n     * @inheritdoc\n     */\n\n\n    this.removeDescendant = (_, options) => {\n      options.content = null;\n    };\n\n    Object.freeze(this);\n  }\n\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { TitledDialogService } from '@anglr/common/material';\nimport { CodeEditorDialogComponent } from '@anglr/dynamic';\nimport { isBlank, isPresent } from '@jscrpt/common';\nimport { lastValueFrom } from 'rxjs';\nimport { PropertiesControlBase } from '../../modules';\nimport { LayoutEditorMetadataExtractor } from '../../services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services\";\nimport * as i2 from \"@anglr/common/material\";\n/**\n * Base component used for displaying code properties control\n */\n\nexport class BaseCodePropertiesControlSAComponent extends PropertiesControlBase {\n  //######################### constructor #########################\n  constructor(changeDetector, metadataExtractor, dialog) {\n    super(changeDetector, metadataExtractor);\n    this.dialog = dialog;\n  } //######################### protected methods - template bindings #########################\n\n  /**\n   * Shows code editor\n   */\n\n\n  showCodeEditor() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (isBlank(_this.property) || !_this.languageModel) {\n        return;\n      }\n\n      const result = yield lastValueFrom(_this.dialog.open(CodeEditorDialogComponent, {\n        title: 'Code editor',\n        width: '75vw',\n        height: '75vh',\n        data: {\n          content: _this.form?.get(_this.property)?.value ?? '',\n          languageModel: _this.languageModel\n        }\n      }).afterClosed());\n\n      if (isPresent(result)) {\n        const control = _this.form?.get(_this.property);\n\n        if (control instanceof FormControl) {\n          control.setValue(result.content);\n        }\n      }\n    })();\n  }\n\n}\n\nBaseCodePropertiesControlSAComponent.ɵfac = function BaseCodePropertiesControlSAComponent_Factory(t) {\n  return new (t || BaseCodePropertiesControlSAComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.LayoutEditorMetadataExtractor), i0.ɵɵdirectiveInject(i2.TitledDialogService));\n};\n\nBaseCodePropertiesControlSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseCodePropertiesControlSAComponent,\n  selectors: [[\"base-code-properties-control\"]],\n  inputs: {\n    property: \"property\",\n    languageModel: \"languageModel\"\n  },\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 3,\n  vars: 1,\n  consts: [[\"type\", \"button\", \"type\", \"button\", 1, \"dynamic-btn\", \"dynamic-btn-primary\", \"dynamic-margin-vertical-small\", 3, \"click\"]],\n  template: function BaseCodePropertiesControlSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function BaseCodePropertiesControlSAComponent_Template_button_click_0_listener() {\n        return ctx.showCodeEditor();\n      });\n      i0.ɵɵelementStart(1, \"span\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Edit \", ctx.property, \"\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseCodePropertiesControlSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-code-properties-control',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<button type=\\\"button\\\" type=\\\"button\\\" class=\\\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\\\" (click)=\\\"showCodeEditor()\\\">\\n    <span>Edit {{property}}</span>\\n</button>\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.LayoutEditorMetadataExtractor\n    }, {\n      type: i2.TitledDialogService\n    }];\n  }, {\n    property: [{\n      type: Input\n    }],\n    languageModel: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\n\n\nexport function codePropertiesControlFor(property, languageModel) {\n  class CodePropertiesControl extends BaseCodePropertiesControlSAComponent {\n    constructor() {\n      super(...arguments);\n      /**\n       * @inheritdoc\n       */\n\n      this.property = property;\n      /**\n       * @inheritdoc\n       */\n\n      this.languageModel = languageModel;\n    }\n\n  }\n\n  CodePropertiesControl.ɵfac = /* @__PURE__ */function () {\n    let ɵCodePropertiesControl_BaseFactory;\n    return function CodePropertiesControl_Factory(t) {\n      return (ɵCodePropertiesControl_BaseFactory || (ɵCodePropertiesControl_BaseFactory = i0.ɵɵgetInheritedFactory(CodePropertiesControl)))(t || CodePropertiesControl);\n    };\n  }();\n\n  CodePropertiesControl.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CodePropertiesControl,\n    selectors: [[\"code-properties-control\"]],\n    inputs: {\n      property: \"property\",\n      languageModel: \"languageModel\"\n    },\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[\"type\", \"button\", \"type\", \"button\", 1, \"dynamic-btn\", \"dynamic-btn-primary\", \"dynamic-margin-vertical-small\", 3, \"click\"]],\n    template: function CodePropertiesControl_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function CodePropertiesControl_Template_button_click_0_listener() {\n          return ctx.showCodeEditor();\n        });\n        i0.ɵɵelementStart(1, \"span\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Edit \", ctx.property, \"\");\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodePropertiesControl, [{\n      type: Component,\n      args: [{\n        selector: 'code-properties-control',\n        standalone: true,\n        imports: [],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        template: \"<button type=\\\"button\\\" type=\\\"button\\\" class=\\\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\\\" (click)=\\\"showCodeEditor()\\\">\\n    <span>Edit {{property}}</span>\\n</button>\"\n      }]\n    }], null, {\n      property: [{\n        type: Input\n      }],\n      languageModel: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return CodePropertiesControl;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, Input } from '@angular/core';\nimport { LayoutEditorMetadataExtractor } from '../../../services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services\";\n/**\n * Base class for properties control\n */\n\nexport class PropertiesControlBase {\n  //######################### constructor #########################\n  constructor(_changeDetector, _extractor) {\n    this._changeDetector = _changeDetector;\n    this._extractor = _extractor; //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n\n    this._initialized = false;\n    /**\n     * @inheritdoc\n     */\n\n    this.propertiesMetadata = null;\n  } //######################### public methods - implementation of OnInit #########################\n\n  /**\n   * Initialize component\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._initialized) {\n        return;\n      }\n\n      _this._initialized = true;\n      yield _this._initialize();\n    })();\n  } //######################### public methods - implementation of PropertiesControl #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.ngOnInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this._changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Use this method for initialization of component\n   */\n\n\n  _initialize() {}\n\n}\n\nPropertiesControlBase.ɵfac = function PropertiesControlBase_Factory(t) {\n  return new (t || PropertiesControlBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.LayoutEditorMetadataExtractor));\n};\n\nPropertiesControlBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: PropertiesControlBase,\n  inputs: {\n    form: \"form\",\n    propertiesMetadata: \"propertiesMetadata\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PropertiesControlBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.LayoutEditorMetadataExtractor\n    }];\n  }, {\n    form: [{\n      type: Input\n    }],\n    propertiesMetadata: [{\n      type: Input\n    }]\n  });\n})();"],"names":["lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","value","error","complete","defaultValue","EmptyError","dialogElementUid","MatDialogClose","constructor","dialogRef","_elementRef","_dialog","type","ngOnInit","this","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","i1","MatDialogTitle","_dialogRef","id","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog","CssLanguageModel","editor","getModel","getValue","StyleBlockModel","style","StyleBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","addDescendant","metadata","options","content","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","asyncGeneratorStep","gen","_next","_throw","key","arg","info","done","BaseCodePropertiesControlSAComponent","changeDetector","metadataExtractor","super","showCodeEditor","fn","_this","property","languageModel","result","open","title","width","height","data","form","get","afterClosed","control","setValue","self","args","arguments","apply","err","undefined","codePropertiesControlFor","CodePropertiesControl","t","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","encapsulation","changeDetection","_asyncToGenerator","PropertiesControlBase","_changeDetector","_extractor","_initialized","_initialize","initialize","_this2","invalidateVisuals","detectChanges"],"sourceRoot":""}