{"version":3,"file":"1231.client.chunk.1dc67a25cbf8791211b2.js","mappings":"mjBASO,MAAMA,EAA6B,oBAAqF,mBAAY,WAAW,uDAA+CC,8BAAtE,IAArF,qDAK7BC,EAAgC,oBAA6D,mBAAY,WAAW,mEAAkDC,iCAAzE,IAA7D,qD,wLCUhCC,EAAoB,cAASC,EAAAA,EAsBhBC,YAAYC,GAAsB,I,EAAA,sC,EAAA,kBAE9C,WAAkBA,IAErBC,EAAAA,EAAAA,GAA6B,aAAcD,IAE1C,EAAKE,iBAAiBC,cAAcC,UAAY,EAAKC,SAAW,GANhB,E,gLAQvD,CAOkBC,eAEXC,KAAKC,aAKND,KAAKE,SAASJ,UAEbE,KAAKF,QAAUE,KAAKE,QAAQJ,QAC5BE,KAAKL,iBAAiBC,cAAcC,UAAYG,KAAKF,SAAW,GAEvE,G,6DAjDQR,KAAAA,GAAAA,E,uBAAAA,E,oMAAAA,GAAoB,UAFhCa,EAAAA,EAAAA,GAAwBf,IACxBgB,EAAAA,EAAAA,GAAqBlB,IACTI,GCnBb,UAEae,EAAa,CAACC,EAAAA,EAAgCC,EAAAA,E,kDCCrD,SAAUH,EAAqBI,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBACzG,C,scCAK,MAAgBjB,EA6ClBmB,YAAsBC,EACAhB,EACAiB,EAC4BC,GAH5B,KAAAF,eAAAA,EACA,KAAAhB,iBAAAA,EACA,KAAAiB,SAAAA,EAC4B,KAAAC,OAAAA,EAzCxC,KAAAR,WAA+C,GAK/C,KAAAJ,aAAuB,EAKvB,KAAAa,WAAqB,CAiC9B,CA1BaC,cAEV,OAAOf,KAAKL,gBACf,CAKaqB,wBAEV,OAAOhB,KAAKE,OACf,CAsBMe,cAEH,IAAGjB,KAAKc,UAAR,CAKAd,KAAKc,WAAY,EAEjB,IAAI,MAAMI,KAAOlB,KAAKK,WAElBa,EAAIC,UAGRnB,KAAKoB,WATJ,CAUJ,CAOYC,WAAQ,iCAEjB,GAAG,EAAKpB,YAEJ,OAGJ,EAAKA,aAAc,EACnB,MAAMe,EAAoB,EAAKA,kBAK/B,SAHM,EAAKM,eACL,EAAKvB,eAERiB,EAEC,IAAI,MAAMO,KAAa,EAAKlB,iBAElBkB,EAAUC,WAAW,EAAKZ,SAAU,EAAKG,QAAS,SAI1D,EAAKU,WArBM,KAsBpB,CAKYjC,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACU,EAAKM,eAEX,MAAMiB,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMO,KAAa,EAAKlB,iBAElBkB,EAAUG,cAAcV,GAItC,IAAI,EAAKf,YAEL,aAGE,EAAK0B,iBACd,QAEMlC,GAAQC,EAAAA,EAAAA,GAAsC,aAEjDkC,EAAAA,EAAAA,IAAcnC,IAEd,EAAKoC,UAAUpC,EA9BwB,KAgC9C,CAKMqC,mBAAmBzB,GAEtBL,KAAKK,WAAaA,CACrB,CAKM0B,oBAEH/B,KAAKW,eAAeqB,eACvB,CAOSV,SAET,CAKSG,YAET,CAKSE,kBAET,CAMSE,UAAUI,GAEnB,CAKSlC,eAET,CAKSqB,YAET,E,iCAvMiB7B,GAAAA,EAAAA,EAAmB2C,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBC,EAAAA,GAAMA,G,oBAhDR5C,E,6ECHhB,MAAOgB,UAAkC6B,EAAAA,EAcxBd,SAEftB,KAAKqC,eACR,CAKkBV,kBAEf3B,KAAKqC,eACR,CAOSA,gBAEN,MAAMnC,EAAUF,KAAKE,QACfoC,EAAQtC,KAAKe,SAASnB,cAAc0C,MAE1C,GAAGtC,KAAKe,QACR,CACI,IAAGwB,EAAAA,EAAAA,IAAUvC,KAAKwC,cAEd,IAAI,MAAMC,KAAYzC,KAAKwC,aAAaE,MAAM,KAEvCD,GAECzC,KAAKe,QAAQnB,cAAc+C,UAAUC,OAAOH,GAOxD,GAFAzC,KAAKwC,aAAetC,GAASuC,SAE1BvC,GAASuC,SAER,IAAI,MAAMA,KAAYvC,EAAQuC,SAASC,MAAM,KAEtCD,GAECzC,KAAKe,SAASnB,cAAc+C,UAAUE,IAAIJ,EAIzD,EAEEF,EAAAA,EAAAA,IAAUD,KAENpC,GAAS4C,UAELP,EAAAA,EAAAA,IAAUrC,EAAQ4C,OAAOC,UAExBT,EAAMU,aAAe9C,EAAQ4C,OAAOC,SAGrCR,EAAAA,EAAAA,IAAUrC,EAAQ4C,OAAOG,SAExBX,EAAMY,YAAchD,EAAQ4C,OAAOG,QAGpCV,EAAAA,EAAAA,IAAUrC,EAAQ4C,OAAOK,OAExBb,EAAMc,UAAYlD,EAAQ4C,OAAOK,MAGlCZ,EAAAA,EAAAA,IAAUrC,EAAQ4C,OAAOO,QAExBf,EAAMgB,WAAapD,EAAQ4C,OAAOO,OAIvCnD,GAASqD,WAELhB,EAAAA,EAAAA,IAAUrC,EAAQqD,QAAQR,UAEzBT,EAAMkB,cAAgBtD,EAAQqD,QAAQR,SAGvCR,EAAAA,EAAAA,IAAUrC,EAAQqD,QAAQN,SAEzBX,EAAMmB,aAAevD,EAAQqD,QAAQN,QAGtCV,EAAAA,EAAAA,IAAUrC,EAAQqD,QAAQJ,OAEzBb,EAAMoB,WAAaxD,EAAQqD,QAAQJ,MAGpCZ,EAAAA,EAAAA,IAAUrC,EAAQqD,QAAQF,QAEzBf,EAAMqB,YAAczD,EAAQqD,QAAQF,OAIzCnD,GAAS0D,eAELrB,EAAAA,EAAAA,IAAUrC,EAAQ0D,YAAYC,YAE7BvB,EAAMuB,SAAW3D,EAAQ0D,YAAYC,WAGtCtB,EAAAA,EAAAA,IAAUrC,EAAQ0D,YAAYE,cAE7BxB,EAAMwB,WAAa5D,EAAQ0D,YAAYE,WAAWC,aAIjE,E,iMC7HC,MAAOzD,UAAuC8B,EAAAA,EAApD1B,c,oBAOc,KAAAsD,mBAA8C,KAK9C,KAAAC,iBAAmD,IAwChE,CAjC4B3C,SAAM,I,EAAA,c,EAAA,YAEvB,EAAKV,UAAa,EAAKsD,UAAa,EAAKC,WAK7C,EAAKH,qBAAL,EAAKA,mBAAuB,EAAKpD,SAASwD,IAAIC,EAAAA,EAAoB,OAClE,EAAKJ,mBAAL,EAAKA,iBAAqB,EAAKrD,SAASwD,IAAIE,EAAAA,EAA2B,OAEnE,EAAKN,oBAAuB,EAAKC,mBAKrC,EAAKA,iBAAiBM,kBAAkB,EAAKL,SAASM,GAAI,EAAKL,gBACzD,EAAKH,mBAAmB/D,YAC9B,EAAK+D,mBAAmBS,gBAAgB,EAAKP,SAASM,KAjB3B,E,gLAkB9B,CAKkBpD,YAEXpB,KAAKgE,oBAAuBhE,KAAKiE,kBAAqBjE,KAAKkE,WAK/DlE,KAAKgE,mBAAmBU,iBAAiB1E,KAAKkE,SAASM,IACvDxE,KAAKiE,iBAAiBU,oBAAoB3E,KAAKkE,SAASM,IAC3D,E,+VCnDC,MAAgBpC,EA8BlB1B,YAAsBwD,GAAA,KAAAA,SAAAA,EAHZ,KAAAjE,aAAuB,CAKhC,CAOYuB,WAAWZ,EAAoBG,EAAkCoD,GAAmB,iCAE7F,EAAKlE,aAAc,EAEnB,EAAKW,SAAWA,EAChB,EAAKG,QAAUA,EACf,EAAKoD,SAAWA,QAEV,EAAK7C,QARkF,KAShG,CAKYI,cAAcxB,GAAiB,iCAExC,EAAKA,QAAUA,EAEX,EAAKD,oBAKH,EAAK0B,kBAT6B,KAU3C,CAKMR,UAEHnB,KAAKoB,WACR,CAOSE,SAET,CAKSK,kBAET,CAKSP,YAET,E","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/htmlBlock/htmlBlock.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/htmlBlock/htmlBlock.component.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/htmlBlock/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {HtmlBlockComponentOptions} from './htmlBlock.options';\n\n/**\n * Html block layout metadata loader\n */\nexport const HtmlBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>> = async () => new (await import('./metadata/htmlBlock.layoutMetadata')).HtmlBlockLayoutEditorMetadata();\n\n/**\n * Html block relations metadata loader\n */\nexport const HtmlBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/htmlBlock.relationsMetadata')).HtmlBlockRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input, SimpleChanges} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from './htmlBlock.options';\nimport {HtmlBlockLayoutMetadataLoader, HtmlBlockRelationsMetadataLoader} from './htmlBlock.metadata';\n\n/**\n * Component used for displaying html block\n */\n@Component(\n{\n    selector: 'html-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(HtmlBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(HtmlBlockLayoutMetadataLoader)\nexport class HtmlBlockSAComponent extends LayoutComponentBase<HtmlBlockComponentOptions> implements LayoutComponent<HtmlBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public override async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.ngOnChanges(changes);\n\n        if(nameof<HtmlBlockSAComponent>('content') in changes)\n        {\n            this.componentElement.nativeElement.innerHTML = this.content ?? '';\n        }\n    }\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        if(this.options?.content)\n        {\n            this.content = this.options.content;\n            this.componentElement.nativeElement.innerHTML = this.content ?? '';\n        }\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {HtmlBlockSAComponent} from './htmlBlock.component';\n\nexport default HtmlBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension, ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["HtmlBlockLayoutMetadataLoader","HtmlBlockLayoutEditorMetadata","HtmlBlockRelationsMetadataLoader","HtmlBlockRelationsEditorMetadata","HtmlBlockSAComponent","LayoutComponentBase","ngOnChanges","changes","nameof","componentElement","nativeElement","innerHTML","content","onOptionsSet","this","initialized","options","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","injector","logger","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","LOGGER","DynamicItemExtensionBase","_applyStyling","style","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}