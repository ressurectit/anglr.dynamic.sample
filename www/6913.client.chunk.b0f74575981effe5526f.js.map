{"version":3,"file":"6913.client.chunk.b0f74575981effe5526f.js","mappings":"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","sources":["webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/decorators/dynamicOutput/dynamicOutput.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/rest-components/src/dynamicItems/rest/rest.metadata.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/rest-components/src/dynamicItems/rest/rest.relations.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/rest-components/src/dynamicItems/rest/type.js"],"sourcesContent":["import { Subject } from 'rxjs';\n/**\n * Creates dynamic output for property\n */\n\nexport function DynamicOutput() {\n  return function (target, propertyKey) {\n    const prop = propertyKey;\n    Object.defineProperty(target, `${prop}Change`, {\n      get: function () {\n        if (!this[`ɵ${prop}Change`]) {\n          this[`ɵ${prop}Change`] = new Subject();\n        }\n\n        return this[`ɵ${prop}Change`];\n      }\n    });\n    Object.defineProperty(target, prop, {\n      get: function () {\n        return this[`ɵ${prop}`];\n      },\n      set: function (value) {\n        this[`ɵ${prop}`] = value;\n        this[`${prop}Change`].next();\n      }\n    });\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Rest relations metadata loader\n */\nexport const RestRelationsMetadataLoader = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/rest.relationsMetadata')).RestRelationsEditorMetadata();\n  });\n\n  return function RestRelationsMetadataLoader() {\n    return _ref.apply(this, arguments);\n  };\n}();","import { __decorate, __metadata } from \"tslib\";\nimport { Injector } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpRequest } from '@angular/common/http';\nimport { DynamicOutput, PureRelationsComponent } from '@anglr/dynamic/relations';\nimport { RelationsEditorMetadata } from '@anglr/dynamic/relations-editor';\nimport { LOGGER } from '@anglr/common';\nimport { handleHeaderParam, handlePathParam, handleQueryObjectParam, handleQueryParam, mergeQueryObjectParamsWithHttpParams, QueryStringSerializer } from '@anglr/rest';\nimport { isEmptyObject } from '@jscrpt/common';\nimport { catchError } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\nimport { RestRelationsMetadataLoader } from './rest.metadata';\n/**\n * Rest relations component\n */\n\nlet RestRelations = class RestRelations {\n  //######################### constructor #########################\n  constructor(injector) {\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Success output for rest result\n     */\n    this.success = {\n      test: true\n    };\n    /**\n     * Error output for rest result\n     */\n\n    this.error = null;\n    this.http = injector.get(HttpClient);\n    this.logger = injector.get(LOGGER);\n    this.queryStringSerializer = injector.get(QueryStringSerializer);\n  } //######################### public properties - implementation of RelationsComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  get relationsOptions() {\n    return this.ɵRelationsOptions;\n  }\n\n  set relationsOptions(value) {\n    this.ɵRelationsOptions = value;\n    this.initialize();\n  } //######################### public methods - implementation of RelationsComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnChanges(_changes) {\n    this.makeRequest();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {} //######################### protected methods #########################\n\n  /**\n   * Initialize rest relations\n   */\n\n\n  initialize() {\n    if (this.relationsOptions) {\n      if (this.relationsOptions.params && Array.isArray(this.relationsOptions.params)) {\n        for (const param of this.relationsOptions.params) {\n          if (param.configurable && param.name) {\n            Object.defineProperty(this, param.name, {\n              configurable: true,\n              enumerable: true,\n              set: value => param.value = value\n            });\n          }\n        }\n      }\n    }\n\n    if (this.relationsOptions?.runImmediately) {\n      this.makeRequest();\n    }\n  }\n  /**\n   * Make http request\n   */\n\n\n  makeRequest() {\n    if (!this.relationsOptions || !this.relationsOptions.method || !this.relationsOptions.url) {\n      this.logger.warn('RestRelations: missing options for craeting http request {@data}', this.relationsOptions);\n      return;\n    }\n\n    let body = null;\n    let url = this.relationsOptions.url;\n    const params = {};\n    const headers = {};\n    const queryStrings = [];\n\n    if (this.relationsOptions.params && Array.isArray(this.relationsOptions.params)) {\n      for (const param of this.relationsOptions.params) {\n        if (!param.name) {\n          continue;\n        }\n\n        const data = {\n          index: 0,\n          key: param.name,\n          value: param.value,\n          transformFn: null\n        };\n\n        switch (param.type) {\n          case 'PATH':\n            {\n              url = handlePathParam(data, url);\n              break;\n            }\n\n          case 'BODY':\n            {\n              body = param.value;\n              break;\n            }\n\n          case 'QUERY':\n            {\n              handleQueryParam(data, params);\n              break;\n            }\n\n          case 'QUERY OBJECT':\n            {\n              handleQueryObjectParam(data, queryStrings, this.queryStringSerializer);\n              break;\n            }\n\n          case 'HEADER':\n            {\n              handleHeaderParam(data, headers);\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n      }\n    }\n\n    let request = new HttpRequest(this.relationsOptions.method, url, body, {\n      reportProgress: false,\n      responseType: 'json'\n    }); // query params\n\n    if (!isEmptyObject(params)) {\n      request = request.clone({\n        setParams: params\n      });\n    } // header params\n\n\n    if (!isEmptyObject(headers)) {\n      request = request.clone({\n        setHeaders: headers\n      });\n    } // query object params\n\n\n    if (queryStrings.length) {\n      const requestParams = mergeQueryObjectParamsWithHttpParams(queryStrings, request.params);\n      request = request.clone({\n        params: requestParams\n      });\n    }\n\n    this.http.request(request).pipe(catchError(error => {\n      //TODO: proper handling\n      this.success = null;\n      this.error = error;\n      return EMPTY;\n    })).subscribe(result => {\n      if (result.type == HttpEventType.Response) {\n        if (result.status >= 200 && result.status <= 300) {\n          this.success = result.body;\n          this.error = null;\n          return;\n        }\n      }\n    });\n  }\n\n};\n\n__decorate([DynamicOutput(), __metadata(\"design:type\", Object)], RestRelations.prototype, \"success\", void 0);\n\n__decorate([DynamicOutput(), __metadata(\"design:type\", Object)], RestRelations.prototype, \"error\", void 0);\n\nRestRelations = __decorate([PureRelationsComponent(), RelationsEditorMetadata(RestRelationsMetadataLoader), __metadata(\"design:paramtypes\", [Injector])], RestRelations);\nexport { RestRelations };","import { RestRelations } from './rest.relations';\nexport default RestRelations;"],"names":["DynamicOutput","target","propertyKey","prop","Object","defineProperty","get","this","set","value","next","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","RestRelationsMetadataLoader","fn","_ref","RestRelationsEditorMetadata","self","args","arguments","apply","err","undefined","RestRelations","constructor","injector","success","test","http","logger","queryStringSerializer","relationsOptions","initialize","ngOnChanges","_changes","makeRequest","invalidateVisuals","params","Array","isArray","param","configurable","name","enumerable","runImmediately","method","url","warn","body","headers","queryStrings","data","index","transformFn","type","request","reportProgress","responseType","clone","setParams","setHeaders","length","requestParams","pipe","catchError","E","subscribe","result","status","prototype"],"sourceRoot":""}