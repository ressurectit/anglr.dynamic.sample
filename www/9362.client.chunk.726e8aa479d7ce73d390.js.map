{"version":3,"file":"9362.client.chunk.726e8aa479d7ce73d390.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/material/core/datetime/date-formats.ts","webpack://ng-universal-demo/../../../src/material/datepicker/calendar-body.ts","webpack://ng-universal-demo/../src/material/datepicker/calendar-body.html","webpack://ng-universal-demo/../../../src/material/datepicker/calendar-body.html","webpack://ng-universal-demo/../../../src/material/core/datetime/date-adapter.ts","webpack://ng-universal-demo/../../../src/material/datepicker/date-selection-model.ts","webpack://ng-universal-demo/../../../src/material/datepicker/date-range-selection-strategy.ts","webpack://ng-universal-demo/../src/material/datepicker/month-view.html","webpack://ng-universal-demo/../../../src/material/datepicker/month-view.ts","webpack://ng-universal-demo/../../../src/material/datepicker/month-view.html","webpack://ng-universal-demo/../../../src/material/datepicker/multi-year-view.ts","webpack://ng-universal-demo/../src/material/datepicker/multi-year-view.html","webpack://ng-universal-demo/../../../src/material/datepicker/multi-year-view.html","webpack://ng-universal-demo/../../../src/material/datepicker/year-view.ts","webpack://ng-universal-demo/../src/material/datepicker/year-view.html","webpack://ng-universal-demo/../../../src/material/datepicker/year-view.html","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-intl.ts","webpack://ng-universal-demo/../../../src/material/button/button.ts","webpack://ng-universal-demo/../src/material/button/button.html","webpack://ng-universal-demo/../../../src/material/button/button.html","webpack://ng-universal-demo/../src/material/datepicker/calendar.html","webpack://ng-universal-demo/../../../src/material/datepicker/calendar.ts","webpack://ng-universal-demo/../src/material/datepicker/calendar-header.html","webpack://ng-universal-demo/../../../src/material/datepicker/calendar-header.html","webpack://ng-universal-demo/../../../src/material/datepicker/calendar.html","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-animations.ts","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-base.ts","webpack://ng-universal-demo/../src/material/datepicker/datepicker-content.html","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-content.html","webpack://ng-universal-demo/../../../src/cdk/coercion/string-array.ts","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-module.ts","webpack://ng-universal-demo/../../../src/material/core/datetime/native-date-adapter.ts","webpack://ng-universal-demo/../../../src/material/core/datetime/index.ts","webpack://ng-universal-demo/../../../src/material/core/datetime/native-date-formats.ts","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/datepicker/datepicker.metadata.ts","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker.ts","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-input-base.ts","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-input.ts","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-toggle.ts","webpack://ng-universal-demo/../src/material/datepicker/datepicker-toggle.html","webpack://ng-universal-demo/../../../src/material/datepicker/datepicker-toggle.html","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/datepicker/datepicker.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/material-components/src/dynamicItems/datepicker/datepicker.component.html","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/datepicker/type.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any;\n  };\n  display: {\n    dateInput: any;\n    monthLabel?: any;\n    monthYearLabel: any;\n    dateA11yLabel: any;\n    monthYearA11yLabel: any;\n  };\n};\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/** Extra CSS classes that can be associated with a calendar cell. */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/** Function that can generate the extra classes that should be added to a calendar cell. */\nexport type MatCalendarCellClassFunction<D> = (\n  date: D,\n  view: 'month' | 'year' | 'multi-year',\n) => MatCalendarCellCssClasses;\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell<D = any> {\n  constructor(\n    public value: number,\n    public displayValue: string,\n    public ariaLabel: string,\n    public enabled: boolean,\n    public cssClasses: MatCalendarCellCssClasses = {},\n    public compareValue = value,\n    public rawValue?: D,\n  ) {}\n}\n\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\nexport interface MatCalendarUserEvent<D> {\n  value: D;\n  event: Event;\n}\n\nlet calendarBodyId = 1;\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody<D = any> implements OnChanges, OnDestroy, AfterViewChecked {\n  /**\n   * Used to skip the next focus event when rendering the preview range.\n   * We need a flag like this, because some browsers fire focus events asynchronously.\n   */\n  private _skipNextFocus: boolean;\n\n  /**\n   * Used to focus the active cell after change detection has run.\n   */\n  private _focusActiveCellAfterViewChecked = false;\n\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** Start value of the selected date range. */\n  @Input() startValue: number;\n\n  /** End value of the selected date range. */\n  @Input() endValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols: number = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell: number = 0;\n\n  ngAfterViewChecked() {\n    if (this._focusActiveCellAfterViewChecked) {\n      this._focusActiveCell();\n      this._focusActiveCellAfterViewChecked = false;\n    }\n  }\n\n  /** Whether a range is being selected. */\n  @Input() isRange: boolean = false;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio: number = 1;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: number | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: number | null;\n\n  /** Start of the preview range. */\n  @Input() previewStart: number | null = null;\n\n  /** End of the preview range. */\n  @Input() previewEnd: number | null = null;\n\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  @Input() startDateAccessibleName: string | null;\n\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  @Input() endDateAccessibleName: string | null;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange = new EventEmitter<MatCalendarUserEvent<number>>();\n\n  /** Emits when the preview has changed as a result of a user action. */\n  @Output() readonly previewChange = new EventEmitter<\n    MatCalendarUserEvent<MatCalendarCell | null>\n  >();\n\n  @Output() readonly activeDateChange = new EventEmitter<MatCalendarUserEvent<number>>();\n\n  /** Emits the date at the possible start of a drag event. */\n  @Output() readonly dragStarted = new EventEmitter<MatCalendarUserEvent<D>>();\n\n  /** Emits the date at the conclusion of a drag, or null if mouse was not released on a date. */\n  @Output() readonly dragEnded = new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  private _didDragSinceMouseDown = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\n    _ngZone.runOutsideAngular(() => {\n      const element = _elementRef.nativeElement;\n      element.addEventListener('mouseenter', this._enterHandler, true);\n      element.addEventListener('touchmove', this._touchmoveHandler, true);\n      element.addEventListener('focus', this._enterHandler, true);\n      element.addEventListener('mouseleave', this._leaveHandler, true);\n      element.addEventListener('blur', this._leaveHandler, true);\n      element.addEventListener('mousedown', this._mousedownHandler);\n      element.addEventListener('touchstart', this._mousedownHandler);\n      window.addEventListener('mouseup', this._mouseupHandler);\n      window.addEventListener('touchend', this._touchendHandler);\n    });\n  }\n\n  /** Called when a cell is clicked. */\n  _cellClicked(cell: MatCalendarCell, event: MouseEvent): void {\n    // Ignore \"clicks\" that are actually canceled drags (eg the user dragged\n    // off and then went back to this cell to undo).\n    if (this._didDragSinceMouseDown) {\n      return;\n    }\n\n    if (cell.enabled) {\n      this.selectedValueChange.emit({value: cell.value, event});\n    }\n  }\n\n  _emitActiveDateChange(cell: MatCalendarCell, event: FocusEvent): void {\n    if (cell.enabled) {\n      this.activeDateChange.emit({value: cell.value, event});\n    }\n  }\n\n  /** Returns whether a cell should be marked as selected. */\n  _isSelected(value: number) {\n    return this.startValue === value || this.endValue === value;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${(50 * this.cellAspectRatio) / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mouseenter', this._enterHandler, true);\n    element.removeEventListener('touchmove', this._touchmoveHandler, true);\n    element.removeEventListener('focus', this._enterHandler, true);\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\n    element.removeEventListener('blur', this._leaveHandler, true);\n    element.removeEventListener('mousedown', this._mousedownHandler);\n    element.removeEventListener('touchstart', this._mousedownHandler);\n    window.removeEventListener('mouseup', this._mouseupHandler);\n    window.removeEventListener('touchend', this._touchendHandler);\n  }\n\n  /** Returns whether a cell is active. */\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /**\n   * Focuses the active cell after the microtask queue is empty.\n   *\n   * Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown\n   * (issue #24330).\n   *\n   * Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen\n   * reader enabled:\n   *\n   * 1. Pressing PageUp/PageDown repeatedly with pausing between each key press.\n   * 2. Pressing and holding the PageDown key with repeated keys enabled.\n   *\n   * Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration\n   * increased. Test 2 got slightly better until the duration was long enough to interfere with\n   * repeated keys. If the repeated key speed was faster than the timeout duration, then pressing\n   * and holding pagedown caused the entire page to scroll.\n   *\n   * Since repeated key speed can verify across machines, determined that any duration could\n   * potentially interfere with repeated keys. 0ms would be best because it almost entirely\n   * eliminates the focus being lost in Voiceover (#24330) without causing unintended side effects.\n   * Adding delay also complicates writing tests.\n   */\n  _focusActiveCell(movePreview = true) {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        setTimeout(() => {\n          const activeCell: HTMLElement | null = this._elementRef.nativeElement.querySelector(\n            '.mat-calendar-body-active',\n          );\n\n          if (activeCell) {\n            if (!movePreview) {\n              this._skipNextFocus = true;\n            }\n\n            activeCell.focus();\n          }\n        });\n      });\n    });\n  }\n\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n  _scheduleFocusActiveCellAfterViewChecked() {\n    this._focusActiveCellAfterViewChecked = true;\n  }\n\n  /** Gets whether a value is the start of the main range. */\n  _isRangeStart(value: number) {\n    return isStart(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is the end of the main range. */\n  _isRangeEnd(value: number) {\n    return isEnd(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is within the currently-selected range. */\n  _isInRange(value: number): boolean {\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\n  }\n\n  /** Gets whether a value is the start of the comparison range. */\n  _isComparisonStart(value: number) {\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let previousCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\n\n    if (!previousCell) {\n      const previousRow = this.rows[rowIndex - 1];\n      previousCell = previousRow && previousRow[previousRow.length - 1];\n    }\n\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\n  }\n\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let nextCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\n\n    if (!nextCell) {\n      const nextRow = this.rows[rowIndex + 1];\n      nextCell = nextRow && nextRow[0];\n    }\n\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\n  }\n\n  /** Gets whether a value is the end of the comparison range. */\n  _isComparisonEnd(value: number) {\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Gets whether a value is within the current comparison range. */\n  _isInComparisonRange(value: number) {\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n  }\n\n  /**\n   * Gets whether a value is the same as the start and end of the comparison range.\n   * For context, the functions that we use to determine whether something is the start/end of\n   * a range don't allow for the start and end to be on the same day, because we'd have to use\n   * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n   * the regular range, because when it happens, the selected styles take over and still show where\n   * the range would've been, however we don't have these selected styles for a comparison range.\n   * This function is used to apply a class that serves the same purpose as the one for selected\n   * dates, but it only applies in the context of a comparison range.\n   */\n  _isComparisonIdentical(value: number) {\n    // Note that we don't need to null check the start/end\n    // here, because the `value` will always be defined.\n    return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n  }\n\n  /** Gets whether a value is the start of the preview range. */\n  _isPreviewStart(value: number) {\n    return isStart(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is the end of the preview range. */\n  _isPreviewEnd(value: number) {\n    return isEnd(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is inside the preview range. */\n  _isInPreview(value: number) {\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n  }\n\n  /** Gets ids of aria descriptions for the start and end of a date range. */\n  _getDescribedby(value: number): string | null {\n    if (!this.isRange) {\n      return null;\n    }\n\n    if (this.startValue === value && this.endValue === value) {\n      return `${this._startDateLabelId} ${this._endDateLabelId}`;\n    } else if (this.startValue === value) {\n      return this._startDateLabelId;\n    } else if (this.endValue === value) {\n      return this._endDateLabelId;\n    }\n    return null;\n  }\n\n  /**\n   * Event handler for when the user enters an element\n   * inside the calendar body (e.g. by hovering in or focus).\n   */\n  private _enterHandler = (event: Event) => {\n    if (this._skipNextFocus && event.type === 'focus') {\n      this._skipNextFocus = false;\n      return;\n    }\n\n    // We only need to hit the zone when we're selecting a range.\n    if (event.target && this.isRange) {\n      const cell = this._getCellFromElement(event.target as HTMLElement);\n\n      if (cell) {\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\n      }\n    }\n  };\n\n  private _touchmoveHandler = (event: TouchEvent) => {\n    if (!this.isRange) return;\n\n    const target = getActualTouchTarget(event);\n    const cell = target ? this._getCellFromElement(target as HTMLElement) : null;\n\n    if (target !== event.target) {\n      this._didDragSinceMouseDown = true;\n    }\n\n    // If the initial target of the touch is a date cell, prevent default so\n    // that the move is not handled as a scroll.\n    if (getCellElement(event.target as HTMLElement)) {\n      event.preventDefault();\n    }\n\n    this._ngZone.run(() => this.previewChange.emit({value: cell?.enabled ? cell : null, event}));\n  };\n\n  /**\n   * Event handler for when the user's pointer leaves an element\n   * inside the calendar body (e.g. by hovering out or blurring).\n   */\n  private _leaveHandler = (event: Event) => {\n    // We only need to hit the zone when we're selecting a range.\n    if (this.previewEnd !== null && this.isRange) {\n      if (event.type !== 'blur') {\n        this._didDragSinceMouseDown = true;\n      }\n\n      // Only reset the preview end value when leaving cells. This looks better, because\n      // we have a gap between the cells and the rows and we don't want to remove the\n      // range just for it to show up again when the user moves a few pixels to the side.\n      if (\n        event.target &&\n        this._getCellFromElement(event.target as HTMLElement) &&\n        !(\n          (event as MouseEvent).relatedTarget &&\n          this._getCellFromElement((event as MouseEvent).relatedTarget as HTMLElement)\n        )\n      ) {\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\n      }\n    }\n  };\n\n  /**\n   * Triggered on mousedown or touchstart on a date cell.\n   * Respsonsible for starting a drag sequence.\n   */\n  private _mousedownHandler = (event: Event) => {\n    if (!this.isRange) return;\n\n    this._didDragSinceMouseDown = false;\n    // Begin a drag if a cell within the current range was targeted.\n    const cell = event.target && this._getCellFromElement(event.target as HTMLElement);\n    if (!cell || !this._isInRange(cell.rawValue)) {\n      return;\n    }\n\n    this._ngZone.run(() => {\n      this.dragStarted.emit({\n        value: cell.rawValue,\n        event,\n      });\n    });\n  };\n\n  /** Triggered on mouseup anywhere. Respsonsible for ending a drag sequence. */\n  private _mouseupHandler = (event: Event) => {\n    if (!this.isRange) return;\n\n    const cellElement = getCellElement(event.target as HTMLElement);\n    if (!cellElement) {\n      // Mouseup happened outside of datepicker. Cancel drag.\n      this._ngZone.run(() => {\n        this.dragEnded.emit({value: null, event});\n      });\n      return;\n    }\n\n    if (cellElement.closest('.mat-calendar-body') !== this._elementRef.nativeElement) {\n      // Mouseup happened inside a different month instance.\n      // Allow it to handle the event.\n      return;\n    }\n\n    this._ngZone.run(() => {\n      const cell = this._getCellFromElement(cellElement);\n      this.dragEnded.emit({value: cell?.rawValue ?? null, event});\n    });\n  };\n\n  /** Triggered on touchend anywhere. Respsonsible for ending a drag sequence. */\n  private _touchendHandler = (event: TouchEvent) => {\n    const target = getActualTouchTarget(event);\n\n    if (target) {\n      this._mouseupHandler({target} as unknown as Event);\n    }\n  };\n\n  /** Finds the MatCalendarCell that corresponds to a DOM node. */\n  private _getCellFromElement(element: HTMLElement): MatCalendarCell | null {\n    const cell = getCellElement(element);\n\n    if (cell) {\n      const row = cell.getAttribute('data-mat-row');\n      const col = cell.getAttribute('data-mat-col');\n\n      if (row && col) {\n        return this.rows[parseInt(row)][parseInt(col)];\n      }\n    }\n\n    return null;\n  }\n\n  private _id = `mat-calendar-body-${calendarBodyId++}`;\n\n  _startDateLabelId = `${this._id}-start-date`;\n\n  _endDateLabelId = `${this._id}-end-date`;\n}\n\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node: Node | undefined | null): node is HTMLTableCellElement {\n  return node?.nodeName === 'TD';\n}\n\n/**\n * Gets the date table cell element that is or contains the specified element.\n * Or returns null if element is not part of a date cell.\n */\nfunction getCellElement(element: HTMLElement): HTMLElement | null {\n  let cell: HTMLElement | undefined;\n  if (isTableCell(element)) {\n    cell = element;\n  } else if (isTableCell(element.parentNode)) {\n    cell = element.parentNode as HTMLElement;\n  } else if (isTableCell(element.parentNode?.parentNode)) {\n    cell = element.parentNode!.parentNode as HTMLElement;\n  }\n\n  return cell?.getAttribute('data-mat-row') != null ? cell : null;\n}\n\n/** Checks whether a value is the start of a range. */\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\n  return end !== null && start !== end && value < end && value === start;\n}\n\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\n  return start !== null && start !== end && value >= start && value === end;\n}\n\n/** Checks whether a value is inside of a range. */\nfunction isInRange(\n  value: number,\n  start: number | null,\n  end: number | null,\n  rangeEnabled: boolean,\n): boolean {\n  return (\n    rangeEnabled &&\n    start !== null &&\n    end !== null &&\n    start !== end &&\n    value >= start &&\n    value <= end\n  );\n}\n\n/**\n * Extracts the element that actually corresponds to a touch event's location\n * (rather than the element that initiated the sequence of touch events).\n */\nfunction getActualTouchTarget(event: TouchEvent): Element | null {\n  const touchLocation = event.changedTouches[0];\n  return document.elementFromPoint(touchLocation.clientX, touchLocation.clientY);\n}\n",null,"<!--\n  If there's not enough space in the first row, create a separate label row. We mark this row as\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\n-->\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\n  <td class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"numCols\"\n      [style.paddingTop]=\"_cellPadding\"\n      [style.paddingBottom]=\"_cellPadding\">\n    {{label}}\n  </td>\n</tr>\n\n<!-- Create the first row separately so we can include a special spacer cell. -->\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\n  <!--\n    This cell is purely decorative, but we can't put `aria-hidden` or `role=\"presentation\"` on it,\n    because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\n    table cells is maintained by setting the top and bottom padding as a percentage of the width\n    (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\n  -->\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\n      class=\"mat-calendar-body-label\"\n      [attr.colspan]=\"_firstRowOffset\"\n      [style.paddingTop]=\"_cellPadding\"\n      [style.paddingBottom]=\"_cellPadding\">\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\n  </td>\n  <!--\n    Each gridcell in the calendar contains a button, which signals to assistive technology that the\n    cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\n    background.\n  -->\n  <td\n    *ngFor=\"let item of row; let colIndex = index\"\n    role=\"gridcell\"\n    class=\"mat-calendar-body-cell-container\"\n    [style.width]=\"_cellWidth\"\n    [style.paddingTop]=\"_cellPadding\"\n    [style.paddingBottom]=\"_cellPadding\"\n    [attr.data-mat-row]=\"rowIndex\"\n    [attr.data-mat-col]=\"colIndex\"\n  >\n    <button\n        type=\"button\"\n        class=\"mat-calendar-body-cell\"\n        [ngClass]=\"item.cssClasses\"\n        [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\n        [class.mat-calendar-body-disabled]=\"!item.enabled\"\n        [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\n        [class.mat-calendar-body-range-start]=\"_isRangeStart(item.compareValue)\"\n        [class.mat-calendar-body-range-end]=\"_isRangeEnd(item.compareValue)\"\n        [class.mat-calendar-body-in-range]=\"_isInRange(item.compareValue)\"\n        [class.mat-calendar-body-comparison-bridge-start]=\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\"\n        [class.mat-calendar-body-comparison-bridge-end]=\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\"\n        [class.mat-calendar-body-comparison-start]=\"_isComparisonStart(item.compareValue)\"\n        [class.mat-calendar-body-comparison-end]=\"_isComparisonEnd(item.compareValue)\"\n        [class.mat-calendar-body-in-comparison-range]=\"_isInComparisonRange(item.compareValue)\"\n        [class.mat-calendar-body-preview-start]=\"_isPreviewStart(item.compareValue)\"\n        [class.mat-calendar-body-preview-end]=\"_isPreviewEnd(item.compareValue)\"\n        [class.mat-calendar-body-in-preview]=\"_isInPreview(item.compareValue)\"\n        [attr.aria-label]=\"item.ariaLabel\"\n        [attr.aria-disabled]=\"!item.enabled || null\"\n        [attr.aria-pressed]=\"_isSelected(item.compareValue)\"\n        [attr.aria-current]=\"todayValue === item.compareValue ? 'date' : null\"\n        [attr.aria-describedby]=\"_getDescribedby(item.compareValue)\"\n        (click)=\"_cellClicked(item, $event)\"\n        (focus)=\"_emitActiveDateChange(item, $event)\">\n        <div class=\"mat-calendar-body-cell-content mat-focus-indicator\"\n          [class.mat-calendar-body-selected]=\"_isSelected(item.compareValue)\"\n          [class.mat-calendar-body-comparison-identical]=\"_isComparisonIdentical(item.compareValue)\"\n          [class.mat-calendar-body-today]=\"todayValue === item.compareValue\">\n          {{item.displayValue}}\n        </div>\n        <div class=\"mat-calendar-body-cell-preview\" aria-hidden=\"true\"></div>\n    </button>\n  </td>\n</tr>\n\n<label [id]=\"_startDateLabelId\" class=\"mat-calendar-body-hidden-label\">\n  {{startDateAccessibleName}}\n</label>\n<label [id]=\"_endDateLabelId\" class=\"mat-calendar-body-hidden-label\">\n  {{endDateAccessibleName}}\n</label>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<{}>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): {} {\n  return inject(LOCALE_ID);\n}\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D, L = any> {\n  /** The locale to use for all dates. */\n  protected locale: L;\n  protected readonly _localeChanges = new Subject<void>();\n\n  /** A stream that emits when the locale changes. */\n  readonly localeChanges: Observable<void> = this._localeChanges;\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj: unknown): D | null {\n    return this.isDateInstance(obj) && this.isValid(obj as D) ? (obj as D) : null;\n  }\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: L) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return (\n      this.getYear(first) - this.getYear(second) ||\n      this.getMonth(first) - this.getMonth(second) ||\n      this.getDate(first) - this.getDate(second)\n    );\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FactoryProvider, Injectable, Optional, SkipSelf, OnDestroy} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** A class representing a range of dates. */\nexport class DateRange<D> {\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  private _disableStructuralEquivalency: never;\n\n  constructor(\n    /** The start date of the range. */\n    readonly start: D | null,\n    /** The end date of the range. */\n    readonly end: D | null,\n  ) {}\n}\n\n/**\n * Conditionally picks the date type, if a DateRange is passed in.\n * @docs-private\n */\nexport type ExtractDateTypeFromSelection<T> = T extends DateRange<infer D> ? D : NonNullable<T>;\n\n/**\n * Event emitted by the date selection model when its selection changes.\n * @docs-private\n */\nexport interface DateSelectionModelChange<S> {\n  /** New value for the selection. */\n  selection: S;\n\n  /** Object that triggered the change. */\n  source: unknown;\n\n  /** Previous value */\n  oldValue?: S;\n}\n\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\n@Injectable()\nexport abstract class MatDateSelectionModel<S, D = ExtractDateTypeFromSelection<S>>\n  implements OnDestroy\n{\n  private readonly _selectionChanged = new Subject<DateSelectionModelChange<S>>();\n\n  /** Emits when the selection has changed. */\n  selectionChanged: Observable<DateSelectionModelChange<S>> = this._selectionChanged;\n\n  protected constructor(\n    /** The current selection. */\n    readonly selection: S,\n    protected _adapter: DateAdapter<D>,\n  ) {\n    this.selection = selection;\n  }\n\n  /**\n   * Updates the current selection in the model.\n   * @param value New selection that should be assigned.\n   * @param source Object that triggered the selection change.\n   */\n  updateSelection(value: S, source: unknown) {\n    const oldValue = (this as {selection: S}).selection;\n    (this as {selection: S}).selection = value;\n    this._selectionChanged.next({selection: value, source, oldValue});\n  }\n\n  ngOnDestroy() {\n    this._selectionChanged.complete();\n  }\n\n  protected _isValidDateInstance(date: D): boolean {\n    return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n  }\n\n  /** Adds a date to the current selection. */\n  abstract add(date: D | null): void;\n\n  /** Checks whether the current selection is valid. */\n  abstract isValid(): boolean;\n\n  /** Checks whether the current selection is complete. */\n  abstract isComplete(): boolean;\n\n  /** Clones the selection model. */\n  abstract clone(): MatDateSelectionModel<S, D>;\n}\n\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\n@Injectable()\nexport class MatSingleDateSelectionModel<D> extends MatDateSelectionModel<D | null, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(null, adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a single date selection, the added date\n   * simply overwrites the previous selection\n   */\n  add(date: D | null) {\n    super.updateSelection(date, this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    return this.selection != null && this._isValidDateInstance(this.selection);\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a single date selection, this\n   * is true if the current selection is not null.\n   */\n  isComplete() {\n    return this.selection != null;\n  }\n\n  /** Clones the selection model. */\n  clone() {\n    const clone = new MatSingleDateSelectionModel<D>(this._adapter);\n    clone.updateSelection(this.selection, this);\n    return clone;\n  }\n}\n\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\n@Injectable()\nexport class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<DateRange<D>, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(new DateRange<D>(null, null), adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a date range selection, the added date\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\n   */\n  add(date: D | null): void {\n    let {start, end} = this.selection;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    super.updateSelection(new DateRange<D>(start, end), this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    const {start, end} = this.selection;\n\n    // Empty ranges are valid.\n    if (start == null && end == null) {\n      return true;\n    }\n\n    // Complete ranges are only valid if both dates are valid and the start is before the end.\n    if (start != null && end != null) {\n      return (\n        this._isValidDateInstance(start) &&\n        this._isValidDateInstance(end) &&\n        this._adapter.compareDate(start, end) <= 0\n      );\n    }\n\n    // Partial ranges are valid if the start/end is valid.\n    return (\n      (start == null || this._isValidDateInstance(start)) &&\n      (end == null || this._isValidDateInstance(end))\n    );\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a date range selection, this\n   * is true if the current selection has a non-null `start` and `end`.\n   */\n  isComplete(): boolean {\n    return this.selection.start != null && this.selection.end != null;\n  }\n\n  /** Clones the selection model. */\n  clone() {\n    const clone = new MatRangeDateSelectionModel<D>(this._adapter);\n    clone.updateSelection(this.selection, this);\n    return clone;\n  }\n}\n\n/** @docs-private */\nexport function MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(\n  parent: MatSingleDateSelectionModel<unknown>,\n  adapter: DateAdapter<unknown>,\n) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n */\nexport const MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n/** @docs-private */\nexport function MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(\n  parent: MatSingleDateSelectionModel<unknown>,\n  adapter: DateAdapter<unknown>,\n) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n */\nexport const MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Optional, SkipSelf, FactoryProvider} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {DateRange} from './date-selection-model';\n\n/** Injection token used to customize the date range selection behavior. */\nexport const MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken<\n  MatDateRangeSelectionStrategy<any>\n>('MAT_DATE_RANGE_SELECTION_STRATEGY');\n\n/** Object that can be provided in order to customize the date range selection behavior. */\nexport interface MatDateRangeSelectionStrategy<D> {\n  /**\n   * Called when the user has finished selecting a value.\n   * @param date Date that was selected. Will be null if the user cleared the selection.\n   * @param currentRange Range that is currently show in the calendar.\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\n   *    event, but it may get expanded in the future.\n   */\n  selectionFinished(date: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n\n  /**\n   * Called when the user has activated a new date (e.g. by hovering over\n   * it or moving focus) and the calendar tries to display a date range.\n   *\n   * @param activeDate Date that the user has activated. Will be null if the user moved\n   *    focus to an element that's no a calendar cell.\n   * @param currentRange Range that is currently shown in the calendar.\n   * @param event DOM event that caused the preview to be changed. Will be either a\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\n   */\n  createPreview(activeDate: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n\n  /**\n   * Called when the user has dragged a date in the currently selected range to another\n   * date. Returns the date updated range that should result from this interaction.\n   *\n   * @param dateOrigin The date the user started dragging from.\n   * @param originalRange The originally selected date range.\n   * @param newDate The currently targeted date in the drag operation.\n   * @param event DOM event that triggered the updated drag state. Will be\n   *     `mouseenter`/`mouseup` or `touchmove`/`touchend` depending on the device type.\n   */\n  createDrag?(\n    dragOrigin: D,\n    originalRange: DateRange<D>,\n    newDate: D,\n    event: Event,\n  ): DateRange<D> | null;\n}\n\n/** Provides the default date range selection behavior. */\n@Injectable()\nexport class DefaultMatCalendarRangeStrategy<D> implements MatDateRangeSelectionStrategy<D> {\n  constructor(private _dateAdapter: DateAdapter<D>) {}\n\n  selectionFinished(date: D, currentRange: DateRange<D>) {\n    let {start, end} = currentRange;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n\n  createPreview(activeDate: D | null, currentRange: DateRange<D>) {\n    let start: D | null = null;\n    let end: D | null = null;\n\n    if (currentRange.start && !currentRange.end && activeDate) {\n      start = currentRange.start;\n      end = activeDate;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n\n  createDrag(dragOrigin: D, originalRange: DateRange<D>, newDate: D) {\n    let start = originalRange.start;\n    let end = originalRange.end;\n\n    if (!start || !end) {\n      // Can't drag from an incomplete range.\n      return null;\n    }\n\n    const adapter = this._dateAdapter;\n\n    const isRange = adapter.compareDate(start, end) !== 0;\n    const diffYears = adapter.getYear(newDate) - adapter.getYear(dragOrigin);\n    const diffMonths = adapter.getMonth(newDate) - adapter.getMonth(dragOrigin);\n    const diffDays = adapter.getDate(newDate) - adapter.getDate(dragOrigin);\n\n    if (isRange && adapter.sameDate(dragOrigin, originalRange.start)) {\n      start = newDate;\n      if (adapter.compareDate(newDate, end) > 0) {\n        end = adapter.addCalendarYears(end, diffYears);\n        end = adapter.addCalendarMonths(end, diffMonths);\n        end = adapter.addCalendarDays(end, diffDays);\n      }\n    } else if (isRange && adapter.sameDate(dragOrigin, originalRange.end)) {\n      end = newDate;\n      if (adapter.compareDate(newDate, start) < 0) {\n        start = adapter.addCalendarYears(start, diffYears);\n        start = adapter.addCalendarMonths(start, diffMonths);\n        start = adapter.addCalendarDays(start, diffDays);\n      }\n    } else {\n      start = adapter.addCalendarYears(start, diffYears);\n      start = adapter.addCalendarMonths(start, diffMonths);\n      start = adapter.addCalendarDays(start, diffDays);\n      end = adapter.addCalendarYears(end, diffYears);\n      end = adapter.addCalendarMonths(end, diffMonths);\n      end = adapter.addCalendarDays(end, diffDays);\n    }\n\n    return new DateRange<D>(start, end);\n  }\n}\n\n/** @docs-private */\nexport function MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(\n  parent: MatDateRangeSelectionStrategy<unknown>,\n  adapter: DateAdapter<unknown>,\n) {\n  return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n\n/** @docs-private */\nexport const MAT_CALENDAR_RANGE_STRATEGY_PROVIDER: FactoryProvider = {\n  provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n  deps: [[new Optional(), new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n  useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,\n};\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n  ESCAPE,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnDestroy,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarUserEvent,\n  MatCalendarCellClassFunction,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\nimport {\n  MatDateRangeSelectionStrategy,\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n} from './date-range-selection-strategy';\n\nconst DAYS_PER_WEEK = 7;\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n  private _selectionKeyPressed: boolean;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n      this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n      this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null {\n    return this._selected;\n  }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setRanges(this._selected);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  @Input() startDateAccessibleName: string | null;\n\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  @Input() endDateAccessibleName: string | null;\n\n  /** Origin of active drag, or null when dragging is not active. */\n  @Input() activeDrag: MatCalendarUserEvent<D> | null = null;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n    new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Emits when the user initiates a date range drag via mouse or touch. */\n  @Output() readonly dragStarted = new EventEmitter<MatCalendarUserEvent<D>>();\n\n  /**\n   * Emits when the user completes or cancels a date range drag.\n   * Emits null when the drag was canceled or the newly selected date range if completed.\n   */\n  @Output() readonly dragEnded = new EventEmitter<MatCalendarUserEvent<DateRange<D> | null>>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /** Start value of the currently-shown date range. */\n  _rangeStart: number | null;\n\n  /** End value of the currently-shown date range. */\n  _rangeEnd: number | null;\n\n  /** Start value of the currently-shown comparison date range. */\n  _comparisonRangeStart: number | null;\n\n  /** End value of the currently-shown comparison date range. */\n  _comparisonRangeEnd: number | null;\n\n  /** Start of the preview range. */\n  _previewStart: number | null;\n\n  /** End of the preview range. */\n  _previewEnd: number | null;\n\n  /** Whether the user is currently selecting a range of dates. */\n  _isRange: boolean;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string; narrow: string}[];\n\n  constructor(\n    readonly _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir?: Directionality,\n    @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY)\n    @Optional()\n    private _rangeStrategy?: MatDateRangeSelectionStrategy<D>,\n  ) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n\n    if (comparisonChange && !comparisonChange.firstChange) {\n      this._setRanges(this.selected);\n    }\n\n    if (changes['activeDrag'] && !this.activeDrag) {\n      this._clearPreview();\n    }\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(event: MatCalendarUserEvent<number>) {\n    const date = event.value;\n    const selectedDate = this._getDateFromDayOfMonth(date);\n    let rangeStartDate: number | null;\n    let rangeEndDate: number | null;\n\n    if (this._selected instanceof DateRange) {\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n    } else {\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n    }\n\n    if (rangeStartDate !== date || rangeEndDate !== date) {\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit({value: selectedDate, event: event.event});\n    this._clearPreview();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Takes the index of a calendar body cell wrapped in in an event as argument. For the date that\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n   * that date.\n   *\n   * This function is used to match each component's model of the active date with the calendar\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n   * updated value asynchronously via the `activeCell` Input.\n   */\n  _updateActiveDate(event: MatCalendarUserEvent<number>) {\n    const month = event.value;\n    const oldActiveDate = this._activeDate;\n    this.activeDate = this._getDateFromDayOfMonth(month);\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this._activeDate);\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(\n          this._activeDate,\n          1 - this._dateAdapter.getDate(this._activeDate),\n        );\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(\n          this._activeDate,\n          this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n            this._dateAdapter.getDate(this._activeDate),\n        );\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey\n          ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\n          : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey\n          ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\n          : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._selectionKeyPressed = true;\n\n        if (this._canSelect(this._activeDate)) {\n          // Prevent unexpected default actions such as form submission.\n          // Note that we only prevent the default action here while the selection happens in\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n          // because it's too late (see #23305).\n          event.preventDefault();\n        }\n        return;\n      case ESCAPE:\n        // Abort the current range selection if the user presses escape mid-selection.\n        if (this._previewEnd != null && !hasModifierKey(event)) {\n          this._clearPreview();\n          // If a drag is in progress, cancel the drag without changing the\n          // current selection.\n          if (this.activeDrag) {\n            this.dragEnded.emit({value: null, event});\n          } else {\n            this.selectedChange.emit(null);\n            this._userSelection.emit({value: null, event});\n          }\n          event.preventDefault();\n          event.stopPropagation(); // Prevents the overlay from closing.\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n\n      this._focusActiveCellAfterViewChecked();\n    }\n\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keyup events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeyup(event: KeyboardEvent): void {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\n        this._dateSelected({value: this._dateAdapter.getDate(this._activeDate), event});\n      }\n\n      this._selectionKeyPressed = false;\n    }\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._setRanges(this.selected);\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n    this._monthLabel = this._dateFormats.display.monthLabel\n      ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel)\n      : this._dateAdapter\n          .getMonthNames('short')\n          [this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate),\n      1,\n    );\n    this._firstWeekOffset =\n      (DAYS_PER_WEEK +\n        this._dateAdapter.getDayOfWeek(firstOfMonth) -\n        this._dateAdapter.getFirstDayOfWeek()) %\n      DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview?: boolean) {\n    this._matCalendarBody._focusActiveCell(movePreview);\n  }\n\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n  _focusActiveCellAfterViewChecked() {\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n  }\n\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\n  _previewChanged({event, value: cell}: MatCalendarUserEvent<MatCalendarCell<D> | null>) {\n    if (this._rangeStrategy) {\n      // We can assume that this will be a range, because preview\n      // events aren't fired for single date selections.\n      const value = cell ? cell.rawValue! : null;\n      const previewRange = this._rangeStrategy.createPreview(\n        value,\n        this.selected as DateRange<D>,\n        event,\n      );\n      this._previewStart = this._getCellCompareValue(previewRange.start);\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\n\n      if (this.activeDrag && value) {\n        const dragRange = this._rangeStrategy.createDrag?.(\n          this.activeDrag.value,\n          this.selected as DateRange<D>,\n          value,\n          event,\n        );\n\n        if (dragRange) {\n          this._previewStart = this._getCellCompareValue(dragRange.start);\n          this._previewEnd = this._getCellCompareValue(dragRange.end);\n        }\n      }\n\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n      // when navigating one month back using the keyboard which will cause this handler\n      // to throw a \"changed after checked\" error when updating the preview state.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Called when the user has ended a drag. If the drag/drop was successful,\n   * computes and emits the new range selection.\n   */\n  protected _dragEnded(event: MatCalendarUserEvent<D | null>) {\n    if (!this.activeDrag) return;\n\n    if (event.value) {\n      // Propagate drag effect\n      const dragDropResult = this._rangeStrategy?.createDrag?.(\n        this.activeDrag.value,\n        this.selected as DateRange<D>,\n        event.value,\n        event.event,\n      );\n\n      this.dragEnded.emit({value: dragDropResult ?? null, event: event.event});\n    } else {\n      this.dragEnded.emit({value: null, event: event.event});\n    }\n  }\n\n  /**\n   * Takes a day of the month and returns a new date in the same month and year as the currently\n   *  active date. The returned date will have the same day of the month as the argument date.\n   */\n  private _getDateFromDayOfMonth(dayOfMonth: number): D {\n    return this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate),\n      dayOfMonth,\n    );\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate),\n        i + 1,\n      );\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n\n      this._weeks[this._weeks.length - 1].push(\n        new MatCalendarCell<D>(\n          i + 1,\n          dateNames[i],\n          ariaLabel,\n          enabled,\n          cellClasses,\n          this._getCellCompareValue(date)!,\n          date,\n        ),\n      );\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return (\n      !!date &&\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n      (!this.dateFilter || this.dateFilter(date))\n    );\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate)\n      ? this._dateAdapter.getDate(date)\n      : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(\n      d1 &&\n      d2 &&\n      this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n      this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2)\n    );\n  }\n\n  /** Gets the value that will be used to one cell to another. */\n  private _getCellCompareValue(date: D | null): number | null {\n    if (date) {\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\n      // cell values, because we need to support ranges that span across multiple months/years.\n      const year = this._dateAdapter.getYear(date);\n      const month = this._dateAdapter.getMonth(date);\n      const day = this._dateAdapter.getDate(date);\n      return new Date(year, month, day).getTime();\n    }\n\n    return null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the current range based on a model value. */\n  private _setRanges(selectedValue: DateRange<D> | D | null) {\n    if (selectedValue instanceof DateRange) {\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n      this._isRange = true;\n    } else {\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n      this._isRange = false;\n    }\n\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n  }\n\n  /** Gets whether a date can be selected in the month view. */\n  private _canSelect(date: D) {\n    return !this.dateFilter || this.dateFilter(date);\n  }\n\n  /** Clears out preview state. */\n  private _clearPreview() {\n    this._previewStart = this._previewEnd = null;\n  }\n}\n","<table class=\"mat-calendar-table\" role=\"grid\">\n  <thead class=\"mat-calendar-table-header\">\n    <tr>\n      <th scope=\"col\" *ngFor=\"let day of _weekdays\">\n        <span class=\"cdk-visually-hidden\">{{day.long}}</span>\n        <span aria-hidden=\"true\">{{day.narrow}}</span>\n      </th>\n    </tr>\n    <tr><th aria-hidden=\"true\" class=\"mat-calendar-table-header-divider\" colspan=\"7\"></th></tr>\n  </thead>\n  <tbody mat-calendar-body\n         [label]=\"_monthLabel\"\n         [rows]=\"_weeks\"\n         [todayValue]=\"_todayDate!\"\n         [startValue]=\"_rangeStart!\"\n         [endValue]=\"_rangeEnd!\"\n         [comparisonStart]=\"_comparisonRangeStart\"\n         [comparisonEnd]=\"_comparisonRangeEnd\"\n         [previewStart]=\"_previewStart\"\n         [previewEnd]=\"_previewEnd\"\n         [isRange]=\"_isRange\"\n         [labelMinRequiredCells]=\"3\"\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n         [startDateAccessibleName]=\"startDateAccessibleName\"\n         [endDateAccessibleName]=\"endDateAccessibleName\"\n         (selectedValueChange)=\"_dateSelected($event)\"\n         (activeDateChange)=\"_updateActiveDate($event)\"\n         (previewChange)=\"_previewChanged($event)\"\n         (dragStarted)=\"dragStarted.emit($event)\"\n         (dragEnded)=\"_dragEnded($event)\"\n         (keyup)=\"_handleCalendarBodyKeyup($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarUserEvent,\n  MatCalendarCellClassFunction,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n  private _selectionKeyPressed: boolean;\n\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n      this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n      this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (\n      !isSameMultiYearView(\n        this._dateAdapter,\n        oldActiveDate,\n        this._activeDate,\n        this.minDate,\n        this.maxDate,\n      )\n    ) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null {\n    return this._selected;\n  }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedYear(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to date cells. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir?: Directionality,\n  ) {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage =\n      activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(event: MatCalendarUserEvent<number>) {\n    const year = event.value;\n    const selectedYear = this._dateAdapter.createDate(year, 0, 1);\n    const selectedDate = this._getDateFromYear(year);\n\n    this.yearSelected.emit(selectedYear);\n    this.selectedChange.emit(selectedDate);\n  }\n\n  /**\n   * Takes the index of a calendar body cell wrapped in in an event as argument. For the date that\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n   * that date.\n   *\n   * This function is used to match each component's model of the active date with the calendar\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n   * updated value asynchronously via the `activeCell` Input.\n   */\n  _updateActiveDate(event: MatCalendarUserEvent<number>) {\n    const year = event.value;\n    const oldActiveDate = this._activeDate;\n\n    this.activeDate = this._getDateFromYear(year);\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate),\n        );\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          yearsPerPage -\n            getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) -\n            1,\n        );\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? -yearsPerPage * 10 : -yearsPerPage,\n        );\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? yearsPerPage * 10 : yearsPerPage,\n        );\n        break;\n      case ENTER:\n      case SPACE:\n        // Note that we only prevent the default action here while the selection happens in\n        // `keyup` below. We can't do the selection here, because it can cause the calendar to\n        // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n        // because it's too late (see #23305).\n        this._selectionKeyPressed = true;\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCellAfterViewChecked();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keyup events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeyup(event: KeyboardEvent): void {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      if (this._selectionKeyPressed) {\n        this._yearSelected({value: this._dateAdapter.getYear(this._activeDate), event});\n      }\n\n      this._selectionKeyPressed = false;\n    }\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n  _focusActiveCellAfterViewChecked() {\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n  }\n\n  /**\n   * Takes a year and returns a new date on the same day and month as the currently active date\n   *  The returned date will have the same year as the argument date.\n   */\n  private _getDateFromYear(year: number) {\n    const activeMonth = this._dateAdapter.getMonth(this.activeDate);\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(\n      this._dateAdapter.createDate(year, activeMonth, 1),\n    );\n    const normalizedDate = this._dateAdapter.createDate(\n      year,\n      activeMonth,\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth),\n    );\n    return normalizedDate;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const date = this._dateAdapter.createDate(year, 0, 1);\n    const yearName = this._dateAdapter.getYearName(date);\n    const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (\n      year === undefined ||\n      year === null ||\n      (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n      (this.minDate && year < this._dateAdapter.getYear(this.minDate))\n    ) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (\n      let date = firstOfYear;\n      this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)\n    ) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-highlighted year based on a model value. */\n  private _setSelectedYear(value: DateRange<D> | D | null) {\n    this._selectedYear = null;\n\n    if (value instanceof DateRange) {\n      const displayValue = value.start || value.end;\n\n      if (displayValue) {\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\n      }\n    } else if (value) {\n      this._selectedYear = this._dateAdapter.getYear(value);\n    }\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>,\n  date1: D,\n  date2: D,\n  minDate: D | null,\n  maxDate: D | null,\n): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return (\n    Math.floor((year1 - startingYear) / yearsPerPage) ===\n    Math.floor((year2 - startingYear) / yearsPerPage)\n  );\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>,\n  activeDate: D,\n  minDate: D | null,\n  maxDate: D | null,\n): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>,\n  minDate: D | null,\n  maxDate: D | null,\n): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a: number, b: number): number {\n  return ((a % b) + b) % b;\n}\n",null,"<table class=\"mat-calendar-table\" role=\"grid\">\n  <thead aria-hidden=\"true\" class=\"mat-calendar-table-header\">\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\n  </thead>\n  <tbody mat-calendar-body\n         [rows]=\"_years\"\n         [todayValue]=\"_todayYear\"\n         [startValue]=\"_selectedYear!\"\n         [endValue]=\"_selectedYear!\"\n         [numCols]=\"4\"\n         [cellAspectRatio]=\"4 / 7\"\n         [activeCell]=\"_getActiveCell()\"\n         (selectedValueChange)=\"_yearSelected($event)\"\n         (activeDateChange)=\"_updateActiveDate($event)\"\n         (keyup)=\"_handleCalendarBodyKeyup($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarUserEvent,\n  MatCalendarCellClassFunction,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n  private _selectionKeyPressed: boolean;\n\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D {\n    return this._activeDate;\n  }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n      this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\n      this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null {\n    return this._selected;\n  }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedMonth(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to date cells. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(\n    readonly _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir?: Directionality,\n  ) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(event: MatCalendarUserEvent<number>) {\n    const month = event.value;\n\n    const selectedMonth = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      month,\n      1,\n    );\n    this.monthSelected.emit(selectedMonth);\n\n    const selectedDate = this._getDateFromMonth(month);\n    this.selectedChange.emit(selectedDate);\n  }\n\n  /**\n   * Takes the index of a calendar body cell wrapped in in an event as argument. For the date that\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n   * that date.\n   *\n   * This function is used to match each component's model of the active date with the calendar\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n   * updated value asynchronously via the `activeCell` Input.\n   */\n  _updateActiveDate(event: MatCalendarUserEvent<number>) {\n    const month = event.value;\n    const oldActiveDate = this._activeDate;\n\n    this.activeDate = this._getDateFromMonth(month);\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(\n          this._activeDate,\n          -this._dateAdapter.getMonth(this._activeDate),\n        );\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(\n          this._activeDate,\n          11 - this._dateAdapter.getMonth(this._activeDate),\n        );\n        break;\n      case PAGE_UP:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? -10 : -1,\n        );\n        break;\n      case PAGE_DOWN:\n        this.activeDate = this._dateAdapter.addCalendarYears(\n          this._activeDate,\n          event.altKey ? 10 : 1,\n        );\n        break;\n      case ENTER:\n      case SPACE:\n        // Note that we only prevent the default action here while the selection happens in\n        // `keyup` below. We can't do the selection here, because it can cause the calendar to\n        // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n        // because it's too late (see #23305).\n        this._selectionKeyPressed = true;\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n      this._focusActiveCellAfterViewChecked();\n    }\n\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keyup events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeyup(event: KeyboardEvent): void {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      if (this._selectionKeyPressed) {\n        this._monthSelected({value: this._dateAdapter.getMonth(this._activeDate), event});\n      }\n\n      this._selectionKeyPressed = false;\n    }\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._setSelectedMonth(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [\n      [0, 1, 2, 3],\n      [4, 5, 6, 7],\n      [8, 9, 10, 11],\n    ].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Schedules the matCalendarBody to focus the active cell after change detection has run */\n  _focusActiveCellAfterViewChecked() {\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate)\n      ? this._dateAdapter.getMonth(date)\n      : null;\n  }\n\n  /**\n   * Takes a month and returns a new date in the same day and year as the currently active date.\n   *  The returned date will have the same month as the argument date.\n   */\n  private _getDateFromMonth(month: number) {\n    const normalizedDate = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      month,\n      1,\n    );\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    return this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      month,\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth),\n    );\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n    const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n    const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n\n    return new MatCalendarCell(\n      month,\n      monthName.toLocaleUpperCase(),\n      ariaLabel,\n      this._shouldEnableMonth(month),\n      cellClasses,\n    );\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (\n      month === undefined ||\n      month === null ||\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n      this._isYearAndMonthBeforeMinDate(activeYear, month)\n    ) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (\n      let date = firstOfMonth;\n      this._dateAdapter.getMonth(date) == month;\n      date = this._dateAdapter.addCalendarDays(date, 1)\n    ) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-selected month based on a model value. */\n  private _setSelectedMonth(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selectedMonth =\n        this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n    } else {\n      this._selectedMonth = this._getMonthInCurrentYear(value);\n    }\n  }\n}\n",null,"<table class=\"mat-calendar-table\" role=\"grid\">\n  <thead aria-hidden=\"true\" class=\"mat-calendar-table-header\">\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\n  </thead>\n  <tbody mat-calendar-body\n         [label]=\"_yearLabel\"\n         [rows]=\"_months\"\n         [todayValue]=\"_todayMonth!\"\n         [startValue]=\"_selectedMonth!\"\n         [endValue]=\"_selectedMonth!\"\n         [labelMinRequiredCells]=\"2\"\n         [numCols]=\"4\"\n         [cellAspectRatio]=\"4 / 7\"\n         [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\n         (selectedValueChange)=\"_monthSelected($event)\"\n         (activeDateChange)=\"_updateActiveDate($event)\"\n         (keyup)=\"_handleCalendarBodyKeyup($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** Label for the button used to close the calendar popup. */\n  closeCalendarLabel = 'Close calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 24 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 24 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n\n  /**\n   * A label for the first date of a range of dates (used by screen readers).\n   * @deprecated Provide your own internationalization string.\n   * @breaking-change 17.0.0\n   */\n  startDateLabel = 'Start date';\n\n  /**\n   * A label for the last date of a range of dates (used by screen readers).\n   * @deprecated Provide your own internationalization string.\n   * @breaking-change 17.0.0\n   */\n  endDateLabel = 'End date';\n\n  /** Formats a range of years (used for visuals). */\n  formatYearRange(start: string, end: string): string {\n    return `${start} \\u2013 ${end}`;\n  }\n\n  /** Formats a label for a range of years (used by screen readers). */\n  formatYearRangeLabel(start: string, end: string): string {\n    return `${start} to ${end}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nimport {\n  MAT_ANCHOR_HOST,\n  MAT_ANCHOR_INPUTS,\n  MAT_BUTTON_HOST,\n  MAT_BUTTON_INPUTS,\n  MatAnchorBase,\n  MatButtonBase,\n} from './button-base';\n\n/**\n * Material Design button component. Users interact with a button to perform an action.\n * See https://material.io/components/buttons\n *\n * The `MatButton` class applies to native button elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `\n    button[mat-button], button[mat-raised-button], button[mat-flat-button],\n    button[mat-stroked-button]\n  `,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  inputs: MAT_BUTTON_INPUTS,\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends MatButtonBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n\n/**\n * Material Design button component for anchor elements. Anchor elements are used to provide\n * links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons\n *\n * The `MatAnchor` class applies to native anchor elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: MAT_ANCHOR_HOST,\n  inputs: MAT_ANCHOR_INPUTS,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatAnchorBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n",null,"<span\n    class=\"mat-mdc-button-persistent-ripple\"\n    [class.mdc-button__ripple]=\"!_isFab\"\n    [class.mdc-fab__ripple]=\"_isFab\"></span>\n\n<ng-content select=\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\">\n</ng-content>\n\n<span class=\"mdc-button__label\"><ng-content></ng-content></span>\n\n<ng-content select=\".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\">\n</ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span matRipple class=\"mat-mdc-button-ripple\"\n     [matRippleDisabled]=\"_isRippleDisabled()\"\n     [matRippleTrigger]=\"_elementRef.nativeElement\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChange,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarUserEvent, MatCalendarCellClassFunction} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage,\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\nlet calendarHeaderId = 1;\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(\n    private _intl: MatDatepickerIntl,\n    @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The display text for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n        .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    return this._intl.formatYearRange(...this._formatMinAndMaxYearLabels());\n  }\n\n  /** The aria description for the current calendar view. */\n  get periodButtonDescription(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n        .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // Format a label for the window of years displayed in the multi-year calendar view. Use\n    // `formatYearRangeLabel` because it is TTS friendly.\n    return this._intl.formatYearRangeLabel(...this._formatMinAndMaxYearLabels());\n  }\n\n  /** The `aria-label` for changing the calendar view. */\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month'\n      ? this._intl.switchToMultiYearViewLabel\n      : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel,\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel,\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate =\n      this.calendar.currentView == 'month'\n        ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)\n        : this._dateAdapter.addCalendarYears(\n            this.calendar.activeDate,\n            this.calendar.currentView == 'year' ? -1 : -yearsPerPage,\n          );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate =\n      this.calendar.currentView == 'month'\n        ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)\n        : this._dateAdapter.addCalendarYears(\n            this.calendar.activeDate,\n            this.calendar.currentView == 'year' ? 1 : yearsPerPage,\n          );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return (\n      !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate)\n    );\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return (\n      !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate)\n    );\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return (\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2)\n      );\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter,\n      date1,\n      date2,\n      this.calendar.minDate,\n      this.calendar.maxDate,\n    );\n  }\n\n  /**\n   * Format two individual labels for the minimum year and maximum year available in the multi-year\n   * calendar view. Returns an array of two strings where the first string is the formatted label\n   * for the minimum year, and the second string is the formatted label for the maximum year.\n   */\n  private _formatMinAndMaxYearLabels(): [minYearLabel: string, maxYearLabel: string] {\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage =\n      activeYear -\n      getActiveOffset(\n        this._dateAdapter,\n        this.calendar.activeDate,\n        this.calendar.minDate,\n        this.calendar.maxDate,\n      );\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    const minYearLabel = this._dateAdapter.getYearName(\n      this._dateAdapter.createDate(minYearOfPage, 0, 1),\n    );\n    const maxYearLabel = this._dateAdapter.getYearName(\n      this._dateAdapter.createDate(maxYearOfPage, 0, 1),\n    );\n\n    return [minYearLabel, maxYearLabel];\n  }\n\n  private _id = `mat-calendar-header-${calendarHeaderId++}`;\n\n  _periodButtonLabelId = `${this._id}-period-label`;\n}\n\n/** A calendar that is used as part of the datepicker. */\n@Component({\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null {\n    return this._startAt;\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null {\n    return this._selected;\n  }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null {\n    return this._minDate;\n  }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null {\n    return this._maxDate;\n  }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  @Input() startDateAccessibleName: string | null;\n\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  @Input() endDateAccessibleName: string | null;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits when the current view changes.\n   */\n  @Output() readonly viewChanged: EventEmitter<MatCalendarView> = new EventEmitter<MatCalendarView>(\n    true,\n  );\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n    new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Emits a new date range value when the user completes a drag drop operation. */\n  @Output() readonly _userDragDrop = new EventEmitter<MatCalendarUserEvent<DateRange<D>>>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D {\n    return this._clampedActiveDate;\n  }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView {\n    return this._currentView;\n  }\n  set currentView(value: MatCalendarView) {\n    const viewChangedResult = this._currentView !== value ? value : null;\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n    if (viewChangedResult) {\n      this.viewChanged.emit(viewChangedResult);\n    }\n  }\n  private _currentView: MatCalendarView;\n\n  /** Origin of active drag, or null when dragging is not active. */\n  protected _activeDrag: MatCalendarUserEvent<D> | null = null;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  readonly stateChanges = new Subject<void>();\n\n  constructor(\n    _intl: MatDatepickerIntl,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n    private _changeDetectorRef: ChangeDetectorRef,\n  ) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Ignore date changes that are at a different time on the same day. This fixes issues where\n    // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\n    // (#24435).\n    const minDateChange: SimpleChange | undefined =\n      changes['minDate'] &&\n      !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue)\n        ? changes['minDate']\n        : undefined;\n    const maxDateChange: SimpleChange | undefined =\n      changes['maxDate'] &&\n      !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue)\n        ? changes['maxDate']\n        : undefined;\n\n    const change = minDateChange || maxDateChange || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Focuses the active date. */\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell(false);\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    this._getCurrentViewComponent()._init();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(event: MatCalendarUserEvent<D | null>): void {\n    const date = event.value;\n\n    if (\n      this.selected instanceof DateRange ||\n      (date && !this._dateAdapter.sameDate(date, this.selected))\n    ) {\n      this.selectedChange.emit(date);\n    }\n\n    this._userSelection.emit(event);\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /** Called when the user starts dragging to change a date range. */\n  _dragStarted(event: MatCalendarUserEvent<D>) {\n    this._activeDrag = event;\n  }\n\n  /**\n   * Called when a drag completes. It may end in cancelation or in the selection\n   * of a new range.\n   */\n  _dragEnded(event: MatCalendarUserEvent<DateRange<D> | null>) {\n    if (!this._activeDrag) return;\n\n    if (event.value) {\n      this._userDragDrop.emit(event as MatCalendarUserEvent<DateRange<D>>);\n    }\n\n    this._activeDrag = null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent(): MatMonthView<D> | MatYearView<D> | MatMultiYearView<D> {\n    // The return type is explicitly written as a union to ensure that the Closure compiler does\n    // not optimize calls to _init(). Without the explicit return type, TypeScript narrows it to\n    // only the first component type. See https://github.com/angular/components/issues/22996.\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n",null,"<div class=\"mat-calendar-header\">\n  <div class=\"mat-calendar-controls\">\n    <button mat-button type=\"button\" class=\"mat-calendar-period-button\"\n            (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\"\n            [attr.aria-describedby]=\"_periodButtonLabelId\" aria-live=\"polite\">\n      <span aria-hidden=\"true\">{{periodButtonText}}</span>\n      <svg class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"calendar.currentView !== 'month'\"\n           viewBox=\"0 0 10 5\" focusable=\"false\" aria-hidden=\"true\">\n           <polygon points=\"0,0 5,5 10,0\"/>\n      </svg>\n    </button>\n\n    <div class=\"mat-calendar-spacer\"></div>\n\n    <ng-content></ng-content>\n\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-previous-button\"\n            [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\"\n            [attr.aria-label]=\"prevButtonLabel\">\n    </button>\n\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-next-button\"\n            [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\"\n            [attr.aria-label]=\"nextButtonLabel\">\n    </button>\n  </div>\n</div>\n<label [id]=\"_periodButtonLabelId\" class=\"mat-calendar-hidden-label\">{{periodButtonDescription}}</label>\n","<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template>\n\n<div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  <mat-month-view\n      *ngSwitchCase=\"'month'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [dateClass]=\"dateClass\"\n      [comparisonStart]=\"comparisonStart\"\n      [comparisonEnd]=\"comparisonEnd\"\n      [startDateAccessibleName]=\"startDateAccessibleName\"\n      [endDateAccessibleName]=\"endDateAccessibleName\"\n      (_userSelection)=\"_dateSelected($event)\"\n      (dragStarted)=\"_dragStarted($event)\"\n      (dragEnded)=\"_dragEnded($event)\"\n      [activeDrag]=\"_activeDrag\"\n      >\n  </mat-month-view>\n\n  <mat-year-view\n      *ngSwitchCase=\"'year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [dateClass]=\"dateClass\"\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'month')\">\n  </mat-year-view>\n\n  <mat-multi-year-view\n      *ngSwitchCase=\"'multi-year'\"\n      [(activeDate)]=\"activeDate\"\n      [selected]=\"selected\"\n      [dateFilter]=\"dateFilter\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [dateClass]=\"dateClass\"\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      (selectedChange)=\"_goToDateInView($event, 'year')\">\n  </mat-multi-year-view>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    transition(\n      'void => enter-dropdown',\n      animate(\n        '120ms cubic-bezier(0, 0, 0.2, 1)',\n        keyframes([\n          style({opacity: 0, transform: 'scale(1, 0.8)'}),\n          style({opacity: 1, transform: 'scale(1, 1)'}),\n        ]),\n      ),\n    ),\n    transition(\n      'void => enter-dialog',\n      animate(\n        '150ms cubic-bezier(0, 0, 0.2, 1)',\n        keyframes([\n          style({opacity: 0, transform: 'scale(0.7)'}),\n          style({transform: 'none', opacity: 1}),\n        ]),\n      ),\n    ),\n    transition('* => void', animate('100ms linear', style({opacity: 0}))),\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, coerceStringArray} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  ESCAPE,\n  hasModifierKey,\n  LEFT_ARROW,\n  ModifierKey,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  FlexibleConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n  OnInit,\n  inject,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {merge, Subject, Observable, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {_getFocusedElementPierceShadowDom} from '@angular/cdk/platform';\nimport {MatCalendar, MatCalendarView} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatCalendarUserEvent, MatCalendarCellClassFunction} from './calendar-body';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {\n  ExtractDateTypeFromSelection,\n  MatDateSelectionModel,\n  DateRange,\n} from './date-selection-model';\nimport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  MatDateRangeSelectionStrategy,\n} from './date-range-selection-strategy';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {DOCUMENT} from '@angular/common';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-datepicker-scroll-strategy',\n);\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Possible positions for the datepicker dropdown along the X axis. */\nexport type DatepickerDropdownPositionX = 'start' | 'end';\n\n/** Possible positions for the datepicker dropdown along the Y axis. */\nexport type DatepickerDropdownPositionY = 'above' | 'below';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nconst _MatDatepickerContentBase = mixinColor(\n  class {\n    constructor(public _elementRef: ElementRef) {}\n  },\n);\n\n/**\n * Component used as the content for the datepicker overlay. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the overlay that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '_animationState',\n    '(@transformPanel.start)': '_handleAnimationEvent($event)',\n    '(@transformPanel.done)': '_handleAnimationEvent($event)',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>>\n  extends _MatDatepickerContentBase\n  implements OnInit, AfterViewInit, OnDestroy, CanColor\n{\n  private _subscriptions = new Subscription();\n  private _model: MatDateSelectionModel<S, D>;\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepickerBase<any, S, D>;\n\n  /** Start of the comparison range. */\n  comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  comparisonEnd: D | null;\n\n  /** ARIA Accessible name of the `<input matStartDate/>` */\n  startDateAccessibleName: string | null;\n\n  /** ARIA Accessible name of the `<input matEndDate/>` */\n  endDateAccessibleName: string | null;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  /** Current state of the animation. */\n  _animationState: 'enter-dropdown' | 'enter-dialog' | 'void';\n\n  /** Emits when an animation has finished. */\n  readonly _animationDone = new Subject<void>();\n\n  /** Whether there is an in-progress animation. */\n  _isAnimating = false;\n\n  /** Text for the close button. */\n  _closeButtonText: string;\n\n  /** Whether the close button currently has focus. */\n  _closeButtonFocused: boolean;\n\n  /** Portal with projected action buttons. */\n  _actionsPortal: TemplatePortal | null = null;\n\n  /** Id of the label for the `role=\"dialog\"` element. */\n  _dialogLabelId: string | null;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _globalModel: MatDateSelectionModel<S, D>,\n    private _dateAdapter: DateAdapter<D>,\n    @Optional()\n    @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY)\n    private _rangeSelectionStrategy: MatDateRangeSelectionStrategy<D>,\n    intl: MatDatepickerIntl,\n  ) {\n    super(elementRef);\n    this._closeButtonText = intl.closeCalendarLabel;\n  }\n\n  ngOnInit() {\n    this._animationState = this.datepicker.touchUi ? 'enter-dialog' : 'enter-dropdown';\n  }\n\n  ngAfterViewInit() {\n    this._subscriptions.add(\n      this.datepicker.stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      }),\n    );\n    this._calendar.focusActiveCell();\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n    this._animationDone.complete();\n  }\n\n  _handleUserSelection(event: MatCalendarUserEvent<D | null>) {\n    const selection = this._model.selection;\n    const value = event.value;\n    const isRange = selection instanceof DateRange;\n\n    // If we're selecting a range and we have a selection strategy, always pass the value through\n    // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n    // A null value when picking a range means that the user cancelled the selection (e.g. by\n    // pressing escape), whereas when selecting a single value it means that the value didn't\n    // change. This isn't very intuitive, but it's here for backwards-compatibility.\n    if (isRange && this._rangeSelectionStrategy) {\n      const newSelection = this._rangeSelectionStrategy.selectionFinished(\n        value,\n        selection as unknown as DateRange<D>,\n        event.event,\n      );\n      this._model.updateSelection(newSelection as unknown as S, this);\n    } else if (\n      value &&\n      (isRange || !this._dateAdapter.sameDate(value, selection as unknown as D))\n    ) {\n      this._model.add(value);\n    }\n\n    // Delegate closing the overlay to the actions.\n    if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n      this.datepicker.close();\n    }\n  }\n\n  _handleUserDragDrop(event: MatCalendarUserEvent<DateRange<D>>) {\n    this._model.updateSelection(event.value as unknown as S, this);\n  }\n\n  _startExitAnimation() {\n    this._animationState = 'void';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _handleAnimationEvent(event: AnimationEvent) {\n    this._isAnimating = event.phaseName === 'start';\n\n    if (!this._isAnimating) {\n      this._animationDone.next();\n    }\n  }\n\n  _getSelected() {\n    return this._model.selection as unknown as D | DateRange<D> | null;\n  }\n\n  /** Applies the current pending selection to the global model. */\n  _applyPendingSelection() {\n    if (this._model !== this._globalModel) {\n      this._globalModel.updateSelection(this._model.selection, this);\n    }\n  }\n\n  /**\n   * Assigns a new portal containing the datepicker actions.\n   * @param portal Portal with the actions to be assigned.\n   * @param forceRerender Whether a re-render of the portal should be triggered. This isn't\n   * necessary if the portal is assigned during initialization, but it may be required if it's\n   * added at a later point.\n   */\n  _assignActions(portal: TemplatePortal<any> | null, forceRerender: boolean) {\n    // If we have actions, clone the model so that we have the ability to cancel the selection,\n    // otherwise update the global model directly. Note that we want to assign this as soon as\n    // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n    this._model = portal ? this._globalModel.clone() : this._globalModel;\n    this._actionsPortal = portal;\n\n    if (forceRerender) {\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n}\n\n/** Form control that can be associated with a datepicker. */\nexport interface MatDatepickerControl<D> {\n  getStartValue(): D | null;\n  getThemePalette(): ThemePalette;\n  min: D | null;\n  max: D | null;\n  disabled: boolean;\n  dateFilter: DateFilterFn<D>;\n  getConnectedOverlayOrigin(): ElementRef;\n  getOverlayLabelId(): string | null;\n  stateChanges: Observable<void>;\n}\n\n/** A datepicker that can be attached to a {@link MatDatepickerControl}. */\nexport interface MatDatepickerPanel<\n  C extends MatDatepickerControl<D>,\n  S,\n  D = ExtractDateTypeFromSelection<S>,\n> {\n  /** Stream that emits whenever the date picker is closed. */\n  closedStream: EventEmitter<void>;\n  /** Color palette to use on the datepicker's calendar. */\n  color: ThemePalette;\n  /** The input element the datepicker is associated with. */\n  datepickerInput: C;\n  /** Whether the datepicker pop-up should be disabled. */\n  disabled: boolean;\n  /** The id for the datepicker's calendar. */\n  id: string;\n  /** Whether the datepicker is open. */\n  opened: boolean;\n  /** Stream that emits whenever the date picker is opened. */\n  openedStream: EventEmitter<void>;\n  /** Emits when the datepicker's state changes. */\n  stateChanges: Subject<void>;\n  /** Opens the datepicker. */\n  open(): void;\n  /** Register an input with the datepicker. */\n  registerInput(input: C): MatDateSelectionModel<S, D>;\n}\n\n/** Base class for a datepicker. */\n@Directive()\nexport abstract class MatDatepickerBase<\n  C extends MatDatepickerControl<D>,\n  S,\n  D = ExtractDateTypeFromSelection<S>,\n> implements MatDatepickerPanel<C, S, D>, OnDestroy, OnChanges\n{\n  private _scrollStrategy: () => ScrollStrategy;\n  private _inputStateChanges = Subscription.EMPTY;\n  private _document = inject(DOCUMENT);\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return (\n      this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined)\n    );\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a dropdown and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: BooleanInput) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this.datepickerInput\n      ? this.datepickerInput.disabled\n      : !!this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this.stateChanges.next(undefined);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Preferred position of the datepicker in the X axis. */\n  @Input()\n  xPosition: DatepickerDropdownPositionX = 'start';\n\n  /** Preferred position of the datepicker in the Y axis. */\n  @Input()\n  yPosition: DatepickerDropdownPositionY = 'below';\n\n  /**\n   * Whether to restore focus to the previously-focused element when the calendar is closed.\n   * Note that automatic focus restoration is an accessibility feature and it is recommended that\n   * you provide your own equivalent, if you decide to turn it off.\n   */\n  @Input()\n  get restoreFocus(): boolean {\n    return this._restoreFocus;\n  }\n  set restoreFocus(value: BooleanInput) {\n    this._restoreFocus = coerceBooleanProperty(value);\n  }\n  private _restoreFocus = true;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits when the current view changes.\n   */\n  @Output() readonly viewChanged: EventEmitter<MatCalendarView> = new EventEmitter<MatCalendarView>(\n    true,\n  );\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') readonly openedStream = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') readonly closedStream = new EventEmitter<void>();\n\n  /**\n   * Classes to be passed to the date picker panel.\n   * Supports string and string array values, similar to `ngClass`.\n   */\n  @Input()\n  get panelClass(): string | string[] {\n    return this._panelClass;\n  }\n  set panelClass(value: string | string[]) {\n    this._panelClass = coerceStringArray(value);\n  }\n  private _panelClass: string[];\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean {\n    return this._opened;\n  }\n  set opened(value: BooleanInput) {\n    coerceBooleanProperty(value) ? this.open() : this.close();\n  }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The minimum selectable date. */\n  _getMinDate(): D | null {\n    return this.datepickerInput && this.datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  _getMaxDate(): D | null {\n    return this.datepickerInput && this.datepickerInput.max;\n  }\n\n  _getDateFilter(): DateFilterFn<D> {\n    return this.datepickerInput && this.datepickerInput.dateFilter;\n  }\n\n  /** A reference to the overlay into which we've rendered the calendar. */\n  private _overlayRef: OverlayRef | null;\n\n  /** Reference to the component instance rendered in the overlay. */\n  private _componentRef: ComponentRef<MatDatepickerContent<S, D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n  private _backdropHarnessClass = `${this.id}-backdrop`;\n\n  /** Currently-registered actions portal. */\n  private _actionsPortal: TemplatePortal | null;\n\n  /** The input element this datepicker is associated with. */\n  datepickerInput: C;\n\n  /** Emits when the datepicker's state changes. */\n  readonly stateChanges = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() private _dir: Directionality,\n    private _model: MatDateSelectionModel<S, D>,\n  ) {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const positionChange = changes['xPosition'] || changes['yPosition'];\n\n    if (positionChange && !positionChange.firstChange && this._overlayRef) {\n      const positionStrategy = this._overlayRef.getConfig().positionStrategy;\n\n      if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\n        this._setConnectedPositions(positionStrategy);\n\n        if (this.opened) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n\n    this.stateChanges.next(undefined);\n  }\n\n  ngOnDestroy() {\n    this._destroyOverlay();\n    this.close();\n    this._inputStateChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    this._model.add(date);\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Emits changed view */\n  _viewChanged(view: MatCalendarView): void {\n    this.viewChanged.emit(view);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   * @returns Selection model that the input should hook itself up to.\n   */\n  registerInput(input: C): MatDateSelectionModel<S, D> {\n    if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._inputStateChanges.unsubscribe();\n    this.datepickerInput = input;\n    this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n    return this._model;\n  }\n\n  /**\n   * Registers a portal containing action buttons with the datepicker.\n   * @param portal Portal to be registered.\n   */\n  registerActions(portal: TemplatePortal): void {\n    if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('A MatDatepicker can only be associated with a single actions row.');\n    }\n    this._actionsPortal = portal;\n    this._componentRef?.instance._assignActions(portal, true);\n  }\n\n  /**\n   * Removes a portal containing action buttons from the datepicker.\n   * @param portal Portal to be removed.\n   */\n  removeActions(portal: TemplatePortal): void {\n    if (portal === this._actionsPortal) {\n      this._actionsPortal = null;\n      this._componentRef?.instance._assignActions(null, true);\n    }\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    // Skip reopening if there's an in-progress animation to avoid overlapping\n    // sequences which can cause \"changed after checked\" errors. See #25837.\n    if (this._opened || this.disabled || this._componentRef?.instance._isAnimating) {\n      return;\n    }\n\n    if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n\n    this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\n    this._openOverlay();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    // Skip reopening if there's an in-progress animation to avoid overlapping\n    // sequences which can cause \"changed after checked\" errors. See #25837.\n    if (!this._opened || this._componentRef?.instance._isAnimating) {\n      return;\n    }\n\n    const canRestoreFocus =\n      this._restoreFocus &&\n      this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function';\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n      }\n    };\n\n    if (this._componentRef) {\n      const {instance, location} = this._componentRef;\n      instance._startExitAnimation();\n      instance._animationDone.pipe(take(1)).subscribe(() => {\n        const activeElement = this._document.activeElement;\n\n        // Since we restore focus after the exit animation, we have to check that\n        // the user didn't move focus themselves inside the `close` handler.\n        if (\n          canRestoreFocus &&\n          (!activeElement ||\n            activeElement === this._document.activeElement ||\n            location.nativeElement.contains(activeElement))\n        ) {\n          this._focusedElementBeforeOpen!.focus();\n        }\n\n        this._focusedElementBeforeOpen = null;\n        this._destroyOverlay();\n      });\n    }\n\n    if (canRestoreFocus) {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Applies the current pending selection on the overlay to the model. */\n  _applyPendingSelection() {\n    this._componentRef?.instance?._applyPendingSelection();\n  }\n\n  /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n  protected _forwardContentValues(instance: MatDatepickerContent<S, D>) {\n    instance.datepicker = this;\n    instance.color = this.color;\n    instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\n    instance._assignActions(this._actionsPortal, false);\n  }\n\n  /** Opens the overlay with the calendar. */\n  private _openOverlay(): void {\n    this._destroyOverlay();\n\n    const isDialog = this.touchUi;\n    const portal = new ComponentPortal<MatDatepickerContent<S, D>>(\n      MatDatepickerContent,\n      this._viewContainerRef,\n    );\n    const overlayRef = (this._overlayRef = this._overlay.create(\n      new OverlayConfig({\n        positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\n        hasBackdrop: true,\n        backdropClass: [\n          isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop',\n          this._backdropHarnessClass,\n        ],\n        direction: this._dir,\n        scrollStrategy: isDialog ? this._overlay.scrollStrategies.block() : this._scrollStrategy(),\n        panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`,\n      }),\n    ));\n\n    this._getCloseStream(overlayRef).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n      this.close();\n    });\n\n    // The `preventDefault` call happens inside the calendar as well, however focus moves into\n    // it inside a timeout which can give browsers a chance to fire off a keyboard event in-between\n    // that can scroll the page (see #24969). Always block default actions of arrow keys for the\n    // entire overlay so the page doesn't get scrolled by accident.\n    overlayRef.keydownEvents().subscribe(event => {\n      const keyCode = event.keyCode;\n\n      if (\n        keyCode === UP_ARROW ||\n        keyCode === DOWN_ARROW ||\n        keyCode === LEFT_ARROW ||\n        keyCode === RIGHT_ARROW ||\n        keyCode === PAGE_UP ||\n        keyCode === PAGE_DOWN\n      ) {\n        event.preventDefault();\n      }\n    });\n\n    this._componentRef = overlayRef.attach(portal);\n    this._forwardContentValues(this._componentRef.instance);\n\n    // Update the position once the calendar has rendered. Only relevant in dropdown mode.\n    if (!isDialog) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => overlayRef.updatePosition());\n    }\n  }\n\n  /** Destroys the current overlay. */\n  private _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = this._componentRef = null;\n    }\n  }\n\n  /** Gets a position strategy that will open the calendar as a dropdown. */\n  private _getDialogStrategy() {\n    return this._overlay.position().global().centerHorizontally().centerVertically();\n  }\n\n  /** Gets a position strategy that will open the calendar as a dropdown. */\n  private _getDropdownStrategy() {\n    const strategy = this._overlay\n      .position()\n      .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition();\n\n    return this._setConnectedPositions(strategy);\n  }\n\n  /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n  private _setConnectedPositions(strategy: FlexibleConnectedPositionStrategy) {\n    const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n    const secondaryX = primaryX === 'start' ? 'end' : 'start';\n    const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n    const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n\n    return strategy.withPositions([\n      {\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY,\n      },\n      {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY,\n      },\n      {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY,\n      },\n      {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY,\n      },\n    ]);\n  }\n\n  /** Gets an observable that will emit when the overlay is supposed to be closed. */\n  private _getCloseStream(overlayRef: OverlayRef) {\n    const ctrlShiftMetaModifiers: ModifierKey[] = ['ctrlKey', 'shiftKey', 'metaKey'];\n    return merge(\n      overlayRef.backdropClick(),\n      overlayRef.detachments(),\n      overlayRef.keydownEvents().pipe(\n        filter(event => {\n          // Closing on alt + up is only valid when there's an input associated with the datepicker.\n          return (\n            (event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n            (this.datepickerInput &&\n              hasModifierKey(event, 'altKey') &&\n              event.keyCode === UP_ARROW &&\n              ctrlShiftMetaModifiers.every(\n                (modifier: ModifierKey) => !hasModifierKey(event, modifier),\n              ))\n          );\n        }),\n      ),\n    );\n  }\n}\n",null,"<div\n  cdkTrapFocus\n  role=\"dialog\"\n  [attr.aria-modal]=\"true\"\n  [attr.aria-labelledby]=\"_dialogLabelId ?? undefined\"\n  class=\"mat-datepicker-content-container\"\n  [class.mat-datepicker-content-container-with-custom-header]=\"datepicker.calendarHeaderComponent\"\n  [class.mat-datepicker-content-container-with-actions]=\"_actionsPortal\">\n  <mat-calendar\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker._getMinDate()\"\n    [maxDate]=\"datepicker._getMaxDate()\"\n    [dateFilter]=\"datepicker._getDateFilter()\"\n    [headerComponent]=\"datepicker.calendarHeaderComponent\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker.dateClass\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [@fadeInCalendar]=\"'enter'\"\n    [startDateAccessibleName]=\"startDateAccessibleName\"\n    [endDateAccessibleName]=\"endDateAccessibleName\"\n    (yearSelected)=\"datepicker._selectYear($event)\"\n    (monthSelected)=\"datepicker._selectMonth($event)\"\n    (viewChanged)=\"datepicker._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n    (_userDragDrop)=\"_handleUserDragDrop($event)\"></mat-calendar>\n\n  <ng-template [cdkPortalOutlet]=\"_actionsPortal\"></ng-template>\n\n  <!-- Invisible close button for screen reader users. -->\n  <button\n    type=\"button\"\n    mat-raised-button\n    [color]=\"color || 'primary'\"\n    class=\"mat-datepicker-close-button\"\n    [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n    (focus)=\"_closeButtonFocused = true\"\n    (blur)=\"_closeButtonFocused = false\"\n    (click)=\"datepicker.close()\">{{ _closeButtonText }}</button>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nexport function coerceStringArray(value: any, separator: string | RegExp = /\\s+/): string[] {\n  const result = [];\n\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker} from './datepicker';\nimport {\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker-base';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatDateRangeInput} from './date-range-input';\nimport {MatStartDate, MatEndDate} from './date-range-input-parts';\nimport {MatDateRangePicker} from './date-range-picker';\nimport {MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel} from './datepicker-actions';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n    MatDatepickerActions,\n    MatDatepickerCancel,\n    MatDatepickerApply,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n    MatDatepickerActions,\n    MatDatepickerCancel,\n    MatDatepickerApply,\n  ],\n  providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  useUtcForDisplay: boolean = false;\n\n  constructor(\n    @Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _platform?: Platform,\n  ) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n    return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n  }\n\n  getDateNames(): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n    return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n    return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getYearName(date: Date): string {\n    const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(\n      this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0),\n    );\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any, parseFormat?: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    const dtf = new Intl.DateTimeFormat(this.locale, {...displayFormat, timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date) + months,\n      this.getDate(date),\n    );\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date) + days,\n    );\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate()),\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  override deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  },\n};\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialDatepickerComponentOptions} from './datepicker.options';\n\n/**\n * Material datepicker layout metadata loader\n */\nexport const MaterialDatepickerLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialDatepickerComponentOptions>> = async () => new (await import('./metadata/datepicker.layoutMetadata')).MaterialDatepickerLayoutEditorMetadata();\n\n/**\n * Material datepicker relations metadata loader\n */\nexport const MaterialDatepickerRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/datepicker.relationsMetadata')).MaterialDatepickerRelationsEditorMetadata();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase, MatDatepickerControl} from './datepicker-base';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER} from './date-selection-model';\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n    {provide: MatDatepickerBase, useExisting: MatDatepicker},\n  ],\n})\nexport class MatDatepicker<D> extends MatDatepickerBase<MatDatepickerControl<D>, D | null, D> {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, hasModifierKey, ModifierKey} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {Subscription, Subject} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {\n  ExtractDateTypeFromSelection,\n  MatDateSelectionModel,\n  DateSelectionModelChange,\n} from './date-selection-model';\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D, S = unknown> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInputBase<S, D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement,\n  ) {\n    this.value = this.target.value;\n  }\n}\n\n/** Function that can be used to filter out dates from a calendar. */\nexport type DateFilterFn<D> = (date: D | null) => boolean;\n\n/**\n * Partial representation of `MatFormField` that is used for backwards-compatibility\n * between the legacy and non-legacy variants.\n */\nexport interface _MatFormFieldPartial {\n  getConnectedOverlayOrigin(): ElementRef;\n  getLabelId(): string | null;\n  color: ThemePalette;\n  _elementRef: ElementRef;\n  _shouldLabelFloat(): boolean;\n  _hasFloatingLabel(): boolean;\n  _labelId: string;\n}\n\n/** Base class for datepicker inputs. */\n@Directive()\nexport abstract class MatDatepickerInputBase<S, D = ExtractDateTypeFromSelection<S>>\n  implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy, Validator\n{\n  /** Whether the component has been initialized. */\n  private _isInitialized: boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n  }\n  set value(value: any) {\n    this._assignValueProgrammatically(value);\n  }\n  protected _model: MatDateSelectionModel<S, D> | undefined;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return !!this._disabled || this._parentDisabled();\n  }\n  set disabled(value: BooleanInput) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this.stateChanges.next(undefined);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n    // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n    // element has been inserted.\n    if (newValue && this._isInitialized && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D, S>> = new EventEmitter<\n    MatDatepickerInputEvent<D, S>\n  >();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D, S>> = new EventEmitter<\n    MatDatepickerInputEvent<D, S>\n  >();\n\n  /** Emits when the internal state has changed */\n  readonly stateChanges = new Subject<void>();\n\n  _onTouched = () => {};\n  _validatorOnChange = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n  private _valueChangesSubscription = Subscription.EMPTY;\n  private _localeSubscription = Subscription.EMPTY;\n\n  /**\n   * Since the value is kept on the model which is assigned in an Input,\n   * we might get a value before we have a model. This property keeps track\n   * of the value until we have somewhere to assign it.\n   */\n  private _pendingValue: D | null;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid\n      ? null\n      : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  };\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value),\n    );\n    return !controlValue || this._matchesFilter(controlValue)\n      ? null\n      : {'matDatepickerFilter': true};\n  };\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value),\n    );\n    const min = this._getMinDate();\n    return !min || !controlValue || this._dateAdapter.compareDate(min, controlValue) <= 0\n      ? null\n      : {'matDatepickerMin': {'min': min, 'actual': controlValue}};\n  };\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value),\n    );\n    const max = this._getMaxDate();\n    return !max || !controlValue || this._dateAdapter.compareDate(max, controlValue) >= 0\n      ? null\n      : {'matDatepickerMax': {'max': max, 'actual': controlValue}};\n  };\n\n  /** Gets the base validator functions. */\n  protected _getValidators(): ValidatorFn[] {\n    return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n  }\n\n  /** Gets the minimum date for the input. Used for validation. */\n  abstract _getMinDate(): D | null;\n\n  /** Gets the maximum date for the input. Used for validation. */\n  abstract _getMaxDate(): D | null;\n\n  /** Gets the date filter function. Used for validation. */\n  protected abstract _getDateFilter(): DateFilterFn<D> | undefined;\n\n  /** Registers a date selection model with the input. */\n  _registerModel(model: MatDateSelectionModel<S, D>): void {\n    this._model = model;\n    this._valueChangesSubscription.unsubscribe();\n\n    if (this._pendingValue) {\n      this._assignValue(this._pendingValue);\n    }\n\n    this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n      if (this._shouldHandleChangeEvent(event)) {\n        const value = this._getValueFromModel(event.selection);\n        this._lastValueValid = this._isValidValue(value);\n        this._cvaOnChange(value);\n        this._onTouched();\n        this._formatValue(value);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      }\n    });\n  }\n\n  /** Opens the popup associated with the input. */\n  protected abstract _openPopup(): void;\n\n  /** Assigns a value to the input's model. */\n  protected abstract _assignValueToModel(model: D | null): void;\n\n  /** Converts a value from the model into a native value for the input. */\n  protected abstract _getValueFromModel(modelValue: S): D | null;\n\n  /** Combined form control validator for this input. */\n  protected abstract _validator: ValidatorFn | null;\n\n  /** Predicate that determines whether the input should handle a particular change event. */\n  protected abstract _shouldHandleChangeEvent(event: DateSelectionModelChange<S>): boolean;\n\n  /** Whether the last value set on the input was valid. */\n  protected _lastValueValid = false;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Optional() public _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n  ) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this._assignValueProgrammatically(this.value);\n    });\n  }\n\n  ngAfterViewInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n      this.stateChanges.next(undefined);\n    }\n  }\n\n  ngOnDestroy() {\n    this._valueChangesSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this._assignValueProgrammatically(value);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const ctrlShiftMetaModifiers: ModifierKey[] = ['ctrlKey', 'shiftKey', 'metaKey'];\n    const isAltDownArrow =\n      hasModifierKey(event, 'altKey') &&\n      event.keyCode === DOWN_ARROW &&\n      ctrlShiftMetaModifiers.every((modifier: ModifierKey) => !hasModifierKey(event, modifier));\n\n    if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._openPopup();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    const lastValueWasValid = this._lastValueValid;\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = this._isValidValue(date);\n    date = this._dateAdapter.getValidDateOrNull(date);\n    const hasChanged = !this._dateAdapter.sameDate(date, this.value);\n\n    // We need to fire the CVA change event for all\n    // nulls, otherwise the validators won't run.\n    if (!date || hasChanged) {\n      this._cvaOnChange(date);\n    } else {\n      // Call the CVA change handler for invalid values\n      // since this is what marks the control as dirty.\n      if (value && !this.value) {\n        this._cvaOnChange(date);\n      }\n\n      if (lastValueWasValid !== this._lastValueValid) {\n        this._validatorOnChange();\n      }\n    }\n\n    if (hasChanged) {\n      this._assignValue(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  protected _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n      value != null ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /** Assigns a value to the model. */\n  private _assignValue(value: D | null) {\n    // We may get some incoming values before the model was\n    // assigned. Save the value so that we can assign it later.\n    if (this._model) {\n      this._assignValueToModel(value);\n      this._pendingValue = null;\n    } else {\n      this._pendingValue = value;\n    }\n  }\n\n  /** Whether a value is considered valid. */\n  private _isValidValue(value: D | null): boolean {\n    return !value || this._dateAdapter.isValid(value);\n  }\n\n  /**\n   * Checks whether a parent control is disabled. This is in place so that it can be overridden\n   * by inputs extending this one which can be placed inside of a group that can be disabled.\n   */\n  protected _parentDisabled() {\n    return false;\n  }\n\n  /** Programmatically assigns a value to the input. */\n  protected _assignValueProgrammatically(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = this._isValidValue(value);\n    value = this._dateAdapter.getValidDateOrNull(value);\n    this._assignValue(value);\n    this._formatValue(value);\n  }\n\n  /** Gets whether a value matches the current date filter. */\n  _matchesFilter(value: D | null): boolean {\n    const filter = this._getDateFilter();\n    return !filter || filter(value);\n  }\n}\n\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nexport function dateInputsHaveChanged(\n  changes: SimpleChanges,\n  adapter: DateAdapter<unknown>,\n): boolean {\n  const keys = Object.keys(changes);\n\n  for (let key of keys) {\n    const {previousValue, currentValue} = changes[key];\n\n    if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n      if (!adapter.sameDate(previousValue, currentValue)) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Inject, Input, OnDestroy, Optional} from '@angular/core';\nimport {NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidatorFn, Validators} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepickerInputBase, DateFilterFn, _MatFormFieldPartial} from './datepicker-input-base';\nimport {MatDatepickerControl, MatDatepickerPanel} from './datepicker-base';\nimport {DateSelectionModelChange} from './date-selection-model';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true,\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true,\n};\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'class': 'mat-datepicker-input',\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    // Used by the test harness to tie this input to its calendar. We can't depend on\n    // `aria-owns` for this, because it's only defined while the calendar is open.\n    '[attr.data-mat-calendar]': '_datepicker ? _datepicker.id : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D>\n  extends MatDatepickerInputBase<D | null, D>\n  implements MatDatepickerControl<D | null>, OnDestroy\n{\n  private _closedSubscription = Subscription.EMPTY;\n\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(datepicker: MatDatepickerPanel<MatDatepickerControl<D>, D | null, D>) {\n    if (datepicker) {\n      this._datepicker = datepicker;\n      this._closedSubscription = datepicker.closedStream.subscribe(() => this._onTouched());\n      this._registerModel(datepicker.registerInput(this));\n    }\n  }\n  _datepicker: MatDatepickerPanel<MatDatepickerControl<D>, D | null, D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null {\n    return this._min;\n  }\n  set min(value: D | null) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\n      this._min = validValue;\n      this._validatorOnChange();\n    }\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null {\n    return this._max;\n  }\n  set max(value: D | null) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\n      this._max = validValue;\n      this._validatorOnChange();\n    }\n  }\n  private _max: D | null;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input('matDatepickerFilter')\n  get dateFilter() {\n    return this._dateFilter;\n  }\n  set dateFilter(value: DateFilterFn<D | null>) {\n    const wasMatchingValue = this._matchesFilter(this.value);\n    this._dateFilter = value;\n\n    if (this._matchesFilter(this.value) !== wasMatchingValue) {\n      this._validatorOnChange();\n    }\n  }\n  private _dateFilter: DateFilterFn<D | null>;\n\n  /** The combined form control validator for this input. */\n  protected _validator: ValidatorFn | null;\n\n  constructor(\n    elementRef: ElementRef<HTMLInputElement>,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats,\n    @Optional() @Inject(MAT_FORM_FIELD) private _formField?: _MatFormFieldPartial,\n  ) {\n    super(elementRef, dateAdapter, dateFormats);\n    this._validator = Validators.compose(super._getValidators());\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Gets the ID of an element that should be used a description for the calendar overlay. */\n  getOverlayLabelId(): string | null {\n    if (this._formField) {\n      return this._formField.getLabelId();\n    }\n\n    return this._elementRef.nativeElement.getAttribute('aria-labelledby');\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the value at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value;\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._closedSubscription.unsubscribe();\n  }\n\n  /** Opens the associated datepicker. */\n  protected _openPopup(): void {\n    if (this._datepicker) {\n      this._datepicker.open();\n    }\n  }\n\n  protected _getValueFromModel(modelValue: D | null): D | null {\n    return modelValue;\n  }\n\n  protected _assignValueToModel(value: D | null): void {\n    if (this._model) {\n      this._model.updateSelection(value, this);\n    }\n  }\n\n  /** Gets the input's minimum date. */\n  _getMinDate() {\n    return this._min;\n  }\n\n  /** Gets the input's maximum date. */\n  _getMaxDate() {\n    return this._max;\n  }\n\n  /** Gets the input's date filtering function. */\n  protected _getDateFilter() {\n    return this._dateFilter;\n  }\n\n  protected _shouldHandleChangeEvent(event: DateSelectionModelChange<D>) {\n    return event.source !== this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, Observable, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerControl, MatDatepickerPanel} from './datepicker-base';\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]',\n})\nexport class MatDatepickerToggleIcon {}\n\n@Component({\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    // Used by the test harness to tie this toggle to its datepicker.\n    '[attr.data-mat-calendar]': 'datepicker ? datepicker.id : null',\n    // Bind the `click` on the host, rather than the inner `button`, so that we can call\n    // `stopPropagation` on it without affecting the user's `click` handlers. We need to stop\n    // it so that the input doesn't get focused automatically by the form field (See #21836).\n    '(click)': '_open($event)',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepickerPanel<MatDatepickerControl<any>, D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Screen-reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string,\n  ) {\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : observableOf();\n    const inputStateChanged =\n      this.datepicker && this.datepicker.datepickerInput\n        ? this.datepicker.datepickerInput.stateChanges\n        : observableOf();\n    const datepickerToggled = this.datepicker\n      ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\n      : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerStateChanged as Observable<void>,\n      inputStateChanged,\n      datepickerToggled,\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n",null,"<button\n  #button\n  mat-icon-button\n  type=\"button\"\n  [attr.aria-haspopup]=\"datepicker ? 'dialog' : null\"\n  [attr.aria-label]=\"ariaLabel || _intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n  [disableRipple]=\"disableRipple\">\n\n  <svg\n    *ngIf=\"!_customIcon\"\n    class=\"mat-datepicker-toggle-default-icon\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    height=\"24px\"\n    fill=\"currentColor\"\n    focusable=\"false\">\n    <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\n  </svg>\n\n  <ng-content select=\"[matDatepickerToggleIcon]\"></ng-content>\n</button>\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialDatepickerLayoutMetadataLoader, MaterialDatepickerRelationsMetadataLoader} from './datepicker.metadata';\nimport {MaterialDatepickerComponentOptions} from './datepicker.options';\n\n/**\n * Component used for displaying material datepicker\n */\n@Component(\n{\n    selector: 'material-datepicker',\n    templateUrl: 'datepicker.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        ReactiveFormsModule,\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        MatFormFieldModule,\n        MatInputModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n    ]\n})\n@RelationsEditorMetadata(MaterialDatepickerRelationsMetadataLoader)\n@LayoutEditorMetadata(MaterialDatepickerLayoutMetadataLoader)\nexport class MaterialDatepickerSAComponent extends FormComponentBase<MaterialDatepickerComponentOptions> implements FormComponent<MaterialDatepickerComponentOptions>\n{}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialDatepickerSAComponent} from './datepicker.component';\n\n\nexport default MaterialDatepickerSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];"],"names":["MAT_DATE_FORMATS","InjectionToken","MatCalendarCell","constructor","value","displayValue","ariaLabel","enabled","cssClasses","compareValue","rawValue","calendarBodyId","MatCalendarBody","ngAfterViewChecked","this","_focusActiveCellAfterViewChecked","_focusActiveCell","_elementRef","_ngZone","numCols","activeCell","isRange","cellAspectRatio","previewStart","previewEnd","selectedValueChange","EventEmitter","previewChange","activeDateChange","dragStarted","dragEnded","_didDragSinceMouseDown","_enterHandler","event","_skipNextFocus","type","target","cell","_getCellFromElement","run","emit","_touchmoveHandler","getActualTouchTarget","getCellElement","preventDefault","_leaveHandler","relatedTarget","_mousedownHandler","_isInRange","_mouseupHandler","cellElement","closest","nativeElement","_touchendHandler","_id","_startDateLabelId","_endDateLabelId","runOutsideAngular","element","addEventListener","window","_cellClicked","_emitActiveDateChange","_isSelected","startValue","endValue","ngOnChanges","changes","columnChanges","rows","_firstRowOffset","length","_cellPadding","_cellWidth","ngOnDestroy","removeEventListener","_isActiveCell","rowIndex","colIndex","cellNumber","movePreview","onStable","pipe","take","subscribe","setTimeout","querySelector","focus","_scheduleFocusActiveCellAfterViewChecked","_isRangeStart","isStart","_isRangeEnd","isEnd","isInRange","_isComparisonStart","comparisonStart","comparisonEnd","_isComparisonBridgeStart","previousCell","previousRow","_isComparisonBridgeEnd","_isComparisonEnd","nextCell","nextRow","_isInComparisonRange","_isComparisonIdentical","_isPreviewStart","_isPreviewEnd","_isInPreview","_getDescribedby","row","getAttribute","col","parseInt","isTableCell","node","nodeName","parentNode","start","end","rangeEnabled","touchLocation","changedTouches","document","elementFromPoint","clientX","clientY","i1","MAT_DATE_LOCALE","providedIn","factory","inject","LOCALE_ID","DateAdapter","_localeChanges","Subject","localeChanges","getValidDateOrNull","obj","isDateInstance","isValid","deserialize","invalid","setLocale","locale","next","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","DateRange","MatDateSelectionModel","selection","_adapter","_selectionChanged","selectionChanged","updateSelection","source","oldValue","complete","_isValidDateInstance","MatSingleDateSelectionModel","adapter","super","add","isComplete","clone","MatRangeDateSelectionModel","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","parent","MAT_DATE_RANGE_SELECTION_STRATEGY","DefaultMatCalendarRangeStrategy","_dateAdapter","selectionFinished","currentRange","createPreview","activeDate","createDrag","dragOrigin","originalRange","newDate","diffYears","diffMonths","diffDays","addCalendarYears","addCalendarMonths","addCalendarDays","MatMonthView","_activeDate","oldActiveDate","validDate","today","minDate","maxDate","_hasSameMonthAndYear","_init","selected","_selected","_setRanges","_minDate","_maxDate","_changeDetectorRef","_dateFormats","_dir","_rangeStrategy","_rerenderSubscription","Subscription","activeDrag","selectedChange","_userSelection","ngAfterContentInit","startWith","comparisonChange","firstChange","_clearPreview","unsubscribe","_dateSelected","selectedDate","_getDateFromDayOfMonth","rangeStartDate","rangeEndDate","_getDateInCurrentMonth","markForCheck","_updateActiveDate","month","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","getNumDaysInMonth","PAGE_UP","altKey","PAGE_DOWN","ENTER","SPACE","_selectionKeyPressed","_canSelect","ESCAPE","_previewEnd","hasModifierKey","stopPropagation","_handleCalendarBodyKeyup","_todayDate","_getCellCompareValue","_monthLabel","display","monthLabel","format","getMonthNames","toLocaleUpperCase","firstOfMonth","createDate","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","_previewChanged","previewRange","_previewStart","dragRange","detectChanges","_dragEnded","dragDropResult","dayOfMonth","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","map","long","i","narrow","_weekdays","slice","concat","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","cellClasses","dateClass","undefined","dateFilter","d1","d2","year","day","Date","getTime","selectedValue","_rangeStart","_rangeEnd","_isRange","_comparisonRangeStart","_comparisonRangeEnd","i3","yearsPerPage","MatMultiYearView","isSameMultiYearView","_setSelectedYear","yearSelected","_todayYear","minYearOfPage","getActiveOffset","_years","_createCellForYear","_yearSelected","selectedYear","_getDateFromYear","_getActiveCell","activeMonth","Math","yearName","getYearName","_shouldEnableYear","_selectedYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","floor","MatYearView","_setSelectedMonth","monthSelected","_monthSelected","selectedMonth","_getDateFromMonth","_todayMonth","_getMonthInCurrentYear","_yearLabel","monthNames","_months","_createCellForMonth","normalizedDate","monthName","monthYearA11yLabel","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_selectedMonth","MatDatepickerIntl","calendarLabel","openCalendarLabel","closeCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","startDateLabel","endDateLabel","formatYearRange","formatYearRangeLabel","MatButton","MatButtonBase","elementRef","platform","ngZone","animationMode","ANIMATION_MODULE_TYPE","i2","MatAnchor","MatAnchorBase","calendarHeaderId","MatCalendarHeader","_intl","calendar","changeDetectorRef","_periodButtonLabelId","stateChanges","periodButtonText","currentView","monthYearLabel","_formatMinAndMaxYearLabels","periodButtonDescription","periodButtonLabel","prevButtonLabel","nextButtonLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","maxYearOfPage","forwardRef","MatCalendar","startAt","_startAt","_clampedActiveDate","_currentView","viewChangedResult","_moveFocusOnNextTick","viewChanged","startView","_userDragDrop","_activeDrag","_intlChanges","_calendarHeaderPortal","ComponentPortal","headerComponent","focusActiveCell","minDateChange","previousValue","currentValue","maxDateChange","change","view","_getCurrentViewComponent","updateTodaysDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_goToDateInView","_dragStarted","monthView","yearView","multiYearView","i4","matDatepickerAnimations","transformPanel","trigger","transition","animate","keyframes","style","opacity","transform","fadeInCalendar","state","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","Overlay","overlay","scrollStrategies","reposition","_MatDatepickerContentBase","mixinColor","MatDatepickerContent","_globalModel","_rangeSelectionStrategy","intl","_subscriptions","_animationDone","_isAnimating","_actionsPortal","_closeButtonText","ngOnInit","_animationState","datepicker","touchUi","ngAfterViewInit","_calendar","_handleUserSelection","_model","newSelection","close","_handleUserDragDrop","_startExitAnimation","_handleAnimationEvent","phaseName","_getSelected","_applyPendingSelection","_assignActions","portal","forceRerender","MatDatepickerBase","datepickerInput","getStartValue","color","_color","getThemePalette","_touchUi","coerceBooleanProperty","disabled","_disabled","newValue","restoreFocus","_restoreFocus","panelClass","_panelClass","separator","result","sourceValues","Array","isArray","split","sourceValue","trimmedString","trim","coerceStringArray","opened","_opened","open","_getMinDate","_getMaxDate","_getDateFilter","_overlay","_viewContainerRef","scrollStrategy","_inputStateChanges","_document","DOCUMENT","xPosition","yPosition","openedStream","closedStream","id","_focusedElementBeforeOpen","_backdropHarnessClass","_scrollStrategy","positionChange","_overlayRef","positionStrategy","getConfig","FlexibleConnectedPositionStrategy","_setConnectedPositions","updatePosition","_destroyOverlay","select","_selectYear","_selectMonth","_viewChanged","registerInput","input","registerActions","_componentRef","instance","removeActions","_getFocusedElementPierceShadowDom","_openOverlay","canRestoreFocus","completeClose","location","activeElement","contains","_forwardContentValues","_dialogLabelId","getOverlayLabelId","isDialog","overlayRef","create","OverlayConfig","_getDialogStrategy","_getDropdownStrategy","hasBackdrop","backdropClass","direction","block","_getCloseStream","keydownEvents","attach","dispose","position","global","centerHorizontally","centerVertically","strategy","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","primaryX","secondaryX","primaryY","secondaryY","withPositions","originX","originY","overlayX","overlayY","ctrlShiftMetaModifiers","merge","backdropClick","detachments","filter","every","modifier","MatDatepickerModule","CommonModule","MatButtonModule","OverlayModule","A11yModule","PortalModule","MatCommonModule","CdkScrollableModule","ISO_8601_REGEX","range","valueFunction","valuesArray","NativeDateAdapter","matDateLocale","_platform","useUtcForDisplay","getFullYear","getDay","dtf","Intl","DateTimeFormat","timeZone","_format","weekday","_createDateWithOverflow","parse","parseFormat","displayFormat","Error","years","months","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","isNaN","NaN","d","setFullYear","setHours","n","setUTCFullYear","setUTCHours","getHours","getMinutes","getSeconds","getMilliseconds","NativeDateModule","useClass","MatNativeDateModule","useValue","dateInput","MaterialDatepickerLayoutMetadataLoader","MaterialDatepickerLayoutEditorMetadata","MaterialDatepickerRelationsMetadataLoader","MaterialDatepickerRelationsEditorMetadata","MatDatepicker","useExisting","MatDatepickerInputEvent","targetElement","MatDatepickerInputBase","_getValueFromModel","_pendingValue","_assignValueProgrammatically","_parentDisabled","_isInitialized","blur","_getValidators","_parseValidator","_minValidator","_maxValidator","_filterValidator","_registerModel","model","_valueChangesSubscription","_assignValue","_shouldHandleChangeEvent","_lastValueValid","_isValidValue","_cvaOnChange","_onTouched","_formatValue","dateChange","_validatorOnChange","_localeSubscription","control","controlValue","_matchesFilter","keys","Object","key","dateInputsHaveChanged","registerOnValidatorChange","fn","validate","c","_validator","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","readOnly","_openPopup","_onInput","lastValueWasValid","hasChanged","_onChange","_onBlur","_assignValueToModel","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","matDatepicker","_datepicker","_closedSubscription","_min","validValue","_max","_dateFilter","wasMatchingValue","dateFormats","_formField","Validators","getLabelId","modelValue","MAT_FORM_FIELD","MAT_INPUT_VALUE_ACCESSOR","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","_open","datepickerStateChanged","observableOf","inputStateChanged","datepickerToggled","MaterialDatepickerSAComponent","FormComponentBase","ReactiveFormsModule","FormPipesModule","CastPipesModule","MatFormFieldModule","MatInputModule","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension"],"sourceRoot":""}