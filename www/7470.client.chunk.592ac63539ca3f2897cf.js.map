{"version":3,"file":"7470.client.chunk.592ac63539ca3f2897cf.js","mappings":"8TAMO,MAAMA,EAA4B,e,EAAA,G,EAA6D,mBAAY,WAAW,mEAA8CC,6BAA8B,E,+KAAA,kBAAhK,mCCOlC,IAAMC,EAAN,MAcQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EACzBF,KAAKE,MAAQF,KAAKC,mBAAmBC,OAAS,IAClD,CAaOC,oBAEP,IARAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,2DA7BPP,GAAc,UAF1BQ,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBX,IACZE,GCXb,S,mFCWM,SAAUO,EAAcG,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIG,IAAK,WAOD,OALId,KAAK,IAAIW,aAETX,KAAK,IAAIW,WAAgB,IAAII,EAAAA,GAG1Bf,KAAK,IAAIW,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIG,IAAK,WAED,OAAOd,KAAK,IAAIW,IACpB,EACAK,IAAK,SAASd,GAKV,GAHAF,KAAK,IAAIW,KAAUT,GACnBe,EAAAA,EAAAA,IAAmBjB,KAAMW,GAEtBH,GAASU,KAERlB,KAAK,GAAGW,WAAcQ,WAG1B,CACI,MAAMC,EAAYpB,KAA+BqB,WAEjD,IAAID,EAEA,OAGJ,MAAME,EAAmBF,EAASN,IAAIS,EAAAA,GAChCC,EAAiBJ,EAASN,IAAIW,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAM3B,MAElC,IAAI0B,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYnB,G,CAGxB,IAGvBH,GAASuB,WAERC,EAAAA,EAAAA,IAAmBvB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/value/value.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/value/value.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/value/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Value relations metadata loader\n */\nexport const ValueRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/value.relationsMetadata')).ValueRelationsEditorMetadata();\n","import {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ValueRelationsMetadataLoader} from './value.metadata';\nimport {ValueRelationsOptions} from './value.options';\n\n//TODO: change all TOptions for specific value and relations options too\n\n/**\n * Value relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(ValueRelationsMetadataLoader)\nexport class ValueRelations<TValue = any> implements RelationsComponent<ValueRelationsOptions<TValue>>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: ValueRelationsOptions|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): ValueRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: ValueRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n        this.value = this.ɵRelationsOptions?.value ?? null;\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Value of value node\n     */\n    @DynamicOutput()\n    public value: TValue|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {ValueRelations} from './value.relations';\n\nexport default ValueRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["ValueRelationsMetadataLoader","ValueRelationsEditorMetadata","ValueRelations","relationsOptions","this","ɵRelationsOptions","value","invalidateVisuals","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","options","target","propertyKey","prop","Object","defineProperty","get","Subject","set","defineAssignedProp","sync","next","injector","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}