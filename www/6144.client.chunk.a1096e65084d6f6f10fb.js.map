{"version":3,"file":"6144.client.chunk.a1096e65084d6f6f10fb.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/merge/node/mergeNode.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/merge/node/mergeNode.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/merge/metadata/merge.relationsMetadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../../../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {ConfigureNodeEndpointData, ConfigureNodeEndpointSAComponent} from '@anglr/dynamic/layout-relations';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {lastValueFrom} from 'rxjs';\n\nimport {MergeRelationsOptions} from '../merge.options';\n\n/**\n * Relations node component for merge\n */\n@Component(\n{\n    selector: 'merge-node',\n    templateUrl: 'mergeNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MergeNodeSAComponent extends RelationsNodeBase<MergeRelationsOptions> implements RelationsNode<MergeRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets added properties names\n     */\n    protected get properties(): string[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            properties: []\n        };\n\n        return this.metadata.relationsOptions.properties ?? [];\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new property\n     */\n    protected async addProperty(): Promise<void>\n    {\n        await this.configureEndpoint(`prop${this.properties.length + 1}`);\n    }\n\n    /**\n     * Removes property\n     * @param name - Name of property to be removed\n     */\n    protected removeProperty(name: string): void\n    {\n        let index: number;\n\n        if(this.metadata?.relationsOptions?.properties?.length && (index = this.metadata.relationsOptions.properties.indexOf(name)) >= 0)\n        {\n            this.metadata.relationsOptions.properties.splice(index, 1);\n\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Renames property\n     * @param name - Allows renaming of property\n     */\n    protected async rename(name: string): Promise<void>\n    {\n        await this.configureEndpoint(name);\n\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Configures endpoint\n     * @param name - Name to be configured\n     */\n    protected async configureEndpoint(name: string): Promise<boolean>\n    {\n        const editName: ConfigureNodeEndpointData =\n        {\n            name,\n            defaultValue: undefined,\n            noDefaultValue: true,\n            skipInit: false,\n        };\n\n        const result = await lastValueFrom(this.dialog.open<ConfigureNodeEndpointSAComponent, ConfigureNodeEndpointData, true|undefined|null>(ConfigureNodeEndpointSAComponent,\n        {\n            title: 'configure property',\n            width: '60vw',\n            data: editName,\n        }).afterClosed());\n\n        //rename\n        if(result && this.metadata?.relationsOptions)\n        {\n            let index;\n\n            //rename\n            if(this.metadata.relationsOptions.properties?.length && (index = this.metadata.relationsOptions.properties.indexOf(name)) >= 0)\n            {\n                this.metadata.relationsOptions.properties.splice(index, 1);\n                this.metadata.relationsOptions.properties.splice(index, 0, editName.name);\n            }\n            //add\n            else\n            {\n                this.metadata.relationsOptions.properties ??= [];\n                this.metadata.relationsOptions.properties.push(editName.name);\n            }\n\n            this.history.getNewState();\n        }\n\n        return result ?? false;\n    }\n}",null,"import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {MergeNodeSAComponent} from '../node/mergeNode.component';\n\n/**\n * Merge relations metadata\n */\nexport class MergeRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Merge',\n        description: 'Allows constructing of object merged of inputs',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = MergeNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public skipInit: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\nimport {ConfigureNodeEndpointData} from './configureNodeEndpoint.interface';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n        CommonModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureNodeEndpointData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result.content);\n        }\n    }\n}"],"names":["MergeNodeSAComponent","RelationsNodeBase","properties","this","metadata","relationsOptions","constructor","changeDetector","element","dialog","super","addProperty","configureEndpoint","length","removeProperty","name","index","indexOf","splice","history","getNewState","rename","detectChanges","editName","defaultValue","undefined","noDefaultValue","skipInit","result","lastValueFrom","open","ConfigureNodeEndpointSAComponent","title","width","data","afterClosed","push","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","CommonModule","MergeRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze","ComponentEndpointModel","value","mapValuesToThis","formModelBuilder","form","build","valueChanges","subscribe","extend","showCodeEditor","content","isPresent","JSON","stringify","CodeEditorDialogComponent","height","languageModel","JsonLanguageModel","getJson","TITLED_DIALOG_DATA","FormModelBuilder","ReactiveFormsModule","MatDialogModule"],"sourceRoot":""}