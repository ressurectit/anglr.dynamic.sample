{"version":3,"file":"9208.client.chunk.ff86ac990cb88b200501.js","mappings":"kVAMO,MAAMA,EAAsC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAwDC,uCAAwC,E,+KAAA,kBAApL,mC,yHCO5C,IAAMC,EAAN,MA2BHC,YAAsBC,GAAA,KAAAA,SAAAA,EApBZ,KAAAC,mBAA8CC,KAAKF,SAASG,IAAIC,EAAAA,EAAoB,MAKpF,KAAAC,iBAAmDH,KAAKF,SAASG,IAAIG,EAAAA,EAA2B,MAKhG,KAAAC,GAAa,EAYvB,CAOOC,YAAYC,GAEf,IAAI,MAAMC,KAAOC,OAAOC,KAAKH,GAC7B,CACI,MAAMI,EAAQX,KAEdW,EAAMH,GAAOD,EAAQC,GAAKI,aAC1BD,EAAM,GAAGH,YAAcK,Q,CAE/B,CAKOC,oBAEP,CAOOC,cAEAf,KAAKK,KAEJL,KAAKD,oBAAoBiB,iBAAiBhB,KAAKK,IAC/CL,KAAKG,kBAAkBc,oBAAoBjB,KAAKK,IAExD,CASaa,WAAWC,EACAd,GAAU,I,EAAA,c,EAAA,YAI9B,GAFA,EAAKA,GAAKA,EAEN,EAAKF,kBAAqB,EAAKJ,mBAAnC,CAKA,IAAI,MAAMqB,KAASD,EAAeE,kBAAkBC,QAAU,GAE1Db,OAAOc,eAAe,EACAH,EAAMI,KACN,CACIvB,IAAK,WAED,OAAOD,KAAK,IAAIoB,EAAMI,OAC1B,EACAC,IAAK,SAASC,GAEV1B,KAAK,IAAIoB,EAAMI,QAAUE,GACzBC,EAAAA,EAAAA,IAAmB3B,KAAMoB,EAAMI,KACnC,IAG1Bf,OAAOc,eAAe,EACA,GAAGH,EAAMI,aACT,CACIE,MAAO,IAAIE,EAAAA,SAIXC,IAAvBT,EAAMU,eAEJ,EAAoBV,EAAMI,MAAQJ,EAAMU,cAG1CV,EAAMW,WAELC,EAAAA,EAAAA,IAAmB,EAAMZ,EAAMI,MAIvC,EAAKrB,iBAAiB8B,kBAAkB,EAAK5B,GAAI,SAC3C,EAAKN,mBAAmBmC,YAC9B,EAAKnC,mBAAmBoC,gBAAgB,EAAK9B,G,CAAI,E,gLACrD,GA1HST,GAAwB,UADpCwC,EAAAA,EAAAA,GAAwB1C,IAAuC,6BA4B5B2C,EAAAA,KA3BvBzC,E,gDCXb,Q,SAAuC,C","sources":["webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentInputs/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${input.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${input.name}`] = value;\n                                          defineAssignedProp(this, input.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(input.defaultValue !== undefined)\n            {\n                (this as Dictionary)[input.name] = input.defaultValue;\n            }\n            \n            if(input.skipInit)\n            {\n                defineSkipInitProp(this, input.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {ComponentInputsRelations} from './componentInputs.relations';\n\nexport default ComponentInputsRelations;\n"],"names":["ComponentInputsRelationsMetadataLoader","ComponentInputsRelationsEditorMetadata","ComponentInputsRelations","constructor","injector","relationsProcessor","this","get","RelationsProcessor","componentManager","RelationsComponentManager","id","ngOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","ngOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","input","relationsOptions","inputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","RelationsEditorMetadata","Injector"],"sourceRoot":""}