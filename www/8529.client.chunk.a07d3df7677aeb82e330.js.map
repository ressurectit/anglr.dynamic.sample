{"version":3,"file":"8529.client.chunk.a07d3df7677aeb82e330.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/toggleButton/toggleButton.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/toggleButton/toggleButton.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/toggleButton/toggleButton.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/toggleButton/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../../../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\n\n/**\n * Toggle button layout metadata loader\n */\nexport const ToggleButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ToggleButtonComponentOptions>> = async () => new (await import('./metadata/toggleButton.layoutMetadata')).ToggleButtonLayoutEditorMetadata();\n\n/**\n * Toggle button relations metadata loader\n */\nexport const ToggleButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/toggleButton.relationsMetadata')).ToggleButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\nimport {ToggleButtonLayoutMetadataLoader, ToggleButtonRelationsMetadataLoader} from './toggleButton.metadata';\n\n/**\n * Component used for displaying toggle button\n */\n@Component(\n{\n    selector: 'toggle-button',\n    templateUrl: 'toggleButton.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(ToggleButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ToggleButtonLayoutMetadataLoader)\nexport class ToggleButtonSAComponent extends LayoutComponentBase<ToggleButtonComponentOptions> implements LayoutComponent<ToggleButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is toggle button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting on/off state of toggle button\n     */\n    @DynamicOutput()\n    public toggle: boolean|null = null;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n\n        if(this.options?.state)\n        {\n            this.toggle = this.options.state;\n        }\n    }\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ToggleButtonSAComponent} from './toggleButton.component';\n\nexport default ToggleButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ToggleButtonLayoutMetadataLoader","ToggleButtonLayoutEditorMetadata","ToggleButtonRelationsMetadataLoader","ToggleButtonRelationsEditorMetadata","ToggleButtonSAComponent","LayoutComponentBase","disabled","toggle","onOptionsSet","this","options","state","CommonModule","i1","__decorate","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","componentElement","injector","logger","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","target","propertyKey","prop","Object","defineProperty","get","Subject","set","value","next","relationsProcessor","componentManager","metadata","instance","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}