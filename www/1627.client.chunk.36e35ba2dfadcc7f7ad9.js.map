{"version":3,"file":"1627.client.chunk.36e35ba2dfadcc7f7ad9.js","mappings":"qMAOM,MAAOA,EA4BTC,cArBO,KAAAC,SACP,CACIC,KAAM,aACNC,YAAa,iCACbC,MAAO,OACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,OAUhBC,OAAOC,OAAOC,KACjB,E,8FC7BC,MAAOC,EAGTd,YAAgDe,GAAA,KAAAA,QAAAA,CAE/C,CASMC,UAAkBC,EAA+CC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQF,GAEA,KAGRA,aAAiBG,EAAAA,GAETH,GAGXJ,KAAKE,SAASM,KAAK,iDAEZ,KACV,E,iCA7BQP,GAAAA,EAAAA,EAGuBQ,EAAAA,GAAMA,I,0CAH7BR,E","sources":["webpack://ng-universal-demo/./app/dynamicItems/gridTable/metadata/gridTable.layoutMetadata.ts","webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts"],"sourcesContent":["import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {GridTableComponentOptions} from '../gridTable.options';\n\n/**\n * Grid table layout metadata\n */\nexport class GridTableLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<GridTableComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<GridTableComponentOptions> =\n    {\n        name: 'Grid table',\n        description: 'Grid table for displaying data',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}"],"names":["GridTableLayoutEditorMetadata","constructor","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","Object","freeze","this","AsFormControlPipe","_logger","transform","value","_valueHash","isBlank","FormControl","warn","LOGGER"],"sourceRoot":""}