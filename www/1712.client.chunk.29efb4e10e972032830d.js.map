{"version":3,"file":"1712.client.chunk.29efb4e10e972032830d.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox-module.ts","webpack://ng-universal-demo/../../../src/material/core/option/index.ts","webpack://ng-universal-demo/../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","webpack://ng-universal-demo/../../../src/cdk/collections/selection-model.ts","webpack://ng-universal-demo/../../../src/material/core/option/option-parent.ts","webpack://ng-universal-demo/../../../src/material/core/option/optgroup.ts","webpack://ng-universal-demo/../src/material/core/option/optgroup.html","webpack://ng-universal-demo/../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","webpack://ng-universal-demo/../../../src/material/core/option/option.ts","webpack://ng-universal-demo/../src/material/core/option/option.html","webpack://ng-universal-demo/../../../src/material/core/option/option.html","webpack://ng-universal-demo/../../../src/material/select/select-animations.ts","webpack://ng-universal-demo/../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts","webpack://ng-universal-demo/../../../src/cdk/a11y/live-announcer/live-announcer.ts","webpack://ng-universal-demo/../src/material/select/select.html","webpack://ng-universal-demo/../../../src/material/select/select.ts","webpack://ng-universal-demo/../../../src/material/select/select.html","webpack://ng-universal-demo/../../../src/material/select/module.ts","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/select/select.metadata.ts","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/select/select.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/material-components/src/dynamicItems/select/select.component.html","webpack://ng-universal-demo/../../../material-components/src/dynamicItems/select/type.ts","webpack://ng-universal-demo/../../../src/cdk/a11y/key-manager/list-key-manager.ts","webpack://ng-universal-demo/../../../packages/core/src/render3/instructions/class_map_interpolation.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox';\nimport {MatCommonModule} from '../../common-behaviors/common-module';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox],\n})\nexport class MatPseudoCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatCommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup],\n})\nexport class MatOptionModule {}\n\nexport * from './option';\nexport * from './optgroup';\nexport * from './option-parent';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  readonly changed = new Subject<SelectionChange<T>>();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true,\n    public compareWith?: (o1: T, o2: T) => boolean,\n  ) {\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  select(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  deselect(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  setSelection(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values);\n    values.forEach(value => this._markSelected(value));\n    oldValues\n      .filter(value => !newSelectedSet.has(value))\n      .forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  toggle(value: T): boolean | void {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  clear(flushEvent = true): boolean | void {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    if (this.compareWith) {\n      for (const otherValue of this._selection) {\n        if (this.compareWith(otherValue, value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit,\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n\n  /** Whether there are queued up change to be emitted. */\n  private _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n  inertGroups?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT = new InjectionToken<MatOptionParentComponent>(\n  'MAT_OPTION_PARENT_COMPONENT',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  Optional,\n  InjectionToken,\n  Directive,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../common-behaviors/disabled';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nconst _MatOptgroupMixinBase = mixinDisabled(class {});\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n@Directive()\nexport class _MatOptgroupBase extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n\n  /** Whether the group is in inert a11y mode. */\n  _inert: boolean;\n\n  constructor(@Inject(MAT_OPTION_PARENT_COMPONENT) @Optional() parent?: MatOptionParentComponent) {\n    super();\n    this._inert = parent?.inertGroups ?? false;\n  }\n}\n\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_OPTGROUP = new InjectionToken<MatOptgroup>('MatOptgroup');\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-mdc-optgroup',\n    '[attr.role]': '_inert ? null : \"group\"',\n    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n    '[attr.aria-labelledby]': '_inert ? null : _labelId',\n  },\n  providers: [{provide: MAT_OPTGROUP, useExisting: MatOptgroup}],\n})\nexport class MatOptgroup extends _MatOptgroupBase {}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n  Optional,\n  Inject,\n  Directive,\n  AfterViewChecked,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ViewChild,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup, MAT_OPTGROUP, _MatOptgroupBase} from './optgroup';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange<T = any> {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: _MatOptionBase<T>,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false,\n  ) {}\n}\n\n@Directive()\nexport class _MatOptionBase<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** The form value of the option. */\n  @Input() value: T;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return (this.group && this.group.disabled) || this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple(): boolean {\n    return !!(this._parent && this._parent.disableRipple);\n  }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange<T>>();\n\n  /** Element containing the option's text. */\n  @ViewChild('text', {static: true}) _text: ElementRef<HTMLElement> | undefined;\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _parent: MatOptionParentComponent,\n    readonly group: _MatOptgroupBase,\n  ) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._text?.nativeElement.textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean | null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        if (this._mostRecentViewValue) {\n          this._stateChanges.next();\n        }\n\n        this._mostRecentViewValue = viewValue;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange<T>(this, isUserInput));\n  }\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mdc-list-item--selected]': 'selected',\n    '[class.mat-mdc-option-multiple]': 'multiple',\n    '[class.mat-mdc-option-active]': 'active',\n    '[class.mdc-list-item--disabled]': 'disabled',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-mdc-option mat-mdc-focus-indicator mdc-list-item',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption<T = any> extends _MatOptionBase<T> {\n  constructor(\n    element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) parent: MatOptionParentComponent,\n    @Optional() @Inject(MAT_OPTGROUP) group: MatOptgroup,\n  ) {\n    super(element, changeDetectorRef, parent, group);\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n  optionIndex: number,\n  options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>,\n): number {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n  optionOffset: number,\n  optionHeight: number,\n  currentScrollPosition: number,\n  panelHeight: number,\n): number {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n",null,"<mat-pseudo-checkbox *ngIf=\"multiple\" class=\"mat-mdc-option-pseudo-checkbox\"\n    [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></mat-pseudo-checkbox>\n\n<ng-content select=\"mat-icon\"></ng-content>\n\n<span class=\"mdc-list-item__primary-text\" #text><ng-content></ng-content></span>\n\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n<span class=\"cdk-visually-hidden\" *ngIf=\"group && group._inert\">({{ group.label }})</span>\n\n<div class=\"mat-mdc-option-ripple\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\"\n     [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 12.0.0\n   */\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n    transition('* => void', query('@transformPanel', [animateChild()], {optional: true})),\n  ]),\n\n  /** This animation transforms the select's overlay panel on and off the page. */\n  transformPanel: trigger('transformPanel', [\n    state(\n      'void',\n      style({\n        opacity: 0,\n        transform: 'scale(1, 0.8)',\n      }),\n    ),\n    transition(\n      'void => showing',\n      animate(\n        '120ms cubic-bezier(0, 0, 0.2, 1)',\n        style({\n          opacity: 1,\n          transform: 'scale(1, 1)',\n        }),\n      ),\n    ),\n    transition('* => void', animate('100ms linear', style({opacity: 0}))),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement | null>(\n  'liveAnnouncerElement',\n  {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken<LiveAnnouncerDefaultOptions>(\n  'LIVE_ANNOUNCER_DEFAULT_OPTIONS',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\n\nlet uniqueIds = 0;\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _liveElement: HTMLElement;\n  private _document: Document;\n  private _previousTimeout: number;\n  private _currentPromise: Promise<void> | undefined;\n  private _currentResolve: (() => void) | undefined;\n\n  constructor(\n    @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n    @Optional()\n    @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\n    private _defaultOptions?: LiveAnnouncerDefaultOptions,\n  ) {\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n        defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    if (this._liveElement.id) {\n      this._exposeAnnouncerToModals(this._liveElement.id);\n    }\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n      }\n\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n\n        this._currentResolve!();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n\n      return this._currentPromise;\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null!;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live announcer element if there is an\n   * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live announcer element.\n   */\n  private _exposeAnnouncerToModals(id: string) {\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n}\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness {\n    return this._politeness;\n  }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  /** Time in milliseconds after which to clear out the announcer element. */\n  @Input('cdkAriaLiveDuration') duration: number;\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _liveAnnouncer: LiveAnnouncer,\n    private _contentObserver: ContentObserver,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  ENTER,\n  hasModifierKey,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n  ConnectedPosition,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm,\n  Validators,\n} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  _MatOptionBase,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\nlet nextUniqueId = 0;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-select-scroll-strategy',\n);\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Object that can be used to configure the default options for the select module. */\nexport interface MatSelectConfig {\n  /** Whether option centering should be disabled. */\n  disableOptionCentering?: boolean;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  typeaheadDebounceInterval?: number;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n}\n\n/** Injection token that can be used to provide the default options the select module. */\nexport const MAT_SELECT_CONFIG = new InjectionToken<MatSelectConfig>('MAT_SELECT_CONFIG');\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SELECT_TRIGGER = new InjectionToken<MatSelectTrigger>('MatSelectTrigger');\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any,\n  ) {}\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(\n  mixinTabIndex(\n    mixinDisabled(\n      mixinErrorState(\n        class {\n          /**\n           * Emits whenever the component state changes and should cause the parent\n           * form-field to update. Implemented as part of `MatFormFieldControl`.\n           * @docs-private\n           */\n          readonly stateChanges = new Subject<void>();\n\n          constructor(\n            public _elementRef: ElementRef,\n            public _defaultErrorStateMatcher: ErrorStateMatcher,\n            public _parentForm: NgForm,\n            public _parentFormGroup: FormGroupDirective,\n            /**\n             * Form control bound to the component.\n             * Implemented as part of `MatFormFieldControl`.\n             * @docs-private\n             */\n            public ngControl: NgControl,\n          ) {}\n        },\n      ),\n    ),\n  ),\n);\n\n/** Base class with all of the `MatSelect` functionality. */\n@Directive()\nexport abstract class _MatSelectBase<C>\n  extends _MatSelectMixinBase\n  implements\n    AfterContentInit,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    DoCheck,\n    ControlValueAccessor,\n    CanDisable,\n    HasTabIndex,\n    MatFormFieldControl<any>,\n    CanUpdateErrorState,\n    CanDisableRipple\n{\n  /** All of the defined select options. */\n  abstract options: QueryList<_MatOptionBase>;\n\n  // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n  // public API so we have to keep it. It should be deprecated and removed eventually.\n  /** All of the defined groups of options. */\n  abstract optionGroups: QueryList<MatOptgroup>;\n\n  /** User-supplied override of the trigger element. */\n  abstract customTrigger: {};\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  abstract _positions: ConnectedPosition[];\n\n  /** Scrolls a particular option into the view. */\n  protected abstract _scrollOptionIntoView(index: number): void;\n\n  /** Called when the panel has been opened and the overlay has settled on its final position. */\n  protected abstract _positioningSettled(): void;\n\n  /** Creates a change event object that should be emitted by the select. */\n  protected abstract _getChangeEvent(value: any): C;\n\n  /** Factory function used to create a scroll strategy for this select. */\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Current `aria-labelledby` value for the select trigger. */\n  private _triggerAriaLabelledBy: string | null = null;\n\n  /**\n   * Keeps track of the previous form control assigned to the select.\n   * Used to detect if it has changed.\n   */\n  private _previousControl: AbstractControl | null | undefined;\n\n  /** Emits whenever the component is destroyed. */\n  protected readonly _destroy = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input('aria-describedby') userAriaDescribedBy: string;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** ID for the DOM node containing the select's value. */\n  _valueId = `mat-select-value-${nextUniqueId++}`;\n\n  /** Emits when the panel element is finished transforming in. */\n  readonly _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  _overlayPanelClass: string | string[] = this._defaultOptions?.overlayPanelClass || '';\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay)\n  protected _overlayDir: CdkConnectedOverlay;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[] | Set<string> | {[key: string]: any};\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required: boolean | undefined;\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: BooleanInput) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean {\n    return this._disableOptionCentering;\n  }\n  set disableOptionCentering(value: BooleanInput) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  private _disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    const hasAssigned = this._assignValue(newValue);\n\n    if (hasAssigned) {\n      this._onChange(newValue);\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() override errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input()\n  get typeaheadDebounceInterval(): number {\n    return this._typeaheadDebounceInterval;\n  }\n  set typeaheadDebounceInterval(value: NumberInput) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  private _typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange))),\n      );\n    }\n\n    return this._ngZone.onStable.pipe(\n      take(1),\n      switchMap(() => this.optionSelectionChanges),\n    );\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> = this.openedChange.pipe(\n    filter(o => o),\n    map(() => {}),\n  );\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> = this.openedChange.pipe(\n    filter(o => !o),\n    map(() => {}),\n  );\n\n  /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<C> = new EventEmitter<C>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    protected _viewportRuler: ViewportRuler,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    protected _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() @Inject(MAT_FORM_FIELD) protected _parentFormField: MatFormField,\n    @Self() @Optional() ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    private _liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MAT_SELECT_CONFIG) private _defaultOptions?: MatSelectConfig,\n  ) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n    if (_defaultOptions?.typeaheadDebounceInterval != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n    const ngControl = this.ngControl;\n\n    // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element: HTMLElement = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (ngControl) {\n      // The disabled state might go out of sync if the form group is swapped out. See #17860.\n      if (this._previousControl !== ngControl.control) {\n        if (\n          this._previousControl !== undefined &&\n          ngControl.disabled !== null &&\n          ngControl.disabled !== this.disabled\n        ) {\n          this.disabled = ngControl.disabled;\n        }\n\n        this._previousControl = ngControl.control;\n      }\n\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled'] || changes['userAriaDescribedBy']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n      this._keyManager.withHorizontalOrientation(null);\n      this._highlightCorrectOption();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    this._assignValue(value);\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey =\n      keyCode === DOWN_ARROW ||\n      keyCode === UP_ARROW ||\n      keyCode === LEFT_ARROW ||\n      keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (\n      (!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n      ((this.multiple || event.altKey) && isArrowKey)\n    ) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (\n      !isTyping &&\n      (keyCode === ENTER || keyCode === SPACE) &&\n      manager.activeItem &&\n      !hasModifierKey(event)\n    ) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (\n        this._multiple &&\n        isArrowKey &&\n        event.shiftKey &&\n        manager.activeItem &&\n        manager.activeItemIndex !== previouslyFocusedIndex\n      ) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n    this._keyManager?.cancelTypeahead();\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._positioningSettled();\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl) {\n        this._value = this.ngControl.value;\n      }\n\n      this._setSelectionByValue(this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach((currentValue: any) => this._selectOptionByValue(currentValue));\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectOptionByValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectOptionByValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Assigns a specific value to the select. Returns whether the value has changed. */\n  private _assignValue(newValue: any | any[]): boolean {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this._typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withHomeAndEnd()\n      .withPageUpDown()\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n        // be the result of an expression changing. We have to use `detectChanges` in order\n        // to avoid \"changed after checked\" errors (see #14793).\n        this._changeDetectorRef.detectChanges();\n        this.stateChanges.next();\n      });\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected\n          ? this._selectionModel.select(option)\n          : this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator\n          ? this.sortComparator(a, b, options)\n          : options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Whether the panel is allowed to open. */\n  protected _canOpen(): boolean {\n    return !this._panelOpen && !this.disabled && this.options?.length > 0;\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the aria-labelledby for the select panel. */\n  _getPanelAriaLabelledby(): string | null {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /** Gets the aria-labelledby of the select component trigger. */\n  private _getTriggerAriaLabelledby(): string | null {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n\n  /** Called when the overlay panel is done animating. */\n  protected _panelDoneAnimating(isOpen: boolean) {\n    this.openedChange.emit(isOpen);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n  }\n}\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger',\n  providers: [{provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger}],\n})\nexport class MatSelectTrigger {}\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'combobox',\n    'aria-autocomplete': 'none',\n    'aria-haspopup': 'listbox',\n    'class': 'mat-mdc-select',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-mdc-select-disabled]': 'disabled',\n    '[class.mat-mdc-select-invalid]': 'errorState',\n    '[class.mat-mdc-select-required]': 'required',\n    '[class.mat-mdc-select-empty]': 'empty',\n    '[class.mat-mdc-select-multiple]': 'multiple',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [matSelectAnimations.transformPanel],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect},\n  ],\n})\nexport class MatSelect extends _MatSelectBase<MatSelectChange> implements OnInit, AfterViewInit {\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n  @ContentChildren(MAT_OPTGROUP, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n  @ContentChild(MAT_SELECT_TRIGGER) customTrigger: MatSelectTrigger;\n\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above',\n    },\n  ];\n\n  /** Ideal origin for the overlay panel. */\n  _preferredOverlayOrigin: CdkOverlayOrigin | ElementRef | undefined;\n\n  /** Width of the overlay panel. */\n  _overlayWidth: number;\n\n  override get shouldLabelFloat(): boolean {\n    // Since the panel doesn't overlap the trigger, we\n    // want the label to only float when there's a value.\n    return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n  }\n\n  override ngOnInit() {\n    super.ngOnInit();\n    this._viewportRuler\n      .change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._overlayWidth = this._getOverlayWidth();\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n  }\n\n  ngAfterViewInit() {\n    // Note that it's important that we read this in `ngAfterViewInit`, because\n    // reading it earlier will cause the form field to return a different element.\n    if (this._parentFormField) {\n      this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n    }\n  }\n\n  override open() {\n    this._overlayWidth = this._getOverlayWidth();\n    super.open();\n    // Required for the MDC form field to pick up when the overlay has been opened.\n    this.stateChanges.next();\n  }\n\n  override close() {\n    super.close();\n    // Required for the MDC form field to pick up when the overlay has been closed.\n    this.stateChanges.next();\n  }\n\n  /** Scrolls the active option into view. */\n  protected _scrollOptionIntoView(index: number): void {\n    const option = this.options.toArray()[index];\n\n    if (option) {\n      const panel: HTMLElement = this.panel.nativeElement;\n      const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n      const element = option._getHostElement();\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        panel.scrollTop = 0;\n      } else {\n        panel.scrollTop = _getOptionScrollPosition(\n          element.offsetTop,\n          element.offsetHeight,\n          panel.scrollTop,\n          panel.offsetHeight,\n        );\n      }\n    }\n  }\n\n  protected _positioningSettled() {\n    this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n  }\n\n  protected _getChangeEvent(value: any) {\n    return new MatSelectChange(this, value);\n  }\n\n  /** Gets how wide the overlay panel should be. */\n  private _getOverlayWidth() {\n    const refToMeasure =\n      this._preferredOverlayOrigin instanceof CdkOverlayOrigin\n        ? this._preferredOverlayOrigin.elementRef\n        : this._preferredOverlayOrigin || this._elementRef;\n    return refToMeasure.nativeElement.getBoundingClientRect().width;\n  }\n}\n","<!--\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\n While aria-owns is not required for the ARIA 1.2 `role=\"combobox\"` interaction pattern,\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\"true\"`\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\n VoiceOver from \"seeing\" the select's listbox overlay for aria-activedescendant.\n Using `aria-owns` re-parents the select overlay so that it works again.\n See https://github.com/angular/components/issues/20694\n-->\n<div cdk-overlay-origin\n     [attr.aria-owns]=\"panelOpen ? id + '-panel' : null\"\n     class=\"mat-mdc-select-trigger\"\n     (click)=\"toggle()\"\n     #fallbackOverlayOrigin=\"cdkOverlayOrigin\"\n     #trigger>\n  <div class=\"mat-mdc-select-value\" [ngSwitch]=\"empty\" [attr.id]=\"_valueId\">\n    <span class=\"mat-mdc-select-placeholder mat-mdc-select-min-line\" *ngSwitchCase=\"true\">{{placeholder}}</span>\n    <span class=\"mat-mdc-select-value-text\" *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\">\n      <span class=\"mat-mdc-select-min-line\" *ngSwitchDefault>{{triggerValue}}</span>\n      <ng-content select=\"mat-select-trigger\" *ngSwitchCase=\"true\"></ng-content>\n    </span>\n  </div>\n\n  <div class=\"mat-mdc-select-arrow-wrapper\">\n    <div class=\"mat-mdc-select-arrow\">\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\n      <svg viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" focusable=\"false\">\n        <path d=\"M7 10l5 5 5-5z\"/>\n      </svg>\n    </div>\n  </div>\n</div>\n\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayLockPosition\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayPanelClass]=\"_overlayPanelClass\"\n  [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\"\n  [cdkConnectedOverlayOrigin]=\"_preferredOverlayOrigin || fallbackOverlayOrigin\"\n  [cdkConnectedOverlayOpen]=\"panelOpen\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayWidth]=\"_overlayWidth\"\n  (backdropClick)=\"close()\"\n  (attach)=\"_onAttached()\"\n  (detach)=\"close()\">\n  <div\n    #panel\n    role=\"listbox\"\n    tabindex=\"-1\"\n    class=\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\"\n    [attr.id]=\"id + '-panel'\"\n    [attr.aria-multiselectable]=\"multiple\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"_getPanelAriaLabelledby()\"\n    [ngClass]=\"panelClass\"\n    [@transformPanel]=\"'showing'\"\n    (@transformPanel.done)=\"_panelDoneAnimatingStream.next($event.toState)\"\n    (keydown)=\"_handleKeydown($event)\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\n\n@NgModule({\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatSelectModule {}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialSelectComponentOptions} from './select.options';\n\n/**\n * Material select layout metadata loader\n */\nexport const MaterialSelectLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialSelectComponentOptions>> = async () => new (await import('./metadata/select.layoutMetadata')).MaterialSelectLayoutEditorMetadata();\n\n/**\n * Material select relations metadata loader\n */\nexport const MaterialSelectRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/select.relationsMetadata')).MaterialSelectRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialSelectLayoutMetadataLoader, MaterialSelectRelationsMetadataLoader} from './select.metadata';\nimport {MaterialSelectComponentOptions} from './select.options';\n\n/**\n * Component used for displaying material text field\n */\n@Component(\n{\n    selector: 'material-select',\n    templateUrl: 'select.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n        CommonModule,\n        MatFormFieldModule,\n        MatSelectModule,\n    ]\n})\n@RelationsEditorMetadata(MaterialSelectRelationsMetadataLoader)\n@LayoutEditorMetadata(MaterialSelectLayoutMetadataLoader)\nexport class MaterialSelectSAComponent extends FormComponentBase<MaterialSelectComponentOptions> implements FormComponent<MaterialSelectComponentOptions>\n{\n    //######################### public properties #########################\n\n    protected _values: any[] = [\n        {\n            code: 'foo',\n            value: 'foo value',\n        },\n        {\n            code: 'bar',\n            value: 'bar value',\n        }\n    ];\n\n    //######################### poublic properties - inputs and outputs #########################\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set values(value: any[])\n    {\n        this._values = value;\n    }\n    public get values(): any[]\n    {\n        return this._values;\n    }\n}",null,"import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialSelectSAComponent} from './select.component';\n\n\nexport default MaterialSelectSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n  PAGE_UP,\n  PAGE_DOWN,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _itemChangesSubscription?: Subscription;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n  private _pageUpAndDown = {enabled: false, delta: 10};\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead(): this {\n    this._pressedLetters = [];\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled: boolean = true, delta: number = 10): this {\n    this._pageUpAndDown = {enabled, delta};\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {keyValueArraySet} from '../../util/array_utils';\nimport {getLView} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {checkStylingMap, classStringParser} from './styling';\n\n\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate1(prefix: string, v0: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolateV(values: any[]): void {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n"],"names":["MatPseudoCheckboxModule","MatCommonModule","MatOptionModule","MatRippleModule","CommonModule","ActiveDescendantKeyManager","ListKeyManager","setActiveItem","index","this","activeItem","setInactiveStyles","super","setActiveStyles","SelectionModel","selected","_selected","Array","from","_selection","values","constructor","_multiple","initiallySelectedValues","_emitChanges","compareWith","Set","_deselectedToEmit","_selectedToEmit","changed","Subject","length","forEach","value","_markSelected","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","filter","has","toggle","isSelected","clear","flushEvent","_unmarkAll","otherValue","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","next","source","added","removed","add","push","delete","MAT_OPTION_PARENT_COMPONENT","InjectionToken","_MatOptgroupMixinBase","mixinDisabled","_uniqueOptgroupIdCounter","_MatOptgroupBase","parent","_labelId","_inert","inertGroups","MAT_OPTGROUP","MatOptgroup","provide","useExisting","MatPseudoCheckbox","_animationMode","state","disabled","ANIMATION_MODULE_TYPE","_uniqueIdCounter","MatOptionSelectionChange","isUserInput","_MatOptionBase","multiple","_parent","group","_disabled","coerceBooleanProperty","disableRipple","_element","_changeDetectorRef","_active","_mostRecentViewValue","id","onSelectionChange","EventEmitter","_stateChanges","active","viewValue","_text","nativeElement","textContent","trim","markForCheck","_emitSelectionChangeEvent","focus","_origin","options","element","_getHostElement","getLabel","_handleKeydown","event","keyCode","ENTER","SPACE","hasModifierKey","_selectViaInteraction","preventDefault","_getAriaSelected","_getTabIndex","ngAfterViewChecked","ngOnDestroy","complete","emit","MatOption","changeDetectorRef","i2","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","style","opacity","transform","animate","LIVE_ANNOUNCER_ELEMENT_TOKEN","providedIn","factory","LIVE_ANNOUNCER_DEFAULT_OPTIONS","uniqueIds","LiveAnnouncer","elementToken","_ngZone","_document","_defaultOptions","_liveElement","_createLiveElement","announce","message","args","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","setAttribute","_exposeAnnouncerToModals","runOutsideAngular","_currentPromise","Promise","resolve","_currentResolve","setTimeout","undefined","remove","elementClass","previousElements","getElementsByClassName","liveEl","createElement","i","classList","body","appendChild","modals","querySelectorAll","modal","ariaOwns","getAttribute","indexOf","DOCUMENT","CdkAriaLive","_politeness","_subscription","unsubscribe","_contentObserver","observe","_elementRef","subscribe","elementText","_previousAnnouncedText","_liveAnnouncer","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","deps","Overlay","useFactory","overlay","scrollStrategies","reposition","MAT_SELECT_TRIGGER","MatSelectChange","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","_MatSelectBase","focused","_focused","_panelOpen","placeholder","_placeholder","required","_required","control","hasValidator","Validators","_selectionModel","disableOptionCentering","_disableOptionCentering","_compareWith","fn","_initializeSelection","_value","newValue","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","coerceNumberProperty","_id","_uid","_viewportRuler","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","controlType","ariaLabel","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","map","option","onStable","take","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","distinctUntilChanged","takeUntil","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","removeAttribute","_previousControl","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","destroy","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","triggerValue","empty","selectedOptions","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","manager","isTyping","altKey","previouslySelectedOption","onKeydown","selectedOption","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","then","_setSelectionByValue","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","error","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","tabOut","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","wasSelected","_propagateChanges","toArray","a","b","sortComparator","fallbackValue","valueToEmit","_getChangeEvent","setFirstItemActive","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","MAT_FORM_FIELD","CdkConnectedOverlay","MatSelectTrigger","MatSelect","_positions","originX","originY","overlayX","overlayY","panelClass","_overlayWidth","_getOverlayWidth","ngAfterViewInit","_preferredOverlayOrigin","getConnectedOverlayOrigin","labelCount","optionIndex","optionGroups","optionsArray","groups","groupCounter","_countGroupLabelsBeforeOption","scrollTop","optionOffset","offsetTop","optionHeight","offsetHeight","currentScrollPosition","panelHeight","Math","max","CdkOverlayOrigin","getBoundingClientRect","width","MatFormFieldControl","i7","MatSelectModule","OverlayModule","CdkScrollableModule","MatFormFieldModule","MaterialSelectLayoutMetadataLoader","MaterialSelectLayoutEditorMetadata","MaterialSelectRelationsMetadataLoader","MaterialSelectRelationsEditorMetadata","MaterialSelectSAComponent","FormComponentBase","_values","code","FormPipesModule","CastPipesModule","ReactiveFormsModule","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","Subscription","_vertical","_allowedModifierKeys","_homeAndEnd","_pageUpAndDown","enabled","delta","_skipPredicateFn","item","_pressedLetters","QueryList","_itemChangesSubscription","newItems","newIndex","skipPredicate","withWrap","shouldWrap","direction","_horizontal","keys","debounceInterval","tap","letter","debounceTime","inputString","items","_getItemsArray","toUpperCase","previousActiveItem","isModifierAllowed","every","modifier","TAB","setNextItemActive","setPreviousItemActive","HOME","END","setLastItemActive","PAGE_UP","targetIndex","_setActiveItemByIndex","PAGE_DOWN","itemsLength","key","toLocaleUpperCase","Z","ZERO","NINE","String","fromCharCode","_setActiveItemByDelta","itemArray","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ɵɵclassMapInterpolate1","prefix","v0","suffix","lView","getLView","interpolatedValue","interpolation1","checkStylingMap","keyValueArraySet","classStringParser","ɵɵclassMapInterpolate2","i0","v1","interpolation2","ɵɵclassMapInterpolate3","i1","v2","interpolation3","ɵɵclassMapInterpolate4","v3","interpolation4","ɵɵclassMapInterpolate5","i3","v4","interpolation5","ɵɵclassMapInterpolate6","i4","v5","interpolation6","ɵɵclassMapInterpolate7","i5","v6","interpolation7","ɵɵclassMapInterpolate8","i6","v7","interpolation8","ɵɵclassMapInterpolateV","interpolationV"],"sourceRoot":""}