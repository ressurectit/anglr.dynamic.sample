{"version":3,"file":"4073.client.chunk.cd50f8c285d628703eb9.js","mappings":"yLAqBM,MAAOA,G,iCAAAA,E,oBAAAA,I,sHCNP,MAAOC,EALbC,cAiBc,KAAAC,QAAkB,EAKlB,KAAAC,kBAAkC,IAAIC,EAAAA,GAUtC,KAAAC,UAAoB,GAKpB,KAAAC,SAAmB,GAgBtB,KAAAC,YAAsB,EAMtB,KAAAC,SAAmB,EAMnB,KAAAC,eAAsD,IAuIhE,CAhIUC,WAEHC,KAAKC,SAAW,IAAIC,kBAAiBC,IAEjC,IAAI,MAAMC,KAAUD,EAEbC,EAAOC,kBAAkBC,aAExBN,KAAKO,kBAAkBH,EAAOC,OAErC,IAGLL,KAAKR,kBAAkBgB,IAAIR,KAAKS,kCAAkCC,uBAAuBC,WAAUC,IAE3FA,GAOJZ,KAAKY,QAAUA,EACfZ,KAAKa,QANDb,KAAKC,UAAUa,YAMnB,IAEP,CAOMC,YAAYZ,IAEZa,EAAAA,EAAAA,GAAwC,oBAAqBb,GAE5DH,KAAKa,MAEZ,CAOMI,cAEHjB,KAAKC,UAAUa,aACfd,KAAKR,kBAAkB0B,aAC1B,CAOSL,OAEN,IAAIb,KAAKY,UAAYZ,KAAKF,eAEtB,OAGJ,MAAMc,EAAUZ,KAAKF,eAAeqB,uBAAuBnB,KAAKY,UAA2BZ,KAAKY,QAEhGZ,KAAKN,UAAYkB,EAAQQ,MAAM1B,UAC/BM,KAAKL,SAAWiB,EAAQQ,MAAMzB,SAE9BK,KAAKO,kBAAkBK,GAEvBZ,KAAKC,UAAUoB,QAAQT,EACvB,CACIU,WAAW,GAElB,CAMSf,kBAAkBK,GAExB,MAAMW,EAA0B,GAChCX,EAAQY,WAAWC,SAAQC,GAAQH,EAAWI,KAAKD,KAEnD,MAAME,EAAiBL,EAAWM,QAAOC,GAAuB,YAAhBA,EAAIC,WAAwBC,OAE5E,KAAIJ,IAAmB5B,KAAKT,SACvBqC,GAAkB5B,KAAKT,QAM5B,GAAGqC,EACH,CAEI,GAA+B,IAA5BhB,EAAQqB,SAASD,QAAgBpB,EAAQqB,SAASC,KAAK,IAAIC,UAAUC,SAAS,oBAE7E,OAGJpC,KAAKT,QAAS,EAEXS,KAAKJ,WAEJgB,EAAQQ,MAAMzB,SAAWK,KAAKL,SAI9BiB,EAAQQ,MAAM1B,UAAYM,KAAKN,SAEtC,MAIGM,KAAKT,QAAS,EAEXS,KAAKJ,WAEJgB,EAAQQ,MAAMzB,SAAWK,KAAKH,QAAU,OAAS,OAIjDe,EAAQQ,MAAM1B,UAAYM,KAAKH,QAAU,OAAS,MAG7D,E,iCAlMQR,E,oBAAAA,E,qFAuCKgD,EAAAA,EAAoC,G,0VCtChD,MAAOC,EA2BThD,YAAsBiD,EACAC,GADA,KAAAD,SAAAA,EACA,KAAAC,mBAAAA,CAErB,CAfUC,eAEP,OAAOzC,KAAK0C,SACf,CACUD,aAASE,GAEhB3C,KAAK0C,UAAYC,EAEjB3C,KAAK4C,qBACR,CAaeA,sBAAmB,I,EAAA,c,EAAA,YAE/B,IAAI,EAAKF,UAEL,OAGJ,MACMG,SADiB,EAAKL,mBAAmBM,gBAAgB,EAAKJ,aAC9BG,oBAEnCA,GAECA,EAAoB,EAAKH,UAAUK,QAAS,EAAKR,SAASS,cAAc5B,MAZ7C,E,gLAclC,E,iCAnDQkB,GAAAA,EAAAA,EAA6BW,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,G,oBAA7BX,E,2LCLP,MAAOY,EAeT5D,YAAsB6D,EACAC,EACkBC,GAFlB,KAAAF,SAAAA,EACA,KAAAC,cAAAA,EACkB,KAAAC,SAAAA,CAEvC,CAOMtD,WAEHC,KAAKsD,KAAOtD,KAAKoD,cACZG,mBAAmBvD,KAAKmD,UAE7BnD,KAAKY,QAAUZ,KAAKsD,KAAKE,UAAU,GACnCxD,KAAKqD,SAASI,KAAKC,YAAY1D,KAAKY,QACvC,CAOMK,cAEHjB,KAAKY,SAAS+C,SACd3D,KAAKY,QAAU,KACfZ,KAAKsD,MAAMM,UACX5D,KAAKsD,KAAO,IACf,E,iCA9CQJ,GAAAA,EAAAA,EAAqBD,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAiBVY,EAAAA,G,oBAjBXX,E,4GCEP,MAAOY,EAyBTxE,YAAsBiD,EACAwB,GADA,KAAAxB,SAAAA,EACA,KAAAwB,gBAAAA,CAErB,CAOMhE,WAEHC,KAAKgE,UAAY,IAAI9D,kBAAiB,IAAMF,KAAK+D,gBAAgBE,kBAGjEjE,KAAKkE,aAAgBlE,KAAKS,kCAAkC0D,cAAcC,UAAmCZ,YAAY,GAEtHxD,KAAKkE,cAEJlE,KAAKgE,WAAW3C,QAAQrB,KAAKkE,aAAc,CAACG,gBAAiB,CAAC,UAErE,CAOMpD,cAEHjB,KAAKgE,WAAWlD,YACnB,E,iCAxDQgD,GAAAA,EAAAA,EAAmCb,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,G,oBAAnCa,E,yiBCbb,U,CAAA,U,CAAA,U,CAAA,U,CAAA,U,CAAA,U,CAAA,U,CAAA,U,CAAA,U,CAAA,U,CAAA,Y,CAAA,a,WAA4B,+F,IACG,G,KAAA,kG,IACF,G,KAAA,+F,IACC,G,KAAA,gG,IACD,G,KAAA,gG,IACG,G,KAAA,mG,IACF,G,KAAA,gG,IACC,G,KAAA,iG,IACH,G,KAAA,+F,IACG,G,KAAA,kG,IACF,G,KAAA,+F,IACC,G,KAAA,gG,2RCExB,MAAOQ,GAwFThF,YAAsBe,EACkBkE,GADlB,KAAAlE,OAAAA,EACkB,KAAAkE,SAAAA,EAxBjC,KAAAC,OAAuG,OAMvG,KAAAC,YAAwC,EAQxC,KAAAC,KAA2B,IAAIC,EAAAA,EAM/B,KAAAC,KAA2B,IAAID,EAAAA,CAMrC,CAlEUE,aAEP,OAAO7E,KAAK8E,OACf,CACUD,WAAOlC,GAEXA,aAAiBoC,EAAAA,GAEhB/E,KAAK8E,QAAWnC,EAAqBK,cAKzChD,KAAK8E,QAAUnC,CAClB,CAMUqC,gBAEP,OAAOhF,KAAKiF,UACf,CACUD,cAAUrC,IAEduC,EAAAA,EAAAA,IAASvC,GAER3C,KAAKiF,WAAaE,GAAAA,EAAkBxC,GAKxC3C,KAAKiF,WAAatC,CACrB,CAuCM5B,YAAYZ,KAEXa,EAAAA,EAAAA,GAA4B,YAAab,IACzCa,EAAAA,EAAAA,GAA4B,eAAgBb,KAC7CiF,EAAAA,EAAAA,IAAUpF,KAAK6E,SAEd7E,KAAKqF,gBAEZ,CAOMpE,cAEHjB,KAAKsF,WACR,CAOSD,iBAEN,IAAIrF,KAAK8E,QAEL,OAGJ,MAAM/B,EACN,CACI2B,MAAM,EACND,WAAYzE,KAAKyE,WACjBD,OAAQxE,KAAKwE,QAGdxE,KAAKiF,aAEJlC,EAAQiC,UAAYhF,KAAKiF,YAG7BjF,KAAKsF,YAELtF,KAAKuE,SAASgB,aAAavF,KAAKK,OAAO2C,cACXhD,KAAK8E,QACL/B,GACvBpC,WAAU6E,IAEPxF,KAAKsF,QAAUE,EAAOF,SAEtBG,EAAAA,GAAAA,GAAoBD,GAEjBA,EAAOd,MAEN1E,KAAK0E,KAAKgB,OAGd1F,KAAK4E,KAAKc,MAAV,GAEX,E,kCAhKQpB,IAAAA,EAAAA,EAAmBrB,EAAAA,IAAAA,EAAAA,EAyFR0C,EAAAA,I,qBAzFXrB,G,8RCQP,MAAOsB,GAgRTtG,YAAsBuG,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACkB9C,GAPlB,KAAAwC,IAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,QAAAA,EACA,KAAAC,IAAAA,EACA,KAAAC,KAAAA,EACA,KAAAC,SAAAA,EACkB,KAAA9C,SAAAA,EAnP9B,KAAA7D,kBAAkC,IAAIC,EAAAA,GAyBtC,KAAA2G,gBAAgEpG,KAAK6F,IAAIQ,WAAW,CAAC,YAAa,YACd,CACIxG,QAAS,KAAM,EACfyG,KAAMC,IAEF,MAAMrE,EAAOqE,EAAQC,UACrB,IAAIC,EAAQzG,KAAKiG,IAAIS,4BAWrB,OATGxE,IAAQkD,EAAAA,EAAAA,IAAUlD,EAAKyE,SAASF,SAAUrB,EAAAA,EAAAA,IAAUqB,IAGhDA,EAAQvE,EAAKyE,SAASF,OAErBA,IAIiB,CACrBA,QACAG,GAAI5G,KAAKyC,UAAUmE,GAFvB,GAKL5G,KAAKR,mBAK5F,KAAAqH,cAA8D7G,KAAK6F,IAAIQ,WAAW,CAAC,YAAa,YACd,CACIxG,QAAS0G,GAAWvG,KAAK8G,mBAAmB,IAAMP,EAAQQ,OAAO,CAACC,SAAS,IAC3EV,KAAMC,IAEF,MAAOE,EAAOG,GAAM5G,KAAKiH,wBAAwBV,GAAS,GAE1D,MAAyB,CACrBE,QACAG,KAFJ,EAKJM,MAAOX,IAEH,GAAGA,EAAQQ,OAAO,CAACC,SAAS,IAC5B,CACI,MAAOP,EAAOU,GAAYnH,KAAKoH,mBAAmBb,GAAS,GAE3D,IAAGc,EAAAA,EAAAA,IAAQZ,KAAUY,EAAAA,EAAAA,IAAQF,GAEzB,OAGJnH,KAAKiG,IAAIqB,0BACT,CACIb,QACAU,WACAI,YACA,CACIC,OAAQ,EACRC,MAAO,IAGlB,IAENzH,KAAKR,mBAmC7F,KAAAkI,KAAqD1H,KAAK6F,IAAI8B,WAAW,YACA,CACIC,UAAW,KAEP5H,KAAK+F,YAAY8B,aAAY,GAC7B7H,KAAK8F,gBAAgB9C,cAAcb,UAAU3B,IAAI,cAE1C,CACHmG,SAAU3G,KAAK2G,WAGvBmB,QAAS,KAAO9H,KAAK+H,aACrBC,QAASzB,IAGL,GAAIA,EAAQ0B,UAMZ,CACI,MAAM/F,EAAOqE,EAAQC,UACf0B,EAAa3B,EAAQ4B,gBAE3B,IAAIjG,EAEA,OAGJA,EAAKyE,SAASF,MAAQyB,EAAWzB,MAEjCzG,KAAKiG,IAAImC,YACT,CACIC,KAAMnG,EAAKyE,SACXC,GAAIsB,EAAWtB,IAEtB,MApBG5G,KAAK8F,gBAAgB9C,cAAcb,UAAUwB,OAAO,cAsBxD3D,KAAKiG,IAAIqB,0BAA0B,MACnCtH,KAAK+F,YAAY8B,aAAY,EAA7B,GAGR7H,KAAKR,mBAK9E,KAAA8I,SAAyDtI,KAAK6F,IAAIQ,WAAW,CAAC,YAAa,YACd,CACIxG,QAAS0G,IAAYvG,KAAKH,SAAWG,KAAK8G,mBAAmB,KAAOP,EAAQQ,OAAO,CAACC,SAAS,IAC7FV,KAAMC,IAEF,MAAOE,EAAOG,GAAM5G,KAAKiH,wBAAwBV,EAASvG,KAAKH,SAE/D,MAAyB,CACrB4G,QACAG,KAFJ,EAKJM,MAAOX,IAEH,GAAGA,EAAQQ,OAAO,CAACC,SAAS,KAAUT,EAAQ1G,UAC9C,CACI,MAAO4G,EAAOU,GAAYnH,KAAKoH,mBAAmBb,EAASvG,KAAKH,SAEhE,IAAGwH,EAAAA,EAAAA,IAAQZ,KAAUY,EAAAA,EAAAA,IAAQF,GAEzB,OAGJnH,KAAKiG,IAAIqB,0BACT,CACIb,QACAU,WACAI,YACA,CACIC,OAAQ,EACRC,MAAO,IAGlB,IAENzH,KAAKR,mBAoBrF,KAAAuI,cAAwB,EAQxB,KAAAQ,aAAsD,IAAI5D,EAAAA,EAY7D3E,KAAKwI,wBACR,CAnRa/F,eAEV,IAAIzC,KAAK2G,SAASlE,SAEd,MAAM,IAAIgG,MAAM,iEAGpB,OAAOzI,KAAK2G,SAASlE,QACxB,CAKa5C,cAEV,OAAOG,KAAKgG,QAAQ0C,aAAa1I,KAAKyC,SAASmE,KAAK/G,UAAW,CAClE,CAKaD,iBAEV,OAAOI,KAAKgG,QAAQ0C,aAAa1I,KAAKyC,SAASmE,KAAKhH,aAAc,CACrE,CAiGa+I,uBAEV,IAAI3I,KAAK4I,iBAEL,OAGJ,MAAMC,EAAY7I,KAAKgG,QAAQ0C,aAAa1I,KAAKyC,SAASmE,IAE1D,OAAIiC,GAAW/I,gBAAgBqB,qBAKxB0H,EAAU/I,eAAeqB,qBAAqBnB,KAAK4I,mBAAqB5I,KAAK4I,iBAHzE5I,KAAK4I,gBAInB,CAkJM7I,WAEH,IAAIC,KAAK8I,gBAEL,MAAM,IAAIL,MAAM,uDAGpB,IAAIzI,KAAK2G,SAEL,MAAM,IAAI8B,MAAM,gDAGpBzI,KAAKR,kBAAkBgB,IAAIR,KAAKS,kCAAkCC,uBAAuBC,WAAUC,IAS/FZ,KAAK4I,iBAPDhI,GAEwB,IAK5B,KAGJZ,KAAKR,kBAAkBgB,IAAIR,KAAKiG,IACA8C,eACAC,MAAKnH,EAAAA,GAAAA,IAAOC,GAAOA,EAAI8E,KAAO5G,KAAKyC,SAASmE,MAC5CjG,WAAUmB,GAAO9B,KAAKuI,aAAa7C,KAAK5D,EAAIuG,SAE5ErI,KAAKR,kBAAkBgB,IAAIR,KAAKiG,IACAgD,gCACAD,MAAKnH,EAAAA,GAAAA,IAAOC,GAAOA,EAAIqF,WAAanH,KAAKyC,SAASmE,MAClDjG,WAAU,KAEPX,KAAKkJ,2BAA2BvF,SAChC3D,KAAKkJ,0BAA4B,IAAjC,KAGnClJ,KAAKR,kBAAkBgB,IAAIR,KAAKiG,IACAkD,gCACAH,MAAKnH,EAAAA,GAAAA,IAAOC,GAAOA,EAAIqF,WAAanH,KAAKyC,SAASmE,MAClDjG,UAAUX,KAAKoJ,wBAKlD,CAOMnI,cAEHjB,KAAKR,kBAAkB0B,cAEvBlB,KAAKqJ,uBAAuBnI,cAC5BlB,KAAKqJ,sBAAwB,KAE7BrJ,KAAKsJ,qBAAqBpI,cAC1BlB,KAAKsJ,oBAAsB,IAC9B,CASSlC,mBAAmBb,EAA8D1G,GAGvF,GAAGA,EAEC,OAAOG,KAAKuJ,8BAA8BhD,GAI9C,MAAOiD,EAAiBC,EAAY7C,GAAM5G,KAAK8G,mBAG/C,IAAI0C,IAAmBnC,EAAAA,EAAAA,IAAQoC,GAE3B,MAAO,CAAC,KAAM,MAGlB,MAAMC,EAAkB1J,KAAKgG,QAAQ0C,aAAae,GAC5CE,EAAiB3J,KAAKgG,QAAQ0C,aAAa9B,IAAKH,OAAS,EACzDvE,EAAOqE,EAAQC,UAErB,OAAGtE,IAAQkD,EAAAA,EAAAA,IAAUlD,EAAKyE,SAASF,QAG5BvE,EAAKyE,SAASlE,UAAUmE,KAAO5G,KAAKyC,SAASmE,GAErC,CAAC1E,EAAKyE,SAASF,MAAOvE,EAAKyE,SAASQ,UAAY,IAI3DuC,EAKG,CAACC,EAAiB3J,KAAK4J,kBAAkBrD,EAASmD,EAAgB9J,YAAa6J,GAH3E,CAAC,KAAM,KAIrB,CAMSF,8BAA8BhD,GAEpC,MAAMsD,EAAWjJ,IAEb,MAAMkJ,EAAOlJ,EAAQqB,SAAS,GAAG8H,wBAIjC,OAHiB/J,KAAKJ,WAAakK,EAAKE,EAAIF,EAAKG,IACnCjK,KAAKJ,WAAakK,EAAKrC,MAAQqC,EAAKtC,QAAU,CAE5D,EAGJ,IAAIxH,KAAK2I,iBAEL,MAAO,CAAC,KAAM,MAGlB,IAAIlC,EAAQ,EACZ,MAAMjC,EAAS+B,EAAQ2D,kBAEvB,IAAI1F,EAEA,MAAO,CAAC,KAAM,MAGlB,MAAMD,EAAWvE,KAAKJ,WAAa4E,EAAOwF,EAAIxF,EAAOyF,EAErD,IAAI,IAAID,EAAI,EAAGA,EAAIhK,KAAK2I,iBAAiB1G,SAASD,OAAQgI,IAC1D,CACI,MAAMG,EAAQnK,KAAK2I,iBAAiB1G,SAAS+H,GAG7C,IAAGG,EAAMhI,UAAUC,SAAS,oBAA5B,CAMA,GAAGmC,GAAYsF,EAAQM,GAEnB,MAAO,CAAC1D,EAAOzG,KAAKyC,SAASmE,IAGjCH,GARC,CASJ,CAED,MAAO,CAACA,EAAOzG,KAAKyC,SAASmE,GAChC,CAOSK,wBAAwBV,EAA8D1G,GAE5F,MAAO4G,EAAOG,GAAM5G,KAAKoH,mBAAmBb,EAAS1G,GACrD,IAAIuK,EAAY3D,EAChB,MAAMvE,EAAOqE,EAAQC,UAYrB,OAVGtE,IAAQkD,EAAAA,EAAAA,IAAUgF,KAAchF,EAAAA,EAAAA,IAAUlD,EAAKyE,SAASF,QAGpDG,IAAO1E,EAAKyE,SAASQ,UACpBiD,EAAYlI,EAAKyE,SAASF,OAE1B2D,IAID,CAACA,EAAWxD,EACtB,CAOSgD,kBAAkBrD,EAA8D3G,GAEtF,MAAMkK,EAAO9J,KAAK8I,gBAAgBiB,wBAC5BvF,EAAS+B,EAAQ2D,kBAEvB,OAAI1F,GAKa5E,EAAa4E,EAAOwF,EAAIF,EAAKE,EAAIxF,EAAOyF,EAAIH,EAAKG,KACrDrK,EAAakK,EAAKrC,MAAQ,EAAIqC,EAAKtC,OAAS,GAI9C,EAIA,EAZA,CAcd,CAOS4B,uBAAuBiB,GAEzBrK,KAAK2I,mBAKT3I,KAAKkJ,4BAALlJ,KAAKkJ,0BAA8BlJ,KAAKqD,SAASiH,cAAc,QAC/DtK,KAAKkJ,0BAA0B/G,UAAU3B,IAAI,oBAC7CR,KAAKkJ,0BAA0BvF,SAE/B3D,KAAKuK,2BACLvK,KAAK2I,iBAAiB6B,aAAaxK,KAAKkJ,0BAA2BlJ,KAAK2I,iBAAiB1G,SAASoI,EAAQ5D,QAC7G,CAKS8D,2BAENvK,KAAKkG,KAAKuE,mBAAkB,KAExBzK,KAAKqJ,uBAAuBnI,cAEzBlB,KAAKkJ,4BAEJlJ,KAAKqJ,sBAAwBrJ,KAAKoG,gBAAgBsE,kBAAkB1K,KAAKkJ,2BAC5E,GAER,CAKSV,yBAENxI,KAAKkG,KAAKuE,mBAAkB,KAExBzK,KAAKsJ,qBAAqBpI,cAC1BlB,KAAKsJ,oBAAsBtJ,KAAK6G,cAAc6D,kBAAkB1K,KAAK8F,gBAAgB9C,cAArF,GAEP,CAMS8D,iBAAiBF,IAEpBS,EAAAA,EAAAA,IAAQT,KAEPA,EAAK5G,KAAKyC,SAASmE,IAGvB,MAAMiC,EAAY7I,KAAKgG,QAAQ2E,gBAAgB/D,GAG/C,OAAIiC,GAAW+B,OAKZ/B,EAAU+B,OAAO/B,UAAUhJ,QAEnB,EAAC,EAAMgJ,EAAU+B,OAAO/B,UAAUjC,GAAIA,GAItC5G,KAAK8G,iBAAiB+B,EAAU+B,OAAO/B,UAAUjC,IATjD,EAAC,EAAO,KAAMA,EAW5B,E,itBAjkBQhB,IAAAA,EAAAA,EAAwBiF,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAuRbhH,EAAAA,G,qBAvRX+B,G,oFAsJKvD,EAAAA,EAAoC,G,+PAqWlDyI,EAAAA,GAAAA,IAAAA,CADCC,GAAAA,GACD,4J,oGCpfQ,Y,IAG0B,G,+CADrB,gB,IACqB,G,KAAA,mK,yGAGtB,Y,IAKK,oB,KAAA,8BAAS,WAAT,I,KACD,a,yCAJC,e,CAAA,2B,8BAHT,G,IACI,mB,uCAVR,G,KACI,U,CAAA,W,IAGA,kB,IAKA,2B,wCAPqC,G,IAAA,8B,IAOtB,G,IAAA,iG,kECYrB,MAAOC,WAAkCC,EAAAA,EAyG3C3L,YAAY4L,EACAtK,EACAuF,EACUgF,EACAC,EACAC,EACgCC,EACFC,EACZC,EACMZ,GAE1Ca,MAAMP,EAAgBtK,EAASuF,EAAUqF,GARvB,KAAAL,kBAAAA,EACA,KAAAC,4BAAAA,EACA,KAAAC,YAAAA,EACgC,KAAAC,QAAAA,EACF,KAAAC,QAAAA,EAEN,KAAAX,OAAAA,EA3GpC,KAAApL,kBAAkC,IAAIC,EAAAA,GAwEzC,KAAAI,SAAmB,EAKnB,KAAAD,YAAsB,EAatB,KAAA6G,MAAgB,EAKhB,KAAA3G,eAAsD,IAe5D,CAvGa4L,eAEV,OAAO1L,KAAKoL,4BAA4BO,oBAAsB3L,KAAK+C,SAAS6I,aAAahF,EAC5F,CAKaiF,kBAEV,OAAO7L,KAAKoL,4BAA4BU,uBAAyB9L,KAAK+C,SAAS6I,aAAahF,EAC/F,CAYsBhG,cAEnB,OAAOZ,KAAK8F,eACf,CAKsBiG,wBAEnB,OAAO/L,KAAK+C,SAAS6I,aAAa7I,OACrC,CAuBUgF,mBAEP,OAAQ/H,KAAK4K,UAAY5K,KAAKF,gBAAgBkM,UAAUjE,YAC3D,CAeUnB,SAEP,OAAO5G,KAAK+C,SAAS6I,cAAchF,IAAM,EAC5C,CAgCe3F,cAEZjB,KAAKwL,QAAQS,MAAM,0DAA2D,CAACrF,GAAI5G,KAAK+C,SAAS6I,aAAahF,KAE9G5G,KAAKR,kBAAkB0B,cAEvBuK,MAAMxK,cAEHjB,KAAK+C,SAEJ/C,KAAKoL,4BAA4Bc,kCAAkClM,KAAK+C,QAAQ6I,aAAahF,GAEpG,CAQMuF,cAAcxF,GAEjB,IAAI3G,KAAK+C,QAEL,OAGJ,MAAMoE,EAAWR,EAASQ,SAC1BnH,KAAKwL,QAAQS,MAAM,uDAAwD,CAACrF,GAAID,EAASlE,UAAUmE,GAAIgE,OAAQ5K,KAAK+C,QAAQ6I,aAAahF,KAErID,EAASlE,UAQV0E,IAECnH,KAAKsL,QAAQc,UACbpM,KAAKoL,4BAA4B1C,aAAavB,IAAWkF,iBAAiB1F,EAASlE,UAAUmE,IAC7F5G,KAAKsL,QAAQgB,UAGjBtM,KAAKF,gBAAgBqM,gBAAgBxF,GAAUlE,SAAUzC,KAAK+C,QAAQ6I,aAAa7I,QAAS4D,EAASF,OAAS,GAC9GzG,KAAKH,QAAUG,KAAKF,gBAAgByM,kBAAkBvM,KAAK+C,QAAQ6I,aAAa7I,WAAY,EAE5F/C,KAAKwM,aAAe,IAAIxM,KAAK+C,QAAQ6I,cACrC5L,KAAKkL,eAAeuB,eACpBzM,KAAKsL,QAAQoB,eAlBT1M,KAAKwL,QAAQmB,KAAK,sEAmBzB,CAMMN,iBAAiBzF,GAEhB5G,KAAK+C,UAKT/C,KAAKwL,QAAQS,MAAM,yDAA0D,CAACrF,GAAI5G,KAAK+C,QAAQ6I,aAAahF,GAAIuD,MAAOvD,IAEvH5G,KAAKF,gBAAgBuM,mBAAmBzF,EAAI5G,KAAK+C,QAAQ6I,aAAa7I,SACtE/C,KAAKH,QAAUG,KAAKF,gBAAgByM,kBAAkBvM,KAAK+C,QAAQ6I,aAAa7I,WAAY,EAC5F/C,KAAKwM,aAAe,IAAIxM,KAAK+C,QAAQ6I,cACrC5L,KAAKkL,eAAeuB,eACpBzM,KAAKsL,QAAQoB,cAChB,CAQSE,YAAYC,GAElB7M,KAAKwL,QAAQsB,QAAQ,uDAAwD,CAACC,KAAM/M,KAAK+C,SAAS6I,aAAamB,KAAMnG,GAAI5G,KAAK+C,SAAS6I,aAAahF,KAEpJiG,EAAMG,iBACNH,EAAMI,kBAENjN,KAAKoL,4BAA4B8B,mBAAmBlN,KAAK+C,SAAS6I,aAAahF,GAClF,CAMSuG,YAAYN,IAEfzH,EAAAA,EAAAA,IAAUpF,KAAK4K,UAKlB5K,KAAKwL,QAAQsB,QAAQ,sDAAuD,CAACC,KAAM/M,KAAK+C,SAAS6I,aAAamB,KAAMnG,GAAI5G,KAAK+C,SAAS6I,aAAahF,KAEnJiG,EAAMG,iBACNH,EAAMI,kBAENjN,KAAKoL,4BAA4BgC,6BACpC,CAMSC,gBAAgBR,GAEtBA,EAAMG,iBACNH,EAAMI,kBAEHjN,KAAK+C,SAEJ/C,KAAKoL,4BAA4BiC,gBAAgBrN,KAAK+C,QAAQ6I,aAAahF,GAElF,CAMS0G,kBAAkBT,GAExBA,EAAMG,iBACNH,EAAMI,kBAENjN,KAAKoL,4BAA4BkC,mBACpC,CAKS3J,SAEF3D,KAAK4K,QAAW5K,KAAK+C,SAKzB/C,KAAK4K,OAAOyB,iBAAiBrM,KAAK+C,QAAQ6I,aAAahF,GAC1D,CAOwB2G,SAAM,I,EAAA,iC,EAAA,YAI3B,SAFM,YAEF,EAAKxK,QAAT,CAOA,GAFA,EAAKA,QAAQ6I,aAAa4B,MAAQ,EAAKjC,QAEpC,EAAKX,QAAQ7H,QAChB,qBACI,Y,sRAAA,CAAyB,EAAKsI,YAAYoC,uBAAuB,EAAK7C,OAAO7H,SAAS6I,eAAtF,gCACA,OADgBzB,EAChB,QACI,GAAG,EAAKpH,QAAQ6I,aAAahF,KAAOuD,EAAM1H,SAASmE,GACnD,CACI,EAAKH,MAAQ0D,EAAM1D,MAEnB,KACH,CACJ,CATL,2FAUC,CAGD,EAAKjH,kBAAkBgB,IAAI,EAAK4K,4BAA4BsC,eAAe/M,WAAU,IAAM,EAAKuK,eAAejH,mBAC/G,EAAKzE,kBAAkBgB,IAAI,EAAK4K,4BAA4BuC,kBAAkBhN,WAAU,IAAM,EAAKuK,eAAejH,mBAElH,EAAKnE,qBAAuB,EAAKqL,kBAAkBrI,gBAAgB,EAAKC,QAAQ6I,cAChF,EAAK/L,QAAU,EAAKC,gBAAgByM,kBAAkB,EAAKxJ,QAAQ6I,aAAa7I,WAAY,EAC5F,EAAKqI,4BAA4BwC,gCAAgC,EAAM,EAAK7K,QAAQ6I,aAAahF,GAAI,EAAKgE,QAAQ7H,SAAS6I,aAAahF,GAvBvI,CAP0B,E,kLA+B9B,CAKkBiH,eAEX7N,KAAK+C,UAKT/C,KAAKwM,aAAe,IAAIxM,KAAK+C,QAAQ6I,cACrC5L,KAAKJ,WAAaI,KAAKF,gBAAgBgO,mBAAmB9N,KAAK+C,QAAQ6I,aAAa7I,WAAY,EACnG,E,kCAlUQiI,IAAAA,EAAAA,EAAyB/H,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EA+Gd8K,EAAAA,IAAsBA,EAAAA,EACVC,EAAAA,GAAQA,GAAAA,EAAAA,EACpBC,EAAAA,GAAMA,GAAAA,EAAAA,EAC6BjD,GAAAA,I,qBAlH9CA,G,0tCD7Cb,a,IAQK,mCAAgB,kBAAhB,G,CAAA,iCAEc,gBAFd,G,CAAA,gCAGa,gBAHb,G,CAAA,4BAIS,oBAJT,G,CAAA,+BAKY,sBALZ,I,KAMD,a,IAQI,gC,IAEA,2B,iDArBH,+H,CAAA,oB,CAAA,8B,CAAA,oB,CAAA,oB,CAAA,qC,IAcI,G,IAAA,oB,CAAA,kC,CAAA,+E,CAAA,wB,CAAA,wB,IAKgD,G,IAAA,yC,CAAA,gD,IAElC,G,IAAA,iC,iBCOfkD,EAAAA,EAAYC,EAAAA,EACZ/O,EAAcgP,GAEdtK,EACAzE,EACAiD,EACAD,EAAAA,EACAgM,EAAAA,EACAnL,EACAoL,EAAAA,GAASC,GAAAA,GAAAA,GAAAA,GACTC,EAAAA,EAAmBC,I,iIC5BrB,MAAOJ,EAkBT/O,YAAsByG,EACAnF,GADA,KAAAmF,YAAAA,EACA,KAAAnF,QAAAA,EAZZ,KAAApB,kBAAkC,IAAIC,EAAAA,GAQzC,KAAAiP,YAAsB,CAM5B,CAOM3O,WAEHC,KAAKR,kBAAkBgB,IAAIR,KAAK+F,YAAY4I,eAAehO,WAAU,IAAMX,KAAK4O,qBACnF,CAOM3N,cAEHjB,KAAKR,kBAAkB0B,aAC1B,CAOS0N,mBAINC,YAAW,KAEJ7O,KAAK+F,YAAY+I,UAAY9O,KAAK0O,WAEjC1O,KAAKY,QAAQoC,cAAcb,UAAU3B,IAAI,eAIzCR,KAAKY,QAAQoC,cAAcb,UAAUwB,OAAO,cAC/C,GAER,E,iCA/DQ0K,GAAAA,EAAAA,EAA2BxD,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,I,oBAA3BwD,E,oJCcP,MAAOG,G,iCAAAA,E,oBAAAA,I,4EClBP,MAAOO,EADbzP,cAQc,KAAA0P,sBAAiD,IAAIC,EAAAA,EAKrD,KAAAC,uBAAsD,KAKtD,KAAAC,iCAAoE,IAAIF,EAAAA,EAKxE,KAAAG,iCAAoE,IAAIH,EAAAA,CAyErF,CAlEclG,qBAEP,OAAO/I,KAAKgP,sBAAsBK,cACrC,CAKUlG,sCAEP,OAAOnJ,KAAKmP,iCACPE,cACR,CAKUpG,sCAEP,OAAOjJ,KAAKoP,iCACPC,cACR,CAKU3I,kCAEP,OAAO1G,KAAKkP,wBAAwBzI,OAAS,IAChD,CAQM2B,YAAYC,GAEfrI,KAAKgP,sBAAsBM,KAAKjH,EACnC,CAMMf,0BAA0Be,GAG1BA,GAAM5B,QAAUzG,KAAKkP,wBAAwBzI,OAAS4B,GAAMlB,WAAanH,KAAKkP,wBAAwB/H,WAKtGnH,KAAKkP,wBAEJlP,KAAKoP,iCAAiCE,KAAKtP,KAAKkP,wBAGpDlP,KAAKkP,uBAAyB7G,EAE3BrI,KAAKkP,wBAEJlP,KAAKmP,iCAAiCG,KAAKtP,KAAKkP,wBAEvD,E,iCA9FQH,E,sBAAAA,E,QAAAA,EAAAA,M,kDCHP,SAAUhE,EAASwE,EAAiBC,EAA4BC,GAElE,MAAMC,EAAsBD,EAAW9M,OAAS8M,EAAWE,QAE3D,KAAIC,EAAAA,EAAAA,IAAWF,GAEX,MAAM,IAAIjH,MAAM,2CAA2C+G,EAAYK,oCAG3E,MAAO,CACHC,cAAc,EACdH,MAEI,MAAMI,EAAcL,EAAcM,KAAKhQ,MAUvC,OARAiQ,OAAOC,eAAelQ,KACAwP,EACA,CACI7M,MAAOoN,EACPD,cAAc,EACdK,UAAU,IAG7BJ,CACV,EAER,C","sources":["webpack://ng-universal-demo/../../../src/modules/position/modules/position.module.ts","webpack://ng-universal-demo/../../../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../../../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../../../layout-editor/src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../../../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../../../src/modules/position/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/layoutDndCore/directives/dndCoreDesigner/dndCoreDesigner.directive.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../../../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../../../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../../../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../../../src/decorators/bindThis.decorator.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {PositionToDirective} from '../directives/positionTo/positionTo.directive';\n\n/**\n * Module for position to directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        PositionToDirective\n    ],\n    exports:\n    [\n        PositionToDirective\n    ]\n})\nexport class PositionModule\n{\n}\n","import {ContentChild, Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Indication whether is min dimensions active\n     */\n    protected active: boolean = false;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Html element of dynamic component\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Minimal height of element\n     */\n    protected minHeight: string = '';\n\n    /**\n     * Minimal width of element\n     */\n    protected minWidth: string = '';\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is flow of this component horizontal or vertical\n     */\n    @Input()\n    public horizontal: boolean = false;\n\n    /**\n     * Indication whether can drop children inside of this\n     */\n    @Input()\n    public canDrop: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    @Input()\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                if(change.target instanceof HTMLElement)\n                {\n                    this.updatedDimensions(change.target);\n                }\n            }\n        });\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.observer?.disconnect();\n\n                return;\n            }\n\n            this.element = element;\n            this.init();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DesignerMinDimensionSADirective>('editorMetadata') in changes)\n        {\n            this.init();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize watching for children\n     */\n    protected init(): void\n    {\n        if(!this.element || !this.editorMetadata)\n        {\n            return;\n        }\n\n        const element = this.editorMetadata.getChildrenContainer?.(this.element) as HTMLElement ?? this.element;\n\n        this.minHeight = element.style.minHeight;\n        this.minWidth = element.style.minWidth;\n        \n        this.updatedDimensions(element);\n\n        this.observer?.observe(element,\n        {\n            childList: true,\n        });\n    }\n\n    /**\n     * Updates min dimensions if empty\n     * @param element - Element to be checked for changes\n     */\n    protected updatedDimensions(element: HTMLElement): void\n    {\n        const nodesArray: ChildNode[] = [];\n        element.childNodes.forEach(node => nodesArray.push(node));\n\n        const contentsLength = nodesArray.filter(itm => itm.nodeName != '#comment').length;\n\n        if((contentsLength && !this.active) ||\n           (!contentsLength && this.active))\n        {\n            return;\n        }\n\n        //deactivate, children are present\n        if(contentsLength)\n        {\n            //only placeholder is present\n            if(element.children.length === 1 && element.children.item(0)?.classList.contains('drag-placeholder'))\n            {\n                return;\n            }\n\n            this.active = false;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.minWidth;\n            }\n            else\n            {\n                element.style.minHeight = this.minHeight;\n            }\n        }\n        //activate, children are not present\n        else\n        {\n            this.active = true;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.canDrop ? '30px' : '10px';\n            }\n            else\n            {\n                element.style.minHeight = this.canDrop ? '30px' : '10px';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n        this.document.body.appendChild(this.element);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, EmbeddedViewRef, OnInit, OnDestroy, Input, ChangeDetectorRef} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected _observer?: MutationObserver;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected _htmlElement: HTMLElement|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @Input('layoutDesignerOverlayFor')\n    public layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._observer = new MutationObserver(() => this._changeDetector.detectChanges());\n\n        //TODO: make this working\n        this._htmlElement = (this.layoutComponentRendererDirective?.componentRef?.hostView as EmbeddedViewRef<any>)?.rootNodes?.[0];\n\n        if(this._htmlElement)\n        {\n            this._observer?.observe(this._htmlElement, {attributeFilter: ['style']});\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._observer?.disconnect();\n    }\n}",null,"import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport {nameof, isPresent, isString, Func1, NoopAction} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions, PositionOffsetString, PositionOffsets, PositionArguments, AutoUpdateOptions} from '../../../../services/position';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]'\n})\nexport class PositionToDirective implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected ɵPlacement: PositionPlacement|undefined|null;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected ɵSource: HTMLElement|undefined|null;\n\n    /**\n     * Method used for disposing auto positioning\n     */\n    protected dispose: NoopAction|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement|undefined|null\n    {\n        return this.ɵSource;\n    }\n    public set source(value: HTMLElement|undefined|null)\n    {\n        if(value instanceof ElementRef)\n        {\n            this.ɵSource = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this.ɵSource = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|undefined|null\n    {\n        return this.ɵPlacement;\n    }\n    public set placement(value: PositionPlacement|undefined|null)\n    {\n        if(isString(value))\n        {\n            this.ɵPlacement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this.ɵPlacement = value;\n    }\n\n    /**\n     * Offset which allows moving target element along the cross axis of placement, or any chosed direction\n     */\n    @Input()\n    public offset: PositionOffsetString|number|PositionOffsets|Func1<number|PositionOffsets, PositionArguments> = 'None';\n\n    /**\n     * Indication whether set up 'auto updating' of position\n     */\n    @Input()\n    public autoUpdate: boolean|AutoUpdateOptions = true;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Occurs when element was positioned\n     */\n    @Output()\n    public done: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToDirective>('source') in changes ||\n            nameof<PositionToDirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.dispose?.();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected _applyPosition(): void\n    {\n        if(!this.ɵSource)\n        {\n            return;\n        }\n\n        const options: Partial<PositionOptions> =\n        {\n            flip: true,\n            autoUpdate: this.autoUpdate,\n            offset: this.offset,\n        };\n\n        if(this.ɵPlacement)\n        {\n            options.placement = this.ɵPlacement;\n        }\n\n        this.dispose?.();\n\n        this.position.placeElement(this.target.nativeElement,\n                                    this.ɵSource,\n                                    options)\n            .subscribe(result =>\n            {\n                this.dispose = result.dispose;\n\n                applyPositionResult(result);\n\n                if(result.flip)\n                {\n                    this.flip.emit();\n                }\n\n                this.done.emit();\n            });\n    }\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `source` input\n     */\n    public static ngAcceptInputType_source: HTMLElement|ElementRef<HTMLElement>;\n}\n","import {ContentChild, Directive, ElementRef, EventEmitter, Inject, Injector, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {BindThis, isBlank, isPresent} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from './dndCoreDesigner.interface';\n// import {registerDropzoneOverlay} from '../../misc/utils';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout designer\n */\n@Directive(\n{\n    selector: '[dndCoreDesigner]',\n    exportAs: 'dndCoreDesigner',\n})\nexport class DndCoreDesignerDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    protected get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Gets indication whether component children flow is horizontal\n     */\n    protected get horizontal(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.horizontal ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Current component element\n     */\n    protected componentElement: HTMLElement|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                  {\n                                                                                                      canDrop: () => true,\n                                                                                                      drop: monitor =>\n                                                                                                      {\n                                                                                                          const item = monitor.getItem();\n                                                                                                          let index = this.bus.dropPlaceholderPreviewIndex;\n\n                                                                                                          if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                                                                          {\n                                                                                                              //same parent and higher index\n                                                                                                              if(index > item.dragData.index)\n                                                                                                              {\n                                                                                                                  index--;\n                                                                                                              }\n                                                                                                          }\n\n                                                                                                          return <LayoutDropResult>{\n                                                                                                              index,\n                                                                                                              id: this.metadata?.id,\n                                                                                                          };\n                                                                                                      },\n                                                                                                  }, this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                {\n                                                                                                    canDrop: monitor => this.canDropAncestors()[0] && monitor.isOver({shallow: true}),\n                                                                                                    drop: monitor =>\n                                                                                                    {\n                                                                                                        const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                                                                        return <LayoutDropResult>{\n                                                                                                            index,\n                                                                                                            id,\n                                                                                                        };\n                                                                                                    },\n                                                                                                    hover: monitor =>\n                                                                                                    {\n                                                                                                        if(monitor.isOver({shallow: true}))\n                                                                                                        {\n                                                                                                            const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                                                                            if(isBlank(index) || isBlank(parentId))\n                                                                                                            {\n                                                                                                                return;\n                                                                                                            }\n\n                                                                                                            this.bus.setDropPlaceholderPreview(\n                                                                                                            {\n                                                                                                                index,\n                                                                                                                parentId,\n                                                                                                                placeholder:\n                                                                                                                {\n                                                                                                                    height: 0,\n                                                                                                                    width: 0\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n                                                                                                    }\n                                                                                                }, this.initSubscriptions);\n\n    /**\n     * Gets element that represents container that contains children\n     */\n    protected get containerElement(): Element|undefined|null\n    {\n        if(!this.componentElement)\n        {\n            return;\n        }\n\n        const component = this.manager.getComponent(this.metadata.id);\n\n        if(!component?.editorMetadata?.getChildrenContainer)\n        {\n            return this.componentElement;\n        }\n\n        return component.editorMetadata.getChildrenContainer(this.componentElement) ?? this.componentElement;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('COMPONENT',\n                                                                                    {\n                                                                                        beginDrag: () =>\n                                                                                        {\n                                                                                            this.draggingSvc.setDragging(true);\n                                                                                            this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                                                            return {\n                                                                                                dragData: this.dragData,\n                                                                                            };\n                                                                                        },\n                                                                                        canDrag: () => !this.dragDisabled,\n                                                                                        endDrag: monitor =>\n                                                                                        {\n                                                                                            //dropped outside of any dropzone\n                                                                                            if(!monitor.didDrop())\n                                                                                            {\n                                                                                                this.designerElement.nativeElement.classList.remove('is-dragged');\n                                                                                            }\n                                                                                            //dropped into drop zone\n                                                                                            else\n                                                                                            {\n                                                                                                const item = monitor.getItem();\n                                                                                                const dropResult = monitor.getDropResult();\n\n                                                                                                if(!item)\n                                                                                                {\n                                                                                                    return;\n                                                                                                }\n\n                                                                                                item.dragData.index = dropResult.index;\n\n                                                                                                this.bus.setDropData(\n                                                                                                {\n                                                                                                    data: item.dragData,\n                                                                                                    id: dropResult.id,\n                                                                                                });\n                                                                                            }\n\n                                                                                            this.bus.setDropPlaceholderPreview(null);\n                                                                                            this.draggingSvc.setDragging(false);\n                                                                                        },\n                                                                                    },\n                                                                                    this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                        {\n                                                                                            canDrop: monitor => (this.canDrop || this.canDropAncestors()[0]) && monitor.isOver({shallow: true}),\n                                                                                            drop: monitor =>\n                                                                                            {\n                                                                                                const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                                                                return <LayoutDropResult>{\n                                                                                                    index,\n                                                                                                    id\n                                                                                                };\n                                                                                            },\n                                                                                            hover: monitor =>\n                                                                                            {\n                                                                                                if(monitor.isOver({shallow: true}) && monitor.canDrop())\n                                                                                                {\n                                                                                                    const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                                                                    if(isBlank(index) || isBlank(parentId))\n                                                                                                    {\n                                                                                                        return;\n                                                                                                    }\n\n                                                                                                    this.bus.setDropPlaceholderPreview(\n                                                                                                    {\n                                                                                                        index,\n                                                                                                        parentId,\n                                                                                                        placeholder:\n                                                                                                        {\n                                                                                                            height: 0,\n                                                                                                            width: 0\n                                                                                                        }\n                                                                                                    });\n                                                                                                }\n                                                                                            }\n                                                                                        }, this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input()\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCoreDesigner')\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input()\n    public dragDisabled: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected zone: NgZone,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.componentElement = null;\n\n                return;\n            }\n\n            this.componentElement = element;\n        }));\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm => this.dropMetadata.emit(itm.data)));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.placeholderPreviewElement?.remove();\n                                           this.placeholderPreviewElement = null;\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(this.showPlaceholderPreview));\n\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.dropzone, this.dropzoneElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors();\n\n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + this.getIndexIncrement(monitor, parentComponent.horizontal), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0].getBoundingClientRect();\n            const position = this.horizontal ? rect.x : rect.y;\n            const half = (this.horizontal ? rect.width : rect.height) / 2;\n\n            return position + half;\n        };\n\n        if(!this.containerElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = this.horizontal ? offset.x : offset.y;\n\n        for(let x = 0; x < this.containerElement.children.length; x++)\n        {\n            const child = this.containerElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, horizontal: boolean): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = horizontal ? offset.x - rect.x : offset.y - rect.y;\n        const half = horizontal ? rect.width / 2 : rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.containerElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.containerElement.insertBefore(this.placeholderPreviewElement, this.containerElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(id?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n\n        if(!component?.parent)\n        {\n            return [false, null, id];\n        }\n\n        if(component.parent.component.canDrop)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(component.parent.component.id);\n        }\n    }\n}",null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, Injector, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Logger, LOGGER, PositionModule} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {MetadataHistoryManager, SCOPE_ID} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {BodyRenderSADirective, CopyDesignerStylesSADirective, DesignerDropzoneSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndCoreDesignerDirective, LayoutDndCoreModule} from '../../modules';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    standalone: true,\n    imports:\n    [\n        //TODO: cleanup\n        CommonModule,\n        PositionModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutDesignerOverlayForSAComponent,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        LayoutComponentRendererSADirective,\n        DesignerDropzoneSADirective,\n        BodyRenderSADirective,\n        DndModule,\n        LayoutDndCoreModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this.layoutEditorMetadataManager.selectedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this.layoutEditorMetadataManager.highlightedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this.designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this.options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of designer dnd core directive\n     */\n    @ViewChild('dndCoreDesigner', {static: true})\n    public dndCoreDesigner!: DndCoreDesignerDirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this.parent || !!this.editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    public canDrop: boolean = false;\n\n    /**\n     * Indication whether drop list is horizontally oriented\n     */\n    public horizontal: boolean = false;\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this.options?.typeMetadata?.id ?? '';\n    }\n\n    /**\n     * Index of current layout designer in its parent\n     */\n    public index: number = 0;\n\n    /**\n     * Layout editor metadata\n     */\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Optional() @Inject(SCOPE_ID) protected scopeId?: string,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this.logger?.debug('LayoutDesignerSAComponent: Destroying component {@data}', {id: this.options?.typeMetadata.id});\n\n        this.initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        const parentId = dragData.parentId;\n        this.logger?.debug('LayoutDesignerSAComponent: Adding descendant {@data}', {id: dragData.metadata?.id, parent: this.options.typeMetadata.id});\n\n        if(!dragData.metadata)\n        {\n            this.logger?.warn('LayoutDesignerSAComponent: Missing metadata while adding descendant');\n\n            return;\n        }\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this.history.disable();\n            this.layoutEditorMetadataManager.getComponent(parentId)?.removeDescendant(dragData.metadata?.id);\n            this.history.enable();\n        }\n\n        this.editorMetadata?.addDescendant?.(dragData?.metadata, this.options.typeMetadata.options, dragData.index ?? 0);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    public removeDescendant(id: string): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.logger?.debug('LayoutDesignerSAComponent: Removing descendant {@data}', {id: this.options.typeMetadata.id, child: id});\n\n        this.editorMetadata?.removeDescendant?.(id, this.options.typeMetadata.options);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected showOverlay(event: Event): void\n    {\n        this.logger?.verbose('LayoutDesignerComponent: Showing overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.highlightComponent(this.options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected hideOverlay(event: Event): void\n    {\n        if(isPresent(this.parent))\n        {\n            return;\n        }\n\n        this.logger?.verbose('LayoutDesignerComponent: Hiding overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.selectComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected remove(): void\n    {\n        if(!this.parent || !this.options)\n        {\n            return;\n        }\n\n        this.parent.removeDescendant(this.options.typeMetadata.id);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        await super.onInit();\n\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.typeMetadata.scope = this.scopeId;\n\n        if(this.parent?.options)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.parent.options?.typeMetadata))\n            {\n                if(this.options.typeMetadata.id === child.metadata.id)\n                {\n                    this.index = child.index;\n\n                    break;\n                }\n            }\n        }\n\n        //TODO: optimize\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.selectedChange.subscribe(() => this.changeDetector.detectChanges()));\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.highlightedChange.subscribe(() => this.changeDetector.detectChanges()));\n\n        this.editorMetadata = await this.metadataExtractor.extractMetadata(this.options.typeMetadata);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.layoutEditorMetadataManager.registerLayoutDesignerComponent(this, this.options.typeMetadata.id, this.parent?.options?.typeMetadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.horizontal = this.editorMetadata?.isHorizontalDrop?.(this.options.typeMetadata.options) ?? false;\n    }\n}","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCorePreviewComponent} from '../components';\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewTemplateDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {Func} from '../types/functions';\r\nimport {isFunction} from '../utils/lang';\r\n\r\n/**\r\n * Binds function to this, object instance where is defined, it is importat to place it in correct order with other decorators, usually should be first\r\n */\r\nexport function BindThis(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor): TypedPropertyDescriptor<Func<any, any>>\r\n{\r\n    const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n    if(!isFunction(originalValue))\r\n    {\r\n        throw new Error(`Unable to apply @BindThis decorator to '${propertyKey.toString()}', it is not a method.`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get(this: unknown): Func\r\n        {\r\n            const bound: Func = originalValue.bind(this);\r\n\r\n            Object.defineProperty(this,\r\n                                  propertyKey,\r\n                                  {\r\n                                      value: bound,\r\n                                      configurable: true,\r\n                                      writable: true\r\n                                  });\r\n\r\n            return bound;\r\n        }\r\n    };\r\n}"],"names":["PositionModule","DesignerMinDimensionSADirective","constructor","active","initSubscriptions","Subscription","minHeight","minWidth","horizontal","canDrop","editorMetadata","ngOnInit","this","observer","MutationObserver","changes","change","target","HTMLElement","updatedDimensions","add","layoutComponentRendererDirective","componentElementChange","subscribe","element","init","disconnect","ngOnChanges","nameof","ngOnDestroy","unsubscribe","getChildrenContainer","style","observe","childList","nodesArray","childNodes","forEach","node","push","contentsLength","filter","itm","nodeName","length","children","item","classList","contains","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","_element","_metadataExtractor","metadata","_metadata","value","_copyDesignerStyles","applyDesignerStyles","extractMetadata","options","nativeElement","i0","BodyRenderSADirective","template","viewContainer","document","view","createEmbeddedView","rootNodes","body","appendChild","remove","destroy","DOCUMENT","LayoutDesignerOverlayForSAComponent","_changeDetector","_observer","detectChanges","_htmlElement","componentRef","hostView","attributeFilter","PositionToDirective","position","offset","autoUpdate","flip","EventEmitter","done","source","ɵSource","ElementRef","placement","ɵPlacement","isString","PositionPlacement","isPresent","_applyPosition","dispose","placeElement","result","applyPositionResult","emit","POSITION","DndCoreDesignerDirective","dnd","designerElement","draggingSvc","manager","bus","zone","injector","placeholderDrop","dropTarget","drop","monitor","getItem","index","dropPlaceholderPreviewIndex","dragData","id","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","parentId","getDropCoordinates","isBlank","setDropPlaceholderPreview","placeholder","height","width","drag","dragSource","beginDrag","setDragging","canDrag","dragDisabled","endDrag","didDrop","dropResult","getDropResult","setDropData","data","dropzone","dropMetadata","connectDropToContainer","Error","getComponent","containerElement","componentElement","component","dropzoneElement","dropDataChange","pipe","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","showPlaceholderPreview","placeholderConnection","containerConnection","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","getIndexIncrement","getHalf","rect","getBoundingClientRect","x","y","getClientOffset","child","usedIndex","preview","createElement","connectDropToPlaceholder","insertBefore","runOutsideAngular","connectDropTarget","getComponentDef","parent","i1","__decorate","BindThis","LayoutDesignerSAComponent","LayoutComponentBase","changeDetector","metadataExtractor","layoutEditorMetadataManager","iteratorSvc","history","scopeId","logger","super","selected","selectedComponent","typeMetadata","highlighted","highlightedComponent","extensionsOptions","metaInfo","debug","unregisterLayoutDesignerComponent","addDescendant","disable","removeDescendant","enable","canDropMetadata","renderedType","markForCheck","getNewState","warn","showOverlay","event","verbose","name","preventDefault","stopPropagation","highlightComponent","hideOverlay","cancelHighlightedComponent","selectComponent","unselectComponent","onInit","scope","getChildrenIteratorFor","selectedChange","highlightedChange","registerLayoutDesignerComponent","onOptionsSet","isHorizontalDrop","LAYOUT_HISTORY_MANAGER","SCOPE_ID","LOGGER","CommonModule","i2","i3","DesignerDropzoneSADirective","DndModule","i4","LayoutDndCoreModule","i5","isDropZone","draggingChange","processDragValue","setTimeout","dragging","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","asObservable","next","_target","propertyKey","descriptor","originalValue","get","isFunction","toString","configurable","bound","bind","Object","defineProperty","writable"],"sourceRoot":""}