{"version":3,"file":"5790.client.chunk.95f3ad821513d06b7744.js","mappings":"oXAMO,MAAMA,EAA8B,e,EAAA,G,EAA6D,mBAAY,WAAW,mEAAgDC,+BAAgC,E,+KAAA,kBAApK,mCCQpC,IAAMC,EAAN,MAwBQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EAEzBF,KAAKG,YACT,CAUAC,YAAYC,GAHL,KAAAC,QAAsB,CAAC,EAK1BN,KAAKO,wBAA0BF,EAASG,IAAIC,EAAAA,GAC5CT,KAAKU,0BAA4BL,EAASG,IAAIG,EAAAA,EAClD,CAOOC,YAAYC,GAEf,IAAGC,EAAAA,EAAAA,GAAyB,aAAcD,GAEnCb,KAAKD,kBAAkBgB,WAAWC,OACrC,CACI,MAAMC,EAAKjB,KAAKU,0BAA0BQ,MAAMlB,MAEhD,GAAGiB,EAEC,IAAI,MAAME,KAAYnB,KAAKD,iBAAiBgB,UAExCf,KAAKO,wBAAwBa,aAC7B,CACIC,YAAaJ,EACbK,WAAYH,EAASI,M,CAM7C,CAKOC,oBAEP,CAOUrB,aAEN,GAAGH,KAAKD,kBAAkBgB,WAAWC,OAEjC,IAAI,MAAMG,KAAYnB,KAAKD,iBAAiBgB,UAExCU,OAAOC,eAAe1B,KACAmB,EAASI,KACT,CACIf,IAAK,WAED,OAAOR,KAAK,IAAImB,EAASI,OAC7B,EACAI,IAAK,SAASzB,GAEVF,KAAK,IAAImB,EAASI,QAAUrB,GAC5B0B,EAAAA,EAAAA,IAAmB5B,KAAMmB,EAASI,KACtC,IAG1BE,OAAOC,eAAe1B,KACA,GAAGmB,EAASI,aACZ,CACIrB,MAAO2B,EAAAA,IAG9BV,EAASW,WAERC,EAAAA,EAAAA,IAAmB/B,KAAMmB,EAASI,KAIlD,GAzHSzB,GAAgB,UAF5BkC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBrC,IAA+B,6BA4C9BsC,EAAAA,KA3CbpC,GCZb,S","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/trigger/trigger.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/trigger/trigger.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/trigger/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Trigger relations metadata loader\n */\nexport const TriggerRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/trigger.relationsMetadata')).TriggerRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, PureRelationsComponent, RelationsChangeDetector, RelationsComponent, RelationsComponentManager} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\nimport {NEVER} from 'rxjs';\n\nimport {TriggerRelationsMetadataLoader} from './trigger.metadata';\nimport {TriggerRelationsOptions} from './trigger.options';\n\n/**\n * Trigger relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(TriggerRelationsMetadataLoader)\nexport class TriggerRelations implements RelationsComponent<TriggerRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: TriggerRelationsOptions|undefined|null;\n\n    /**\n     * Current relations change detector\n     */\n    protected relationsChangeDetector: RelationsChangeDetector;\n\n    /**\n     * Current relations component manager\n     */\n    protected relationsComponentManager: RelationsComponentManager;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): TriggerRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: TriggerRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Trigger object\n     */\n    public trigger: VoidObject = {};\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.relationsChangeDetector = injector.get(RelationsChangeDetector);\n        this.relationsComponentManager = injector.get(RelationsComponentManager);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TriggerRelations>('trigger') in changes)\n        {\n            if(this.relationsOptions?.endpoints?.length)\n            {\n                const id = this.relationsComponentManager.getId(this);\n\n                if(id)\n                {\n                    for(const property of this.relationsOptions.endpoints)\n                    {\n                        this.relationsChangeDetector.markForCheck(\n                        {\n                            componentId: id,\n                            outputName: property.name,\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions?.endpoints?.length)\n        {\n            for(const property of this.relationsOptions.endpoints)\n            {\n                Object.defineProperty(this,\n                                      property.name,\n                                      {\n                                          get: function()\n                                          {\n                                              return this[`ɵ${property.name}`];\n                                          },\n                                          set: function(value:any)\n                                          {\n                                              this[`ɵ${property.name}`] = value;\n                                              defineAssignedProp(this, property.name);\n                                          }\n                                      });\n\n                Object.defineProperty(this,\n                                      `${property.name}Change`,\n                                      {\n                                          value: NEVER,\n                                      });\n\n                if(property.skipInit)\n                {\n                    defineSkipInitProp(this, property.name);\n                }\n            }\n        }\n    }\n}","import {TriggerRelations} from './trigger.relations';\n\nexport default TriggerRelations;"],"names":["TriggerRelationsMetadataLoader","TriggerRelationsEditorMetadata","TriggerRelations","relationsOptions","this","ɵRelationsOptions","value","initialize","constructor","injector","trigger","relationsChangeDetector","get","RelationsChangeDetector","relationsComponentManager","RelationsComponentManager","ngOnChanges","changes","nameof","endpoints","length","id","getId","property","markForCheck","componentId","outputName","name","invalidateVisuals","Object","defineProperty","set","defineAssignedProp","NEVER","skipInit","defineSkipInitProp","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}