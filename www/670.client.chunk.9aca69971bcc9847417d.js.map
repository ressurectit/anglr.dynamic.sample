{"version":3,"file":"670.client.chunk.9aca69971bcc9847417d.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/customComponent.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/customComponent.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-relations/src/dynamicItems/customComponent/customComponent.component.html","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/customComponent.utils.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/extensions/customComponentData.extension.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/customComponent/type.ts","webpack://ng-universal-demo/../../../layout-relations/src/misc/extensions/placeholderData.extension.ts","webpack://ng-universal-demo/../../../layout-relations/src/services/placeholderHandler/placeholderHandler.service.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${input.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${input.name}`] = value;\n                                          defineAssignedProp(this, input.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(input.defaultValue !== undefined)\n            {\n                (this as Dictionary)[input.name] = input.defaultValue;\n            }\n            \n            if(input.skipInit)\n            {\n                defineSkipInitProp(this, input.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n            this.customComponent[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${output.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${output.name}`] = value;\n                                          defineAssignedProp(this, output.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(output.defaultValue !== undefined)\n            {\n                (this as Dictionary)[output.name] = output.defaultValue;\n            }\n\n            if(output.skipInit)\n            {\n                defineSkipInitProp(this.customComponent, output.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentComponentOptions} from './customComponent.options';\n\n/**\n * Custom component layout metadata loader\n */\nexport const CustomComponentLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<CustomComponentComponentOptions>> = async () => new (await import('./metadata/customComponent.layoutMetadata')).CustomComponentLayoutEditorMetadata();\n\n/**\n * Custom component relations metadata loader\n */\nexport const CustomComponentRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/customComponent.relationsMetadata')).CustomComponentRelationsEditorMetadata();\n\n/**\n * Custom component layout designer type loader\n */\nexport const CustomComponentLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/customComponentDesigner.component')).CustomComponentDesignerSAComponent;\n","import {Component, ChangeDetectionStrategy, inject, SimpleChanges, FactoryProvider} from '@angular/core';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutComponentsIteratorService, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {extend, PromiseOr} from '@jscrpt/common';\n\nimport {CustomComponentComponentOptions, CustomComponentRelationsOptions} from './customComponent.options';\nimport {CustomComponentLayoutDesignerTypeLoader, CustomComponentLayoutMetadataLoader, CustomComponentRelationsMetadataLoader} from './customComponent.metadata';\nimport {ComponentInputsRelations} from '../componentInputs/componentInputs.relations';\nimport {ComponentOutputsRelations} from '../componentOutputs/componentOutputs.relations';\nimport {getInputs, getOutputs} from './customComponent.utils';\nimport {ComponentWithId} from '../../interfaces';\nimport {PlaceholderHandler} from '../../services/placeholderHandler/placeholderHandler.service';\n\n/**\n * Component used for displaying custom component\n */\n@Component(\n{\n    selector: 'custom-component',\n    templateUrl: 'customComponent.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: PlaceholderHandler,\n            useFactory: () =>\n            {\n                return new PlaceholderHandler(CustomComponentSAComponent, inject(CustomComponentSAComponent));\n            }\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<CustomComponentComponentOptions>(options => \n{\n    if(!options?.placeholderContainers)\n    {\n        return [];\n    }\n\n    const result: LayoutComponentMetadata[] = [];\n\n    for(const key in options.placeholderContainers)\n    {\n        if(options.placeholderContainers[key])\n        {\n            result.push(options.placeholderContainers[key]);\n        }\n    }\n\n    return result;\n})\n@LayoutEditorDesignerType(CustomComponentLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(CustomComponentRelationsMetadataLoader)\n@LayoutEditorMetadata(CustomComponentLayoutMetadataLoader)\nexport class CustomComponentSAComponent extends LayoutComponentBase<CustomComponentComponentOptions> implements LayoutComponent<CustomComponentComponentOptions>, RelationsComponent<CustomComponentRelationsOptions>, ComponentWithId\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    /**\n     * Parent relations processor instance\n     */\n    protected parentRelationsProcessor: RelationsProcessor|null = inject(RelationsProcessor, {skipSelf: true, optional: true});\n\n    /**\n     * Parent relations component manager\n     */\n    protected parentComponentManager: RelationsComponentManager|null = inject(RelationsComponentManager, {skipSelf: true, optional: true});\n\n    /**\n     * Service used for obtaining iterators that goes over all components in metadata\n     */\n    protected layoutMetadataIterator: LayoutComponentsIteratorService = inject(LayoutComponentsIteratorService);\n\n    /**\n     * Instance of inputs relations if it exists\n     */\n    protected inputsRelations: ComponentInputsRelations|null = null;\n\n    /**\n     * Instance of outputs relations if it exists\n     */\n    protected outputsRelations: ComponentOutputsRelations|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public id: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: CustomComponentRelationsOptions|undefined|null;\n\n    //######################### public methods #########################\n\n    /**\n     * Method that allows processing of custom component data\n     * @param _name - Name of custom component\n     */\n    public processCustomComponentData(_name: string): PromiseOr<void>\n    {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async afterInit(): Promise<void>\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        //get layout metadata and displays layout\n        this.metadata = await this.layoutMetadataStorage.getMetadata(this.options.name);\n\n        if(this.metadata)\n        {\n            const iterator = this.layoutMetadataIterator.getIteratorFor(this.metadata);\n\n            for await(const itm of iterator)\n            {\n                const overrideOpts = this.options.contentOptions?.[itm.metadata.id];\n\n                //overide options of internal components for custom component from outside\n                if(overrideOpts)\n                {\n                    extend(itm.metadata.options, overrideOpts);\n                }\n            }\n        }\n\n        let relations: RelationsNodeMetadata[]|null = null;\n\n        //gets and initialize inner relations of custom component\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            relations = await this.relationsMetadataStorage.getMetadata(this.options.name);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n\n        //if relations available initialize custom component inputs\n        if(relations)\n        {\n            const inputsMeta = getInputs(relations);\n\n            if(inputsMeta)\n            {\n                this.inputsRelations = new ComponentInputsRelations(this.injector);\n                this.inputsRelations.initInputs(inputsMeta, inputsMeta.id);\n            }\n\n            const outputsMeta = getOutputs(relations);\n\n            if(outputsMeta)\n            {\n                this.outputsRelations = new ComponentOutputsRelations(this.injector);\n                this.outputsRelations.initOutputs(outputsMeta, outputsMeta.id, this);\n            }\n        }\n\n        //initialize and register relations from outside world to this custom component\n        if(this.parentComponentManager && this.parentRelationsProcessor)\n        {\n            this.parentComponentManager.registerComponent(this.id, this);\n            await this.parentRelationsProcessor.initialized;\n            this.parentRelationsProcessor.updateRelations(this.id);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        this.inputsRelations?.ngOnChanges(changes);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.parentRelationsProcessor || !this.parentComponentManager)\n        {\n            return;\n        }\n\n        this.parentRelationsProcessor.destroyComponent(this.id);\n        this.parentComponentManager.unregisterComponent(this.id);\n    }\n}\n",null,"import {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs/componentInputs.options';\nimport {ComponentOutputsRelationsOptions} from '../componentOutputs/componentOutputs.options';\n\n//TODO: check if this is duplicit in output js bundle\n\n/**\n * Gets component inputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getInputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentInputs');\n}\n\n/**\n * Gets component outputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getOutputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentOutputs');\n}\n","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport type {CustomComponentSAComponent} from '../customComponent.component';\nimport {CustomComponentDataExtensionOptions} from '../customComponentExtensions.options';\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class CustomComponentDataExtension extends DynamicItemExtensionBase<CustomComponentDataExtensionOptions, CustomComponentSAComponent> implements DynamicItemExtension<CustomComponentDataExtensionOptions, CustomComponentSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            await this.instance.processCustomComponentData(this.metadata.name);\n        }\n    }\n}","// import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {IdSetterExtension} from '../../misc/extensions';\nimport {CustomComponentSAComponent} from './customComponent.component';\nimport {CustomComponentDataExtension} from './extensions';\n\nexport default CustomComponentSAComponent;\n\nexport const extensions = [ComponentStylingExtension, CustomComponentDataExtension, IdSetterExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Extension that sets id of component to instance of component\n */\nexport class IdSetterExtension extends DynamicItemExtensionBase<unknown, ComponentWithId> implements DynamicItemExtension<unknown, ComponentWithId>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {inject, Injector, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport type {CustomComponentSAComponent} from '../../dynamicItems/customComponent/customComponent.component';\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Service that handles storing, obtaining of placeholder configuration, also correct rendering of placeholder or placeholder container\n */\nexport class PlaceholderHandler<TOptions = unknown>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is this handler attached to placeholder or custom component\n     */\n    protected ɵisPlaceholder: boolean;\n\n    /**\n     * Indication whether is attached component in design mode\n     */\n    protected ɵdesignMode: boolean|undefined|null;\n\n    /**\n     * Id of attached component\n     */\n    protected ɵid: string|undefined|null;\n\n    /**\n     * Instance of parent placeholder handler\n     */\n    protected ɵparent: PlaceholderHandler<TOptions>|undefined|null = inject(PlaceholderHandler, {optional: true, skipSelf: true,});\n\n    /**\n     * Injector that is assigned with placeholder handler\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Gets id of attached component\n     */\n    protected get id(): string\n    {\n        return (this.ɵid ??= this.injector.get(this.componentWithIdType).id);\n    }\n\n    /**\n     * Gets indication whether is this handler attached to custom component\n     */\n    protected get isCustomComponent(): boolean\n    {\n        return !this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets indication whether is this handler attached to placeholder\n     */\n    protected get isPlaceholder(): boolean\n    {\n        return this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets nearest handler for custom component\n     */\n    protected get nearestCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets nearest handler for custom component that is in design mode\n     */\n    protected get nearestDesignCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent && handler.designMode)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets instance of parent placeholder handler\n     */\n    public get parent(): PlaceholderHandler<TOptions>|undefined|null\n    {\n        return this.ɵparent;\n    }\n\n    /**\n     * Gets indication whether is attached component in design mode\n     */\n    public get designMode(): boolean\n    {\n        return (this.ɵdesignMode ??= this.ɵisPlaceholder ? \n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {optional: true}) :\n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true,}));\n    }\n\n    /**\n     * Gets indication whether display placeholder container or just placeholder\n     */\n    public get placeholderContainer(): boolean\n    {\n        return !(!this.parent || (this.parent.isPlaceholder && this.parent.designMode));\n    }\n\n    /**\n     * Gets layout designer component transform function\n     */\n    public get layoutDesignerComponentTransform(): LayoutComponentTransform|null\n    {\n        //current transform\n        const transform = this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true});\n\n        //current or parent custom component transform\n        const result = transform ??\n            this.findRelatedCustomComponentHandler()?.injector?.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true}) ??\n            null;\n\n        return result;\n    }\n\n    /**\n     * Relations component manager instance that is used for placeholders\n     */\n    public get relationsComponentManager(): RelationsComponentManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsComponentManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations processor instance that is used for placeholders\n     */\n    public get relationsProcessor(): RelationsProcessor|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsProcessor, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations change detector instance that is used for placeholders\n     */\n    public get relationsChangeDetector(): RelationsChangeDetector|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsChangeDetector, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations manager instance that is used for placeholders\n     */\n    public get relationsManager(): RelationsManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    //######################### constructor #########################\n    constructor(protected componentWithIdType: Type<ComponentWithId>,\n                protected customComponent?: CustomComponentSAComponent,)\n    {\n        this.ɵisPlaceholder = !this.customComponent;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets options for placeholder using its id\n     * @param id - Id of placeholder for which are options obtained\n     */\n    public getOptions(id: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        //is placeholder\n        if(this.isPlaceholder)\n        {\n            if(!this.parent)\n            {\n                return null;\n            }\n\n            return this.parent.getOptions(id);\n        }\n\n        if(this.isCustomComponent && this.customComponent?.options?.placeholderContainers?.[id])\n        {\n            return this.customComponent.options.placeholderContainers[id];\n        }\n\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        return this.parent.getOptions(id);\n    }\n\n    /**\n     * Initialize options for placeholder container\n     */\n    public initOptions(): void\n    {\n        const custom = this.nearestDesignCustomComponent;\n\n        if(!custom?.designMode || !custom.customComponent)\n        {\n            this.logger.error('PlaceholderHandler: closes parent custom component should be in editation mode!');\n\n            return;\n        }\n\n        if(!custom.customComponent.options)\n        {\n            this.logger.error('PlaceholderHandler: missing custom component options!');\n\n            return;\n        }\n\n        //if options does not exists create new one\n        if(!custom.customComponent.options.placeholderContainers?.[this.id])\n        {\n            const containerId = `placeholderContainer-${custom.id}-${this.id}`;\n\n            custom.customComponent.options.placeholderContainers ??= {};\n            custom.customComponent.options.placeholderContainers[this.id] =\n            {\n                id: containerId,\n                name: 'placeholderContainer',\n                package: 'custom-components',\n                displayName: containerId,\n                options: {},\n            };\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Finds if there is any related handler with attached custom component\n     */\n    protected findRelatedCustomComponentHandler(): PlaceholderHandler|undefined|null\n    {\n        let placeholders = 0;\n        let customComponents = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler = this;\n\n        if(!handler.parent)\n        {\n            return null;\n        }\n\n        do\n        {\n            if(handler.parent.isCustomComponent && handler.parent.designMode)\n            {\n                if(placeholders == customComponents)\n                {\n                    return handler.parent;\n                }\n\n                return null;\n            }\n\n            if(handler.parent.isCustomComponent)\n            {\n                customComponents++;\n            }\n            else\n            {\n                placeholders++;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets handler, which is attached to custom component which owns this placeholder container\n     */\n    protected getParentCustomComponentHandler(): PlaceholderHandler<TOptions>|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler<TOptions> = this;\n\n        if(!handler.parent)\n        {\n            throw new Error('PlaceholderHandler: parent must be present to work with relations!');\n        }\n\n        do\n        {\n            //skip placeholder\n            if(handler.isPlaceholder)\n            {\n                continue;\n            }\n\n            if(handler.customComponent?.options?.placeholderContainers?.[this.id])\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        this.logger.error('PlaceholderHandler: unable to find owning custom component for {@id}', this.id);\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","ComponentInputsRelationsMetadataLoader","ComponentInputsRelationsEditorMetadata","ComponentInputsRelations","constructor","injector","relationsProcessor","this","get","RelationsProcessor","componentManager","RelationsComponentManager","id","ngOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","ngOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","input","relationsOptions","inputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","RelationsEditorMetadata","Injector","ComponentOutputsRelationsMetadataLoader","ComponentOutputsRelationsEditorMetadata","ComponentOutputsRelations","customComponent","initOutputs","outputRelations","output","outputs","CustomComponentLayoutMetadataLoader","CustomComponentLayoutEditorMetadata","CustomComponentRelationsMetadataLoader","CustomComponentRelationsEditorMetadata","CustomComponentLayoutDesignerTypeLoader","CustomComponentDesignerSAComponent","CustomComponentSAComponent","LayoutComponentBase","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","parentRelationsProcessor","skipSelf","parentComponentManager","layoutMetadataIterator","LayoutComponentsIteratorService","inputsRelations","outputsRelations","metadata","processCustomComponentData","_name","setId","afterInit","options","getMetadata","iterator","getIteratorFor","itm","overrideOpts","contentOptions","extend","relations","setRelations","inputsMeta","getInputs","outputsMeta","getOutputs","onChanges","onDestroy","RelationsChangeDetector","provide","PlaceholderHandler","useFactory","CustomComponentSAComponent_1","LayoutComponentRendererSADirective","DescendantsGetter","placeholderContainers","result","push","find","package","CustomComponentDataExtension","DynamicItemExtensionBase","onInit","instance","extensions","ComponentStylingExtension","IdSetterExtension","ɵid","componentWithIdType","isCustomComponent","ɵisPlaceholder","isPlaceholder","nearestCustomComponent","handler","parent","nearestDesignCustomComponent","designMode","ɵparent","ɵdesignMode","LAYOUT_COMPONENT_TRANSFORM","placeholderContainer","layoutDesignerComponentTransform","findRelatedCustomComponentHandler","relationsComponentManager","getParentCustomComponentHandler","relationsChangeDetector","logger","LOGGER","getOptions","initOptions","custom","containerId","displayName","error","placeholders","customComponents","Error","element","componentElement","extensionsOptions","changeDetector","destroyed","ext","destroy","ngOnInit","onOptionsSet","extension","initialize","nameof","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","detectChanges","_changes","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}