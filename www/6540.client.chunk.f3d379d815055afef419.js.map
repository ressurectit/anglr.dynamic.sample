{"version":3,"file":"6540.client.chunk.f3d379d815055afef419.js","mappings":"yUAMO,MAAMA,EAA4B,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAA8CC,6BAA8B,E,+KAAA,kBAAhK,mCCOlC,IAAMC,EAAN,MAcQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,EAEzBF,KAAKG,YACT,CAWAC,YAAsBC,GAAA,KAAAA,SAAAA,CAEtB,CAOOC,oBAEP,CAOUH,aAEN,GAAGH,KAAKD,kBAEDC,KAAKD,iBAAiBQ,WAAWC,OAEhC,IAAI,MAAMC,KAAQT,KAAKD,iBAAiBQ,WAEjCE,GAECC,OAAOC,eAAeX,KACAS,EACA,CACIG,IAAKV,IAEDF,KAAKa,eAALb,KAAKa,aAAiB,CAAC,GACtBb,KAAKa,aAA4BJ,GAAQP,EAC1CF,KAAKa,aAAe,IAAIb,KAAKa,aAAa,GAO5F,IA9CAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,kEA9BPjB,GAAc,UAF1BkB,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBrB,IAA6B,6BAmClBsB,EAAAA,KAlCvBpB,GCXb,S,mFCWM,SAAUiB,EAAcI,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbX,OAAOC,eAAeS,EACA,GAAGE,UACH,CACIC,IAAK,WAOD,OALIvB,KAAK,IAAIsB,aAETtB,KAAK,IAAIsB,WAAgB,IAAIE,EAAAA,GAG1BxB,KAAK,IAAIsB,UACpB,IAG1BZ,OAAOC,eAAeS,EACAE,EACA,CACIC,IAAK,WAED,OAAOvB,KAAK,IAAIsB,IACpB,EACAV,IAAK,SAASV,GAKV,GAHAF,KAAK,IAAIsB,KAAUpB,GACnBuB,EAAAA,EAAAA,IAAmBzB,KAAMsB,GAEtBH,GAASO,KAER1B,KAAK,GAAGsB,WAAcK,WAG1B,CACI,MAAMtB,EAAYL,KAA+B4B,WAEjD,IAAIvB,EAEA,OAGJ,MAAMwB,EAAmBxB,EAASkB,IAAIO,EAAAA,GAChCC,EAAiB1B,EAASkB,IAAIS,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAMlC,MAElC,IAAIiC,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYf,G,CAGxB,IAGvBH,GAASmB,WAERC,EAAAA,EAAAA,IAAmBnB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/merge/merge.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/merge/merge.relations.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/merge/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Merge relations metadata loader\n */\nexport const MergeRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/merge.relationsMetadata')).MergeRelationsEditorMetadata();\n","import {Injector} from '@angular/core';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {MergeRelationsMetadataLoader} from './merge.metadata';\nimport {MergeRelationsOptions} from './merge.options';\n\n/**\n * Merge relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(MergeRelationsMetadataLoader)\nexport class MergeRelations<TObj = unknown> implements RelationsComponent<MergeRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: MergeRelationsOptions|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): MergeRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: MergeRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Merged result object\n     */\n    @DynamicOutput()\n    public mergedObject: TObj|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.properties.length)\n            {\n                for(const name of this.relationsOptions.properties)\n                {\n                    if(name)\n                    {\n                        Object.defineProperty(this,\n                                              name,\n                                              {\n                                                  set: value =>\n                                                  {\n                                                      this.mergedObject ??= {} as TObj;\n                                                      (this.mergedObject as Dictionary)[name] = value;\n                                                      this.mergedObject = {...this.mergedObject};\n                                                  }\n                                              });\n                    }\n                }\n            }\n        }\n    }\n}","import {MergeRelations} from './merge.relations';\n\nexport default MergeRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["MergeRelationsMetadataLoader","MergeRelationsEditorMetadata","MergeRelations","relationsOptions","this","ɵRelationsOptions","value","initialize","constructor","injector","invalidateVisuals","properties","length","name","Object","defineProperty","set","mergedObject","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector","options","target","propertyKey","prop","get","Subject","defineAssignedProp","sync","next","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}