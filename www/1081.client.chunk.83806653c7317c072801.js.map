{"version":3,"file":"1081.client.chunk.83806653c7317c072801.js","mappings":"wIASO,MAAMA,EAAoG,CAACC,EAASC,KAEvHA,EAAMC,aAAeF,GAASE,cAAcC,YAAc,GAC1DF,EAAMG,WAAaJ,GAASI,YAAYD,YAAc,GACtDF,EAAMI,gBAAkBL,GAASK,iBAAiBF,YAAc,GAChEF,EAAMK,cAAgBN,GAASM,eAAeH,YAAc,EAAE,C,oOCN3D,MAAMI,EAAiC,e,EAAA,G,EAAyF,mBAAY,WAAW,iCAAmDC,kCAAmC,E,+KAAA,kBAAtM,mC,gFCA9C,iBAgBO,IAAMC,EAAN,cAAuCC,EAAAA,EAOvBC,eAEf,MAAMV,EAAQW,KAAKC,iBAAiBC,cAAcb,OAElDF,EAAAA,EAAAA,GAAqBa,KAAKZ,QAASC,EACvC,G,6DAZSQ,KAAwB,GAAxBA,EAAwB,E,qBAAxBA,EAAwB,iE,+GCxBqC,K,uEAAf,gBDkBnDM,EAAAA,GAAkC,oCAM7BN,GAAwB,UAFpCO,EAAAA,EAAAA,IAAiDhB,GAAWA,GAASiB,UAAY,CAACjB,EAAQiB,WAAa,MACvGC,EAAAA,EAAAA,GAAqBX,IACTE,GEtBb,S,kDCMM,SAAUS,EAAqBC,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,scCAM,MAAgBT,EAwBJW,cAEV,OAAOT,KAAKC,gBAChB,CAKcS,wBAEV,OAAOV,KAAKZ,OAChB,CAUAuB,YAAsBC,EACAX,EACAY,EAC4BC,GAH5B,KAAAF,eAAAA,EACA,KAAAX,iBAAAA,EACA,KAAAY,SAAAA,EAC4B,KAAAC,OAAAA,EAzCxC,KAAAC,WAA+C,GAK/C,KAAAC,aAAuB,EAKvB,KAAAC,WAAqB,CAiC/B,CAOOC,cAEH,IAAGlB,KAAKiB,UAAR,CAKAjB,KAAKiB,WAAY,EAEjB,IAAI,MAAME,KAAOnB,KAAKe,WAElBI,EAAIC,UAGRpB,KAAKqB,W,CACT,CAOaC,WAAQ,iCAEjB,GAAG,EAAKN,YAEJ,OAGJ,EAAKA,aAAc,EACnB,MAAMN,EAAoB,EAAKA,kBAK/B,SAHM,EAAKa,eACL,EAAKxB,eAERW,EAEC,IAAI,MAAMc,KAAa,EAAKT,iBAElBS,EAAUC,WAAW,EAAKZ,SAAU,EAAKJ,QAAS,SAI1D,EAAKiB,WAAY,GArBN,EAsBrB,CAKaC,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACU,EAAK7B,eAEX,MAAMW,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMc,KAAa,EAAKT,iBAElBS,EAAUM,cAAcpB,GAItC,IAAI,EAAKM,YAEL,aAGE,EAAKe,iB,QAGRH,GAAQC,EAAAA,EAAAA,GAAsC,aAEjDG,EAAAA,EAAAA,IAAcJ,IAEd,EAAKK,UAAUL,EAClB,GA/B0C,EAgC/C,CAKOM,mBAAmBnB,GAEtBf,KAAKe,WAAaA,CACtB,CAKOoB,oBAEHnC,KAAKY,eAAewB,eACxB,CAOUb,SAEV,CAKUG,YAEV,CAKUK,kBAEV,CAMUE,UAAUI,GAEpB,CAKUtC,eAEV,CAKUsB,YAEV,E,iCAvMkBvB,GAAmB,gCAgDjBwC,EAAAA,GAAM,K,kBAhDRxC,EAAmB,gB","sources":["webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.utils.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.metadata.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/gridPanelCell/type.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {Action} from '@jscrpt/common';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Applies CSS styles of element applying grid panel css grid coordinates\n * @param options - Options for grid panel cell component\n * @param styles - CSS styles of element that should be updated\n */\nexport const applyGridCoordinates: Action<[GridPanelCellComponentOptions|undefined|null, CSSStyleDeclaration]> = (options, style) =>\n{\n    style.gridRowStart = options?.gridRowStart?.toString() ?? '';\n    style.gridRowEnd = options?.gridRowEnd?.toString() ?? '';\n    style.gridColumnStart = options?.gridColumnStart?.toString() ?? '';\n    style.gridColumnEnd = options?.gridColumnEnd?.toString() ?? '';\n};","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Grid panel cell layout metadata loader\n */\nexport const GridPanelCellLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelCellComponentOptions>> = async () => new (await import('./metadata/gridPanelCell.layoutMetadata')).GridPanelCellLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\nimport {GridPanelCellLayoutMetadataLoader} from './gridPanelCell.metadata';\nimport {applyGridCoordinates} from './gridPanelCell.utils';\n\n/**\n * Component used for displaying grid panel cell\n */\n@Component(\n{\n    selector: 'grid-panel-cell',\n    templateUrl: 'gridPanelCell.component.html',\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelCellComponentOptions>(options => options?.component ? [options.component] : [])\n@LayoutEditorMetadata(GridPanelCellLayoutMetadataLoader)\nexport class GridPanelCellSAComponent extends LayoutComponentBase<GridPanelCellComponentOptions> implements LayoutComponent<GridPanelCellComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        const style = this.componentElement.nativeElement.style;\n        \n        applyGridCoordinates(this.options, style);\n    }\n}",null,"import {GridPanelCellSAComponent} from './gridPanelCell.component';\n\nexport default GridPanelCellSAComponent;","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["applyGridCoordinates","options","style","gridRowStart","toString","gridRowEnd","gridColumnStart","gridColumnEnd","GridPanelCellLayoutMetadataLoader","GridPanelCellLayoutEditorMetadata","GridPanelCellSAComponent","LayoutComponentBase","onOptionsSet","this","componentElement","nativeElement","LayoutComponentRendererSADirective","DescendantsGetter","component","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","element","extensionsOptions","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER"],"sourceRoot":""}