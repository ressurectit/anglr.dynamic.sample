{"version":3,"file":"6086.client.chunk.61e17c336f81bce8a317.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/TinyMCE.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/editor/Events.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/utils/Utils.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/utils/ScriptLoader.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/editor/editor.component.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/editor/editor.module.ts","webpack://ng-universal-demo/../../../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html"],"sourcesContent":["/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getTinymce = () => {\n  const w = typeof window !== 'undefined' ? (window as any) : undefined;\n  return w && w.tinymce ? w.tinymce : null;\n};\n\nexport { getTinymce };\n","import { Output, EventEmitter, Directive } from '@angular/core';\nimport { Editor as TinyMCEEditor } from 'tinymce';\n\nexport interface EventObj<T> {\n  event: T;\n  editor: TinyMCEEditor;\n}\n\n@Directive()\nexport class Events {\n  @Output() public onBeforePaste: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onBlur: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onClick: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onContextMenu: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onCopy: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onCut: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onDblclick: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onDrag: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragDrop: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragEnd: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragGesture: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragOver: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDrop: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onFocus: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onFocusIn: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onFocusOut: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onKeyDown: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onKeyPress: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onKeyUp: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onMouseDown: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseEnter: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseLeave: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseMove: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseOut: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseOver: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseUp: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onPaste: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onSelectionChange: EventEmitter<EventObj<Event>> = new EventEmitter();\n  @Output() public onActivate: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onAddUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeAddUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeExecCommand: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeGetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeRenderUI: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeSetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onChange: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onClearUndos: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onDeactivate: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onDirty: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onExecCommand: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onGetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onHide: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onInit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onInitNgModel: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onLoadContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onNodeChange: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPostProcess: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPostRender: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPreInit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPreProcess: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onProgressState: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onRedo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onRemove: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onReset: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onResizeEditor: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSaveContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSetAttrib: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectResizeStart: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectResized: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectSelected: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onShow: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSubmit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onVisualAid: EventEmitter<EventObj<any>> = new EventEmitter();\n}\n\nexport const validEvents: (keyof Events)[] = [\n  'onActivate',\n  'onAddUndo',\n  'onBeforeAddUndo',\n  'onBeforeExecCommand',\n  'onBeforeGetContent',\n  'onBeforeRenderUI',\n  'onBeforeSetContent',\n  'onBeforePaste',\n  'onBlur',\n  'onChange',\n  'onClearUndos',\n  'onClick',\n  'onContextMenu',\n  'onCopy',\n  'onCut',\n  'onDblclick',\n  'onDeactivate',\n  'onDirty',\n  'onDrag',\n  'onDragDrop',\n  'onDragEnd',\n  'onDragGesture',\n  'onDragOver',\n  'onDrop',\n  'onExecCommand',\n  'onFocus',\n  'onFocusIn',\n  'onFocusOut',\n  'onGetContent',\n  'onHide',\n  'onInit',\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n  'onLoadContent',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n  'onNodeChange',\n  'onObjectResizeStart',\n  'onObjectResized',\n  'onObjectSelected',\n  'onPaste',\n  'onPostProcess',\n  'onPostRender',\n  'onPreProcess',\n  'onProgressState',\n  'onRedo',\n  'onRemove',\n  'onReset',\n  'onResizeEditor',\n  'onSaveContent',\n  'onSelectionChange',\n  'onSetAttrib',\n  'onSetContent',\n  'onShow',\n  'onSubmit',\n  'onUndo',\n  'onVisualAid'\n];\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { EventEmitter } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { HasEventTargetAddRemove } from 'rxjs/internal/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { EditorComponent } from '../editor/editor.component';\nimport { validEvents, Events } from '../editor/Events';\n\n// Caretaker note: `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n// will be invoked upon subscription and teardown.\nconst listenTinyMCEEvent = (\n  editor: any,\n  eventName: string,\n  destroy$: Subject<void>\n) => fromEvent(editor as HasEventTargetAddRemove<unknown> | ArrayLike<HasEventTargetAddRemove<unknown>>, eventName).pipe(takeUntil(destroy$));\n\nconst bindHandlers = (ctx: EditorComponent, editor: any, destroy$: Subject<void>): void => {\n  const allowedEvents = getValidEvents(ctx);\n  allowedEvents.forEach((eventName) => {\n    const eventEmitter: EventEmitter<any> = ctx[eventName];\n\n    listenTinyMCEEvent(editor, eventName.substring(2), destroy$).subscribe((event) => {\n      // Caretaker note: `ngZone.run()` runs change detection since it notifies the forked Angular zone that it's\n      // being re-entered. We don't want to run `ApplicationRef.tick()` if anyone listens to the specific event\n      // within the template. E.g. if the `onSelectionChange` is not listened within the template like:\n      // `<editor (onSelectionChange)=\"...\"></editor>`\n      // then its `observers` array will be empty, and we won't run \"dead\" change detection.\n      if (eventEmitter.observers.length > 0) {\n        ctx.ngZone.run(() => eventEmitter.emit({ event, editor }));\n      }\n    });\n  });\n};\n\nconst getValidEvents = (ctx: EditorComponent): (keyof Events)[] => {\n  const ignoredEvents = parseStringProperty(ctx.ignoreEvents, []);\n  const allowedEvents = parseStringProperty(ctx.allowedEvents, validEvents).filter(\n    (event) => validEvents.includes(event as (keyof Events)) && !ignoredEvents.includes(event)) as (keyof Events)[];\n  return allowedEvents;\n};\n\nconst parseStringProperty = (property: string | string[] | undefined, defaultValue: (keyof Events)[]): string[] => {\n  if ( typeof property === 'string') {\n    return property.split(',').map((value) => value.trim());\n  }\n  if ( Array.isArray(property)) {\n    return property;\n  }\n  return defaultValue;\n};\n\nlet unique = 0;\n\nconst uuid = (prefix: string): string => {\n  const date = new Date();\n  const time = date.getTime();\n  const random = Math.floor(Math.random() * 1000000000);\n\n  unique++;\n\n  return prefix + '_' + random + unique + String(time);\n};\n\nconst isTextarea = (element?: Element): element is HTMLTextAreaElement => typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n\nconst normalizePluginArray = (plugins?: string | string[]): string[] => {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nconst mergePlugins = (initPlugins: string | string[], inputPlugins?: string | string[]) =>\n  normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop: (...args: any[]) => void = () => { };\n\nconst isNullOrUndefined = (value: any): value is null | undefined => value === null || value === undefined;\n\nexport {\n  listenTinyMCEEvent,\n  bindHandlers,\n  uuid,\n  isTextarea,\n  normalizePluginArray,\n  mergePlugins,\n  noop,\n  isNullOrUndefined\n};\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { defer, fromEvent, Observable, OperatorFunction } from 'rxjs';\nimport { mapTo, shareReplay, take } from 'rxjs/operators';\n\nexport interface IStateObj {\n  script$: Observable<void> | null;\n}\n\nconst createState = (): IStateObj => ({\n  script$: null,\n});\n\ninterface ScriptLoader {\n  load: (doc: Document, url: string) => Observable<void>;\n  reinitialize: () => void;\n}\n\nconst CreateScriptLoader = (): ScriptLoader => {\n  let state = createState();\n\n  const load = (doc: Document, url: string) => (\n    state.script$ ||\n    // Caretaker note: the `script$` is a multicast observable since it's piped with `shareReplay`,\n    // so if there're multiple editor components simultaneously on the page, they'll subscribe to the internal\n    // `ReplaySubject`. The script will be loaded only once, and `ReplaySubject` will cache the result.\n    (state.script$ = defer(() => {\n      const scriptTag = doc.createElement('script');\n      scriptTag.referrerPolicy = 'origin';\n      scriptTag.type = 'application/javascript';\n      scriptTag.src = url;\n      doc.head.appendChild(scriptTag);\n      return fromEvent(scriptTag, 'load').pipe(take(1), mapTo(undefined) as OperatorFunction<Event, undefined>);\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true })))\n  );\n\n  // Only to be used by tests.\n  const reinitialize = () => {\n    state = createState();\n  };\n\n  return {\n    load,\n    reinitialize,\n  };\n};\n\nconst ScriptLoader = CreateScriptLoader();\n\nexport { ScriptLoader };\n","/* eslint-disable @typescript-eslint/no-parameter-properties */\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, forwardRef, Inject, Input, NgZone, OnDestroy, PLATFORM_ID, InjectionToken, Optional } from '@angular/core';\nimport { FormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { getTinymce } from '../TinyMCE';\nimport { listenTinyMCEEvent, bindHandlers, isTextarea, mergePlugins, uuid, noop, isNullOrUndefined } from '../utils/Utils';\nimport { EventObj, Events } from './Events';\nimport { ScriptLoader } from '../utils/ScriptLoader';\nimport { Editor as TinyMCEEditor, TinyMCE } from 'tinymce';\n\ntype EditorOptions = Parameters<TinyMCE['init']>[0];\n\nexport const TINYMCE_SCRIPT_SRC = new InjectionToken<string>('TINYMCE_SCRIPT_SRC');\n\nconst EDITOR_COMPONENT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => EditorComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'editor',\n  template: '<ng-template></ng-template>',\n  styles: [ ':host { display: block; }' ],\n  providers: [ EDITOR_COMPONENT_VALUE_ACCESSOR ],\n  standalone: true,\n  imports: [ CommonModule, FormsModule ]\n})\nexport class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {\n\n  @Input() public cloudChannel = '6';\n  @Input() public apiKey = 'no-api-key';\n  @Input() public init: EditorOptions | undefined;\n  @Input() public id = '';\n  @Input() public initialValue: string | undefined;\n  @Input() public outputFormat: 'html' | 'text' | undefined;\n  @Input() public inline: boolean | undefined;\n  @Input() public tagName: string | undefined;\n  @Input() public plugins: string | undefined;\n  @Input() public toolbar: string | string[] | undefined;\n  @Input() public modelEvents = 'change input undo redo';\n  @Input() public allowedEvents: string | string[] | undefined;\n  @Input() public ignoreEvents: string | string[] | undefined;\n  @Input()\n  public set disabled(val) {\n    this._disabled = val;\n    if (this._editor && this._editor.initialized) {\n      if (typeof this._editor.mode?.set === 'function') {\n        this._editor.mode.set(val ? 'readonly' : 'design');\n      } else {\n        this._editor.setMode(val ? 'readonly' : 'design');\n      }\n    }\n  }\n\n  public get disabled() {\n    return this._disabled;\n  }\n\n  public get editor() {\n    return this._editor;\n  }\n\n  public ngZone: NgZone;\n\n  private _elementRef: ElementRef;\n  private _element: HTMLElement | undefined;\n  private _disabled: boolean | undefined;\n  private _editor: TinyMCEEditor | undefined;\n\n  private onTouchedCallback = noop;\n  private onChangeCallback: any;\n\n  private destroy$ = new Subject<void>();\n\n  public constructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() @Inject(TINYMCE_SCRIPT_SRC) private tinymceScriptSrc?: string\n  ) {\n    super();\n    this._elementRef = elementRef;\n    this.ngZone = ngZone;\n  }\n\n  public writeValue(value: string | null): void {\n    if (this._editor && this._editor.initialized) {\n      this._editor.setContent(isNullOrUndefined(value) ? '' : value);\n    } else {\n      this.initialValue = value === null ? undefined : value;\n    }\n  }\n\n  public registerOnChange(fn: (_: any) => void): void {\n    this.onChangeCallback = fn;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  public ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.id = this.id || uuid('tiny-angular');\n      this.inline = this.inline !== undefined ? this.inline !== false : !!(this.init?.inline);\n      this.createElement();\n      if (getTinymce() !== null) {\n        this.initialise();\n      } else if (this._element && this._element.ownerDocument) {\n        // Caretaker note: the component might be destroyed before the script is loaded and its code is executed.\n        // This will lead to runtime exceptions if `initialise` will be called when the component has been destroyed.\n        ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc())\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(this.initialise);\n      }\n    }\n  }\n\n  public ngOnDestroy() {\n    this.destroy$.next();\n\n    if (getTinymce() !== null) {\n      getTinymce().remove(this._editor);\n    }\n  }\n\n  public createElement() {\n    const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n    this._element = document.createElement(this.inline ? tagName : 'textarea');\n    if (this._element) {\n      if (document.getElementById(this.id)) {\n        /* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n        console.warn(`TinyMCE-Angular: an element with id [${this.id}] already exists. Editors with duplicate Id will not be able to mount`);\n      }\n      this._element.id = this.id;\n      if (isTextarea(this._element)) {\n        this._element.style.visibility = 'hidden';\n      }\n      this._elementRef.nativeElement.appendChild(this._element);\n    }\n  }\n\n  public initialise = (): void => {\n    const finalInit: EditorOptions = {\n      ...this.init,\n      selector: undefined,\n      target: this._element,\n      inline: this.inline,\n      readonly: this.disabled,\n      plugins: mergePlugins((this.init && this.init.plugins) as string, this.plugins),\n      toolbar: this.toolbar || (this.init && this.init.toolbar),\n      setup: (editor: TinyMCEEditor) => {\n        this._editor = editor;\n\n        listenTinyMCEEvent(editor, 'init', this.destroy$).subscribe(() => {\n          this.initEditor(editor);\n        });\n\n        bindHandlers(this, editor, this.destroy$);\n\n        if (this.init && typeof this.init.setup === 'function') {\n          this.init.setup(editor);\n        }\n      }\n    };\n\n    if (isTextarea(this._element)) {\n      this._element.style.visibility = '';\n    }\n\n    this.ngZone.runOutsideAngular(() => {\n      getTinymce().init(finalInit);\n    });\n  };\n\n  private getScriptSrc() {\n    return isNullOrUndefined(this.tinymceScriptSrc) ?\n      `https://cdn.tiny.cloud/1/${this.apiKey}/tinymce/${this.cloudChannel}/tinymce.min.js` :\n      this.tinymceScriptSrc;\n  }\n\n  private initEditor(editor: TinyMCEEditor) {\n    listenTinyMCEEvent(editor, 'blur', this.destroy$).subscribe(() => {\n      this.ngZone.run(() => this.onTouchedCallback());\n    });\n\n    listenTinyMCEEvent(editor, this.modelEvents, this.destroy$).subscribe(() => {\n      this.ngZone.run(() => this.emitOnChange(editor));\n    });\n\n    if (typeof this.initialValue === 'string') {\n      this.ngZone.run(() => {\n        editor.setContent(this.initialValue as string);\n        if (editor.getContent() !== this.initialValue) {\n          this.emitOnChange(editor);\n        }\n        if (this.onInitNgModel !== undefined) {\n          this.onInitNgModel.emit(editor as unknown as EventObj<any>);\n        }\n      });\n    }\n  }\n\n  private emitOnChange(editor: TinyMCEEditor) {\n    if (this.onChangeCallback) {\n      this.onChangeCallback(editor.getContent({ format: this.outputFormat }));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { EditorComponent } from './editor.component';\n\n@NgModule({\n  imports: [ EditorComponent ],\n  exports: [ EditorComponent ]\n})\nexport class EditorModule {}\n","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}"],"names":["getTinymce","w","window","undefined","tinymce","Events","constructor","onBeforePaste","EventEmitter","onBlur","onClick","onContextMenu","onCopy","onCut","onDblclick","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onFocus","onFocusIn","onFocusOut","onKeyDown","onKeyPress","onKeyUp","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onPaste","onSelectionChange","onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onChange","onClearUndos","onDeactivate","onDirty","onExecCommand","onGetContent","onHide","onInit","onInitNgModel","onLoadContent","onNodeChange","onPostProcess","onPostRender","onPreInit","onPreProcess","onProgressState","onRedo","onRemove","onReset","onResizeEditor","onSaveContent","onSetAttrib","onObjectResizeStart","onObjectResized","onObjectSelected","onSetContent","onShow","onSubmit","onUndo","onVisualAid","validEvents","listenTinyMCEEvent","editor","eventName","destroy$","fromEvent","pipe","takeUntil","parseStringProperty","property","defaultValue","split","map","value","trim","Array","isArray","unique","isTextarea","element","tagName","toLowerCase","normalizePluginArray","plugins","noop","isNullOrUndefined","ScriptLoader","state","script$","load","doc","url","defer","scriptTag","createElement","referrerPolicy","type","src","head","appendChild","take","mapTo","shareReplay","bufferSize","refCount","reinitialize","CreateScriptLoader","TINYMCE_SCRIPT_SRC","InjectionToken","EDITOR_COMPONENT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","EditorComponent","multi","elementRef","ngZone","platformId","tinymceScriptSrc","super","cloudChannel","apiKey","id","modelEvents","onTouchedCallback","Subject","initialise","finalInit","this","init","selector","target","_element","inline","readonly","disabled","initPlugins","inputPlugins","concat","toolbar","setup","_editor","subscribe","initEditor","ctx","ignoredEvents","ignoreEvents","allowedEvents","filter","event","includes","getValidEvents","forEach","eventEmitter","substring","observers","length","run","emit","bindHandlers","style","visibility","runOutsideAngular","_elementRef","val","_disabled","initialized","mode","set","setMode","writeValue","setContent","initialValue","registerOnChange","fn","onChangeCallback","registerOnTouched","setDisabledState","isDisabled","ngAfterViewInit","isPlatformBrowser","prefix","time","Date","getTime","random","Math","floor","String","uuid","ownerDocument","getScriptSrc","ngOnDestroy","next","remove","document","getElementById","console","warn","nativeElement","emitOnChange","getContent","format","outputFormat","PLATFORM_ID","CommonModule","FormsModule","EditorModule","RichTextBlockEditorDialogSAComponent","data","dialog","content","TITLED_DIALOG_DATA","MatDialogModule"],"sourceRoot":""}