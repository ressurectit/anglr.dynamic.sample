{"version":3,"file":"6336.client.chunk.76b40a002d9f9964eaab.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../src/cdk/collections/unique-selection-dispatcher.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/components/formComponentBase/formComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/enums.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/tokens.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/services/formDynamicModuleRelationsProvider/formDynamicModuleRelationsProvider.service.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/providers.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/form/src/misc/utils.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/components/layoutComponentBase/layoutComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/extensions/componentStyling/componentStyling.extension.js","webpack://ng-universal-demo/../../../src/material/radio/radio-module.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/radio/radio.metadata.js","webpack://ng-universal-demo/../../../src/material/radio/radio.ts","webpack://ng-universal-demo/../src/material/radio/radio.html","webpack://ng-universal-demo/../../../src/material/radio/radio.html","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/radio/radio.component.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/material-components/src/dynamicItems/radio/type.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/decorators/dynamicOutput/dynamicOutput.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/extensions/relationsRegistration/relationsRegistration.extension.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/misc/dynamicItemExtensionBase.js"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","import { __decorate, __metadata } from \"tslib\";\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional } from '@angular/core';\nimport { AbstractControl, FormControl, Validators } from '@angular/forms';\nimport { LayoutComponentBase } from '@anglr/dynamic/layout';\nimport { LOGGER } from '@anglr/common';\nimport { DynamicOutput } from '@anglr/dynamic/relations';\nimport { FORM_COMPONENT_CONTROL } from '../../misc/tokens';\nimport { FormComponentControlType } from '../../misc/enums';\nimport { getControlForType, getFormControl } from '../../misc/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\n/**\n * Base component for form component\n */\n\nexport class FormComponentBase extends LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(_changeDetector, _element, _injector, _parentControl, _logger) {\n    super(_changeDetector, _element, _injector, _logger);\n    this._parentControl = _parentControl; //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n\n    this.control = new FormControl();\n  } //######################### public properties - inputs #########################\n\n  /**\n   * Form component value\n   */\n\n\n  set value(value) {\n    const oldValue = this.value;\n    this.valueOutput = value;\n\n    if (value !== oldValue) {\n      this.control?.patchValue(value);\n    }\n  }\n\n  get value() {\n    return this.valueOutput;\n  }\n  /**\n   * Indication whether form component is required\n   */\n\n\n  set required(value) {\n    this._required = value;\n\n    if (value === true) {\n      this.control?.addValidators(Validators.required);\n      return;\n    }\n\n    this.control?.removeValidators(Validators.required);\n  }\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * Indication whether form component is disabled\n   */\n\n\n  set disabled(value) {\n    this._disabled = value;\n\n    if (value === true) {\n      this.control?.disable();\n      return;\n    }\n\n    this.control?.enable();\n  }\n\n  get disabled() {\n    return this._disabled;\n  } //######################### protected methods - _onOptionsSet implementation #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsSet() {\n    if (!this.options) {\n      return;\n    }\n\n    this.controlSubscription?.unsubscribe();\n    this.controlSubscription = null;\n    this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value);\n\n    this._registerValidations();\n\n    this.controlSubscription = this.control?.valueChanges?.subscribe(value => {\n      this.valueOutput = value;\n    });\n  } //######################### protected methods #########################\n\n  /**\n   * Registers component-specific validators\n   */\n\n\n  _registerValidations() {} //######################### private methods #########################\n\n  /**\n   * Gets form component control for control name\n   * @param controlName Form component control name\n   * @param parentControl Parent form control\n   * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n   * @param initValue Initial value for control\n   * @returns Specified type of control\n   */\n\n\n  _getFormControl(controlName, parentControl, defaultControlType = FormComponentControlType.FormControl, initValue) {\n    let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n    if (!control) {\n      this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {\n        name: controlName\n      });\n      control = getControlForType(defaultControlType, initValue);\n    }\n\n    if (this.required) {\n      control.addValidators(Validators.required);\n    }\n\n    if (this.disabled) {\n      control.disable();\n    }\n\n    return control;\n  }\n\n}\n\nFormComponentBase.ɵfac = function FormComponentBase_Factory(t) {\n  return new (t || FormComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(FORM_COMPONENT_CONTROL, 8), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nFormComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FormComponentBase,\n  inputs: {\n    value: \"value\",\n    required: \"required\",\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n__decorate([DynamicOutput(), __metadata(\"design:type\", Object)], FormComponentBase.prototype, \"valueOutput\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i1.AbstractControl,\n      decorators: [{\n        type: Inject,\n        args: [FORM_COMPONENT_CONTROL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    valueOutput: []\n  });\n})();","export var FormComponentControlType;\n\n(function (FormComponentControlType) {\n  FormComponentControlType[\"FormControl\"] = \"FormControl\";\n  FormComponentControlType[\"FormArray\"] = \"FormArray\";\n  FormComponentControlType[\"FormGroup\"] = \"FormGroup\";\n})(FormComponentControlType || (FormComponentControlType = {}));","import { InjectionToken } from '@angular/core';\n/**\n * Injection token for form component control\n */\n\nexport const FORM_COMPONENT_CONTROL = new InjectionToken('FORM_COMPONENT_CONTROL');","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Dynamic module items provider for form module items\n */\n\nexport class FormDynamicModuleItemsProvider {\n  //######################### constructor #########################\n  constructor(_logger) {\n    this._logger = _logger;\n  } //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  tryToGet(source) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      switch (source.package) {\n        case 'form-components':\n          {\n            try {\n              _this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {\n                name: source.name,\n                package: source.package\n              });\n              const dynamicItemModule = yield import(`../../../../form/src/dynamicItems/${source.name}/type`);\n              return dynamicItemModule;\n            } catch (e) {\n              _this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {\n                name: source.name,\n                package: source.package\n              });\n            }\n\n            break;\n          }\n\n        default:\n          {\n            return null;\n          }\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nFormDynamicModuleItemsProvider.ɵfac = function FormDynamicModuleItemsProvider_Factory(t) {\n  return new (t || FormDynamicModuleItemsProvider)(i0.ɵɵinject(LOGGER, 8));\n};\n\nFormDynamicModuleItemsProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormDynamicModuleItemsProvider,\n  factory: FormDynamicModuleItemsProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormDynamicModuleItemsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Dynamic module types provider, for form types\n */\n\nexport class FormDynamicModuleTypesProvider {\n  //######################### constructor #########################\n  constructor(_logger) {\n    this._logger = _logger;\n  } //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  tryToGet(source) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {\n          moduleName: source.package\n        });\n\n        switch (source.package) {\n          case 'form-components':\n            return yield import('../../../../form/src/types');\n\n          default:\n            return null;\n        }\n      } catch (e) {\n        _this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {\n          moduleName: source.package\n        });\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nFormDynamicModuleTypesProvider.ɵfac = function FormDynamicModuleTypesProvider_Factory(t) {\n  return new (t || FormDynamicModuleTypesProvider)(i0.ɵɵinject(LOGGER, 8));\n};\n\nFormDynamicModuleTypesProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormDynamicModuleTypesProvider,\n  factory: FormDynamicModuleTypesProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormDynamicModuleTypesProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Dynamic module relations provider for form module types\n */\n\nexport class FormDynamicModuleRelationsProvider {\n  //######################### constructor #########################\n  constructor(_logger) {\n    this._logger = _logger;\n  } //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  tryToGet(source) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this._logger?.debug('FormDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {\n          moduleName: source.package\n        });\n\n        switch (source.package) {\n          case 'form-components':\n            return yield import('../../../../form/src/relations');\n\n          default:\n            return null;\n        }\n      } catch (e) {\n        _this._logger?.debug('FormDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {\n          moduleName: source.package\n        });\n      }\n\n      return null;\n    })();\n  }\n\n}\n\nFormDynamicModuleRelationsProvider.ɵfac = function FormDynamicModuleRelationsProvider_Factory(t) {\n  return new (t || FormDynamicModuleRelationsProvider)(i0.ɵɵinject(LOGGER, 8));\n};\n\nFormDynamicModuleRelationsProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormDynamicModuleRelationsProvider,\n  factory: FormDynamicModuleRelationsProvider.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormDynamicModuleRelationsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { LAYOUT_COMPONENTS_MODULE_PROVIDERS } from '@anglr/dynamic/layout';\nimport { LAYOUT_MODULE_TYPES_PROVIDERS } from '@anglr/dynamic/layout-editor';\nimport { RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS } from '@anglr/dynamic/relations-editor';\nimport { FormDynamicModuleItemsProvider, FormDynamicModuleRelationsProvider, FormDynamicModuleTypesProvider } from '../services';\nimport { RELATIONS_COMPONENTS_MODULE_PROVIDERS } from '../../../relations/src';\n/**\n * Provider for form components providers\n */\n\nexport const FORM_COMPONENTS_PROVIDER = {\n  provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n  useClass: FormDynamicModuleItemsProvider,\n  multi: true\n};\n/**\n * Provider for form dynamic layout module types provider\n */\n\nexport const FORM_MODULE_TYPES_PROVIDER = {\n  provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n  useClass: FormDynamicModuleTypesProvider,\n  multi: true\n};\n/**\n * Provider for form dynamic relations types provider\n */\n\nexport const FORM_RELATIONS_MODULE_TYPES_PROVIDER = {\n  provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n  useClass: FormDynamicModuleRelationsProvider,\n  multi: true\n};\n/**\n * Provider for form package relations nodes provider\n */\n\nexport const FORM_RELATIONS_NODES_PROVIDER = {\n  provide: RELATIONS_NODES_PROVIDERS,\n  useClass: FormDynamicModuleItemsProvider,\n  multi: true\n};\n/**\n * Provider for form package relations components provider\n */\n\nexport const FORM_RELATIONS_COMPONENTS_PROVIDER = {\n  provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n  useClass: FormDynamicModuleItemsProvider,\n  multi: true\n};","import { FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { provideStaticPackageSource } from '@anglr/dynamic';\nimport { FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, FORM_RELATIONS_COMPONENTS_PROVIDER, FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER } from './providers';\nimport { FormComponentControlType } from './enums';\n/**\n * Providers for layout form subpackage\n */\n\nexport function provideFormLayout() {\n  return [FORM_COMPONENTS_PROVIDER];\n}\n/**\n * Providers for layout form subpackage\n */\n\nexport function provideFormRelations() {\n  return [FORM_RELATIONS_COMPONENTS_PROVIDER];\n}\n/**\n * Default providers for form subpackage layout\n */\n\nexport function provideFormLayoutEditor() {\n  return [FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, provideStaticPackageSource('form-components')];\n}\n/**\n * Default providers for form subpackage relations\n */\n\nexport function provideFormRelationsEditor() {\n  return [FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER, provideStaticPackageSource('form-components')];\n}\n/**\n * Providers for layout relations editor form subpackage\n */\n\nexport function provideFormLayoutRelationsEditor() {\n  return [...provideFormRelationsEditor(), ...provideFormLayout()];\n}\n/**\n * Providers for layout relations form subpackage\n */\n\nexport function provideFormLayoutRelations() {\n  return [...provideFormLayout(), ...provideFormRelations()];\n}\nexport function getFormControl(controlName, parentControl, defaultControlType = FormComponentControlType.FormControl, defaultValue) {\n  if (!parentControl || !controlName) {\n    return getControlForType(defaultControlType, defaultValue);\n  }\n\n  const control = parentControl.get(controlName);\n  return control ?? getControlForType(defaultControlType, defaultValue);\n}\nexport function getControlForType(type, defaultValue) {\n  //TODO fix default value for form array\n  switch (type) {\n    case FormComponentControlType.FormArray:\n      return new FormArray([]);\n\n    case FormComponentControlType.FormGroup:\n      return new FormGroup(defaultValue ?? {});\n\n    default:\n      return new FormControl(defaultValue);\n  }\n}","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\n\nexport function LayoutEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'layoutEditorMetadata');\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport { isEmptyObject, nameof } from '@jscrpt/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Base component for layout component\n */\n\nexport class LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(changeDetector, componentElement, injector, logger) {\n    this.changeDetector = changeDetector;\n    this.componentElement = componentElement;\n    this.injector = injector;\n    this.logger = logger; //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n\n    this.extensions = [];\n    /**\n     * Indication whether initialization was already done\n     */\n\n    this.initialized = false;\n    /**\n     * Indication whether was component destroyed\n     */\n\n    this.destroyed = false;\n  } //######################### protected properties #########################\n\n  /**\n   * Gets element that is used within extension\n   */\n\n\n  get element() {\n    return this.componentElement;\n  }\n  /**\n   * Gets options that are used within extension\n   */\n\n\n  get extensionsOptions() {\n    return this.options;\n  } //######################### public methods - implementation of OnDestroy #########################\n\n  /**\n   * Called when component is destroyed\n   */\n\n\n  ngOnDestroy() {\n    if (this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n\n    for (const ext of this.extensions) {\n      ext.destroy();\n    }\n\n    this.onDestroy();\n  } //######################### public methods - implementation of LayoutComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.initialized) {\n        return;\n      }\n\n      _this.initialized = true;\n      const extensionsOptions = _this.extensionsOptions;\n      yield _this.onInit();\n      yield _this.onOptionsSet();\n\n      if (extensionsOptions) {\n        for (const extension of _this.extensions) {\n          yield extension.initialize(_this.injector, _this.element, _this);\n        }\n      }\n\n      yield _this.afterInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnChanges(changes) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      //options has changed\n      if (nameof('options') in changes) {\n        yield _this2.onOptionsSet();\n        const extensionsOptions = _this2.extensionsOptions; //set options in extensions\n\n        if (extensionsOptions) {\n          for (const extension of _this2.extensions) {\n            yield extension.optionsChange(extensionsOptions);\n          }\n        }\n\n        if (!_this2.initialized) {\n          return;\n        }\n\n        yield _this2.onOptionsChange();\n      }\n\n      delete changes[nameof('options')];\n\n      if (!isEmptyObject(changes)) {\n        _this2.onChanges(changes);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  registerExtensions(extensions) {\n    this.extensions = extensions;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this.changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialzation of component, options are already set\n   */\n\n\n  onInit() {}\n  /**\n   * Called right after initialization finished, including extesions\n   */\n\n\n  afterInit() {}\n  /**\n   * Called on change of options, after initialization\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Occurs when some property changes on component\n   * @param _changes - Changes that occured on component\n   */\n\n\n  onChanges(_changes) {}\n  /**\n   * Called everytime options are set, after initialization and later\n   */\n\n\n  onOptionsSet() {}\n  /**\n   * Called when component is being destroyed\n   */\n\n\n  onDestroy() {}\n\n}\n\nLayoutComponentBase.ɵfac = function LayoutComponentBase_Factory(t) {\n  return new (t || LayoutComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nLayoutComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LayoutComponentBase,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { isPresent } from '@jscrpt/common';\n/**\n * Extension that applies common component styling to component\n */\n\nexport class ComponentStylingExtension extends DynamicItemExtensionBase {\n  //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n  onInit() {\n    this._applyStyling();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onOptionsChange() {\n    this._applyStyling();\n  } //######################### protected methods #########################\n\n  /**\n   * Applies component styling to element\n   */\n\n\n  _applyStyling() {\n    const options = this.options;\n    const style = this.element?.nativeElement.style;\n\n    if (this.element) {\n      if (isPresent(this.lastCssClass)) {\n        for (const cssClass of this.lastCssClass.split(' ')) {\n          if (cssClass) {\n            this.element.nativeElement.classList.remove(cssClass);\n          }\n        }\n      }\n\n      this.lastCssClass = options?.cssClass;\n\n      if (options?.cssClass) {\n        for (const cssClass of options.cssClass.split(' ')) {\n          if (cssClass) {\n            this.element?.nativeElement.classList.add(cssClass);\n          }\n        }\n      }\n    }\n\n    if (isPresent(style)) {\n      if (options?.margin) {\n        if (isPresent(options.margin.bottom)) {\n          style.marginBottom = options.margin.bottom;\n        }\n\n        if (isPresent(options.margin.right)) {\n          style.marginRight = options.margin.right;\n        }\n\n        if (isPresent(options.margin.top)) {\n          style.marginTop = options.margin.top;\n        }\n\n        if (isPresent(options.margin.left)) {\n          style.marginLeft = options.margin.left;\n        }\n      }\n\n      if (options?.padding) {\n        if (isPresent(options.padding.bottom)) {\n          style.paddingBottom = options.padding.bottom;\n        }\n\n        if (isPresent(options.padding.right)) {\n          style.paddingRight = options.padding.right;\n        }\n\n        if (isPresent(options.padding.top)) {\n          style.paddingTop = options.padding.top;\n        }\n\n        if (isPresent(options.padding.left)) {\n          style.paddingLeft = options.padding.left;\n        }\n      }\n\n      if (options?.textStyling) {\n        if (isPresent(options.textStyling.fontSize)) {\n          style.fontSize = options.textStyling.fontSize;\n        }\n\n        if (isPresent(options.textStyling.fontWeight)) {\n          style.fontWeight = options.textStyling.fontWeight.toString();\n        }\n      }\n    }\n  }\n\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Material radio layout metadata loader\n */\nexport const MaterialRadioLayoutMetadataLoader = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/radio.layoutMetadata')).MaterialRadioLayoutEditorMetadata();\n  });\n\n  return function MaterialRadioLayoutMetadataLoader() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Material radio relations metadata loader\n */\n\nexport const MaterialRadioRelationsMetadataLoader = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    return new (yield import('./metadata/radio.relationsMetadata')).MaterialRadioRelationsEditorMetadata();\n  });\n\n  return function MaterialRadioRelationsMetadataLoader() {\n    return _ref2.apply(this, arguments);\n  };\n}();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  HasTabIndex,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken<MatRadioDefaultOptions>(\n  'mat-radio-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent',\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true,\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: _MatRadioButtonBase,\n    /** The value of the MatRadioButton. */\n    public value: any,\n  ) {}\n}\n\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_RADIO_GROUP = new InjectionToken<_MatRadioGroupBase<_MatRadioButtonBase>>(\n  'MatRadioGroup',\n);\n\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatRadioGroupBase<T extends _MatRadioButtonBase>\n  implements AfterContentInit, ControlValueAccessor\n{\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: T | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  abstract _radios: QueryList<T>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n  set selected(selected: T | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [\n    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n    {provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup},\n  ],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup extends _MatRadioGroupBase<MatRadioButton> {\n  @ContentChildren(forwardRef(() => MatRadioButton), {descendants: true})\n  _radios: QueryList<MatRadioButton>;\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nabstract class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  abstract disabled: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatRadioButtonBase\n  extends _MatRadioButtonMixinBase\n  implements OnInit, AfterViewInit, DoCheck, OnDestroy, CanDisableRipple, HasTabIndex\n{\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: BooleanInput) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: BooleanInput) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    // As per Material design specifications the selection control radio should use the accent color\n    // palette by default. https://material.io/guidelines/components/selection-controls.html\n    return (\n      this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      (this._providerOverride && this._providerOverride.color) ||\n      'accent'\n    );\n  }\n  set color(newValue: ThemePalette) {\n    this._color = newValue;\n  }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** Previous value of the input's tabindex. */\n  private _previousTabIndex: number | undefined;\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Whether animations are disabled. */\n  _noopAnimations: boolean;\n\n  constructor(\n    radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>,\n    elementRef: ElementRef,\n    protected _changeDetector: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    private _radioDispatcher: UniqueSelectionDispatcher,\n    animationMode?: string,\n    private _providerOverride?: MatRadioDefaultOptions,\n    tabIndex?: string,\n  ) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n    this._noopAnimations = animationMode === 'NoopAnimations';\n\n    if (tabIndex) {\n      this.tabIndex = coerceNumberProperty(tabIndex, 0);\n    }\n\n    this._removeUniqueSelectionListener = _radioDispatcher.listen((id: string, name: string) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions, origin?: FocusOrigin): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      }\n\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngDoCheck(): void {\n    this._updateTabIndex();\n  }\n\n  ngAfterViewInit() {\n    this._updateTabIndex();\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Triggered when the radio button receives an interaction from the user. */\n  _onInputInteraction(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    if (!this.checked && !this.disabled) {\n      const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n      this._emitChangeEvent();\n\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n        if (groupValueChanged) {\n          this.radioGroup._emitChangeEvent();\n        }\n      }\n    }\n  }\n\n  /** Sets the disabled state and marks for check if a change occurred. */\n  protected _setDisabled(value: boolean) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Gets the tabindex for the underlying input element. */\n  private _updateTabIndex() {\n    const group = this.radioGroup;\n    let value: number;\n\n    // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n    // necessary, because the browser handles the tab order for inputs inside a group automatically,\n    // but we need an explicitly higher tabindex for the selected button in order for things like\n    // the focus trap to pick it up correctly.\n    if (!group || !group.selected || this.disabled) {\n      value = this.tabIndex;\n    } else {\n      value = group.selected === this ? this.tabIndex : -1;\n    }\n\n    if (value !== this._previousTabIndex) {\n      // We have to set the tabindex directly on the DOM node, because it depends on\n      // the selected state which is prone to \"changed after checked errors\".\n      const input: HTMLInputElement | undefined = this._inputElement?.nativeElement;\n\n      if (input) {\n        input.setAttribute('tabindex', value + '');\n        this._previousTabIndex = value;\n      }\n    }\n  }\n}\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_noopAnimations',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be removed since it causes some a11y issues (see #21266).\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonBase {\n  constructor(\n    @Optional() @Inject(MAT_RADIO_GROUP) radioGroup: MatRadioGroup,\n    elementRef: ElementRef,\n    changeDetector: ChangeDetectorRef,\n    focusMonitor: FocusMonitor,\n    radioDispatcher: UniqueSelectionDispatcher,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n    providerOverride?: MatRadioDefaultOptions,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super(\n      radioGroup,\n      elementRef,\n      changeDetector,\n      focusMonitor,\n      radioDispatcher,\n      animationMode,\n      providerOverride,\n      tabIndex,\n    );\n  }\n}\n",null,"<!-- TODO(jelbourn): render the radio on either side of the content -->\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\n<label [attr.for]=\"inputId\" class=\"mat-radio-label\" #label>\n  <!-- The actual 'radio' part of the control. -->\n  <span class=\"mat-radio-container\">\n    <span class=\"mat-radio-outer-circle\"></span>\n    <span class=\"mat-radio-inner-circle\"></span>\n    <input #input class=\"mat-radio-input\" type=\"radio\"\n        [id]=\"inputId\"\n        [checked]=\"checked\"\n        [disabled]=\"disabled\"\n        [attr.name]=\"name\"\n        [attr.value]=\"value\"\n        [required]=\"required\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.aria-labelledby]=\"ariaLabelledby\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        (change)=\"_onInputInteraction($event)\"\n        (click)=\"_onInputClick($event)\">\n\n    <!-- The ripple comes after the input so that we can target it with a CSS\n         sibling selector when the input is focused. -->\n    <span mat-ripple class=\"mat-radio-ripple mat-focus-indicator\"\n         [matRippleTrigger]=\"label\"\n         [matRippleDisabled]=\"_isRippleDisabled()\"\n         [matRippleCentered]=\"true\"\n         [matRippleRadius]=\"20\"\n         [matRippleAnimation]=\"{enterDuration: _noopAnimations ? 0 : 150}\">\n\n      <span class=\"mat-ripple-element mat-radio-persistent-ripple\"></span>\n    </span>\n  </span>\n\n  <!-- The label content for radio control. -->\n  <span class=\"mat-radio-label-content\" [class.mat-radio-label-before]=\"labelPosition == 'before'\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n","import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { LayoutEditorMetadata } from '@anglr/dynamic/layout-editor';\nimport { CastPipesModule, HostDisplayBlockStyle } from '@anglr/common';\nimport { FormPipesModule } from '@anglr/common/forms';\nimport { FormComponentBase, FormComponentControlSAPipe } from '@anglr/dynamic/form';\nimport { RelationsEditorMetadata } from '@anglr/dynamic/relations-editor';\nimport { MaterialRadioLayoutMetadataLoader, MaterialRadioRelationsMetadataLoader } from './radio.metadata';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@anglr/common/forms\";\nimport * as i2 from \"@anglr/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/radio\";\n/**\n * Component used for displaying material radio\n */\n\nlet MaterialRadioSAComponent = class MaterialRadioSAComponent extends FormComponentBase {};\n\nMaterialRadioSAComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵMaterialRadioSAComponent_BaseFactory;\n  return function MaterialRadioSAComponent_Factory(t) {\n    return (ɵMaterialRadioSAComponent_BaseFactory || (ɵMaterialRadioSAComponent_BaseFactory = i0.ɵɵgetInheritedFactory(MaterialRadioSAComponent)))(t || MaterialRadioSAComponent);\n  };\n}();\n\nMaterialRadioSAComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MaterialRadioSAComponent,\n  selectors: [[\"material-radio\"]],\n  standalone: true,\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n  decls: 5,\n  vars: 6,\n  consts: [[3, \"formControl\"], [\"value\", \"1\"]],\n  template: function MaterialRadioSAComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-radio-group\", 0);\n      i0.ɵɵpipe(1, \"asRequired\");\n      i0.ɵɵpipe(2, \"asFormControl\");\n      i0.ɵɵelementStart(3, \"mat-radio-button\", 1);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formControl\", i0.ɵɵpipeBind1(1, 2, i0.ɵɵpipeBind1(2, 4, ctx.control)));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.options == null ? null : ctx.options.options);\n    }\n  },\n  dependencies: [FormPipesModule, i1.AsFormControlPipe, CastPipesModule, i2.AsRequiredTypePipe, ReactiveFormsModule, i3.NgControlStatus, i3.FormControlDirective, MatRadioModule, i4.MatRadioGroup, i4.MatRadioButton],\n  styles: [\"[_nghost-%COMP%]{display: block;}\"],\n  changeDetection: 0\n});\nMaterialRadioSAComponent = __decorate([RelationsEditorMetadata(MaterialRadioRelationsMetadataLoader), LayoutEditorMetadata(MaterialRadioLayoutMetadataLoader)], MaterialRadioSAComponent);\nexport { MaterialRadioSAComponent };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MaterialRadioSAComponent, [{\n    type: Component,\n    args: [{\n      selector: 'material-radio',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      imports: [FormPipesModule, CastPipesModule, FormComponentControlSAPipe, ReactiveFormsModule, MatRadioModule],\n      template: \"<mat-radio-group [formControl]=\\\"control|asFormControl|asRequired\\\">\\n    <mat-radio-button value=\\\"1\\\">{{options?.options}}</mat-radio-button>\\n</mat-radio-group>\",\n      styles: [\":host{display: block;}\"]\n    }]\n  }], null, null);\n})();","import { ComponentStylingExtension } from '@anglr/dynamic/layout';\nimport { RelationsRegistrationExtension } from '@anglr/dynamic/relations';\nimport { MaterialRadioSAComponent } from './radio.component';\nexport default MaterialRadioSAComponent;\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\n\nexport function RelationsEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'relationsEditorMetadata');\n}","import { Subject } from 'rxjs';\n/**\n * Creates dynamic output for property\n */\n\nexport function DynamicOutput() {\n  return function (target, propertyKey) {\n    const prop = propertyKey;\n    Object.defineProperty(target, `${prop}Change`, {\n      get: function () {\n        if (!this[`ɵ${prop}Change`]) {\n          this[`ɵ${prop}Change`] = new Subject();\n        }\n\n        return this[`ɵ${prop}Change`];\n      }\n    });\n    Object.defineProperty(target, prop, {\n      get: function () {\n        return this[`ɵ${prop}`];\n      },\n      set: function (value) {\n        this[`ɵ${prop}`] = value;\n        this[`${prop}Change`].next();\n      }\n    });\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { RelationsComponentManager, RelationsProcessor } from '../../services';\n/**\n * Extension that allows registration of component for relations\n */\n\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase {\n  constructor() {\n    //######################### protected properties #########################\n    super(...arguments);\n    /**\n     * Instance of relations processor\n     */\n\n    this.relationsProcessor = null;\n    /**\n     * Instance of component manager\n     */\n\n    this.componentManager = null;\n  } //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.injector || !_this.metadata || !_this.instance) {\n        return;\n      }\n\n      _this.relationsProcessor ?? (_this.relationsProcessor = _this.injector.get(RelationsProcessor, null));\n      _this.componentManager ?? (_this.componentManager = _this.injector.get(RelationsComponentManager, null));\n\n      if (!_this.relationsProcessor || !_this.componentManager) {\n        return;\n      }\n\n      _this.componentManager.registerComponent(_this.metadata.id, _this.instance);\n\n      yield _this.relationsProcessor.initialized;\n\n      _this.relationsProcessor.updateRelations(_this.metadata.id);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onDestroy() {\n    if (!this.relationsProcessor || !this.componentManager || !this.metadata) {\n      return;\n    }\n\n    this.relationsProcessor.destroyComponent(this.metadata.id);\n    this.componentManager.unregisterComponent(this.metadata.id);\n  }\n\n}","//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata(metadataLoader, propertyName) {\n  if (ngDesignerMetadata) {\n    return function (target) {\n      target[propertyName] = metadataLoader();\n      return target;\n    };\n  }\n\n  return function (target) {\n    return target;\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Dynamic item extension base class\n */\nexport class DynamicItemExtensionBase {\n  //######################### constructor #########################\n  constructor(metadata) {\n    this.metadata = metadata;\n    /**\n     * Indication whether was extension initialized\n     */\n\n    this.initialized = false;\n  } //######################### public methods - implementation of DynamicItemExtension #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize(injector, element, instance) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.initialized = true;\n      _this.injector = injector;\n      _this.element = element;\n      _this.instance = instance;\n      yield _this.onInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  optionsChange(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.options = options;\n\n      if (!_this2.initialized) {\n        return;\n      }\n\n      yield _this2.onOptionsChange();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  destroy() {\n    this.onDestroy();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialization of component\n   */\n\n\n  onInit() {}\n  /**\n   * Called on change of options of component\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Called on destruction of component\n   */\n\n\n  onDestroy() {}\n\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","push","filter","registered","ngOnDestroy","FormComponentBase","_changeDetector","_element","_injector","_parentControl","super","control","oldValue","valueOutput","patchValue","required","_required","removeValidators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","logger","t","type","inputs","features","Object","prototype","FormComponentControlType","FORM_COMPONENT_CONTROL","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","FormDynamicModuleItemsProvider","tryToGet","source","fn","_this","package","debug","e","self","args","arguments","apply","err","undefined","token","factory","FormDynamicModuleTypesProvider","moduleName","FormDynamicModuleRelationsProvider","provide","useClass","multi","FORM_MODULE_TYPES_PROVIDER","provideFormLayoutEditor","getFormControl","defaultValue","get","getControlForType","LayoutEditorMetadata","metadataLoader","_asyncToGenerator","LayoutComponentBase","changeDetector","componentElement","injector","extensions","initialized","destroyed","element","extensionsOptions","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","optionsChange","onOptionsChange","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","ComponentStylingExtension","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MatRadioModule","MatRippleModule","MatCommonModule","MaterialRadioLayoutMetadataLoader","_ref","MaterialRadioLayoutEditorMetadata","MaterialRadioRelationsMetadataLoader","_ref2","MaterialRadioRelationsEditorMetadata","MAT_RADIO_DEFAULT_OPTIONS","InjectionToken","providedIn","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","MatRadioChange","MAT_RADIO_GROUP","_MatRadioGroupBase","_value","_name","_selected","_isInitialized","_labelPosition","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","coerceBooleanProperty","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","registerOnTouched","setDisabledState","isDisabled","i0","MatRadioButton","_MatRadioButtonMixinBase","mixinDisableRipple","mixinTabIndex","_elementRef","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","animationMode","_providerOverride","tabIndex","_uniqueId","_checked","_removeUniqueSelectionListener","_noopAnimations","coerceNumberProperty","newCheckedState","_setDisabled","_color","inputId","focus","origin","focusVia","_inputElement","ngDoCheck","_updateTabIndex","ngAfterViewInit","monitor","focusOrigin","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputInteraction","groupValueChanged","group","_previousTabIndex","input","setAttribute","focusMonitor","radioDispatcher","providerOverride","ANIMATION_MODULE_TYPE","i3","MaterialRadioSAComponent","selectors","standalone","decls","vars","consts","template","rf","ctx","dependencies","i","styles","changeDetection","RelationsEditorMetadata","DynamicOutput","target","propertyKey","prop","defineProperty","set","next","RelationsRegistrationExtension","relationsProcessor","componentManager","metadata","instance","registerComponent","updateRelations","destroyComponent","unregisterComponent","DynamicClassMetadata","propertyName","DynamicItemExtensionBase"],"sourceRoot":""}