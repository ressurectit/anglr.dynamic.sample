{"version":3,"file":"3930.client.chunk.a0ee9f058e4d9a833486.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/misc/enums.ts","webpack://ng-universal-demo/../../../src/paginator/paginator.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/paging/basic/basicPaging.component.html","webpack://ng-universal-demo/../../../src/plugins/paging/basic/basicPaging.component.ts","webpack://ng-universal-demo/../../../src/plugins/paging/basic/basicPaging.component.html","webpack://ng-universal-demo/../../../src/plugins/dataLoader/async/asyncDataLoader.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/bodyContentRendererAbstract.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/contentRenderer/table/body/basic/tableBodyContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/body/basic/tableBodyContentRenderer.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/body/basic/tableBodyContentRenderer.component.html","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/contentRenderer/table/header/basic/tableHeaderContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/header/basic/tableHeaderContentRenderer.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/headerContentRendererAbstract.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/header/basic/tableHeaderContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/contentRendererAbstract.component.ts","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/tableContentRenderer.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/contentRenderer/table/tableContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/contentRenderer/table/tableContentRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/metadataSelector/no/noMetadataSelector.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/plugins/noDataRenderer/simple/simpleNoDataRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/noDataRenderer/simple/simpleNoDataRenderer.component.ts","webpack://ng-universal-demo/../../../src/plugins/noDataRenderer/simple/simpleNoDataRenderer.component.html","webpack://ng-universal-demo/../../../src/plugins/rowSelector/types.ts","webpack://ng-universal-demo/../../../src/plugins/rowSelector/basic/basicRowSelector.component.ts","webpack://ng-universal-demo/../../../src/plugins/gridInitializer/no/noGridInitializer.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/grid/src/components/grid/grid.component.html","webpack://ng-universal-demo/../../../src/components/grid/grid.component.ts","webpack://ng-universal-demo/../../../src/components/grid/grid.component.html","webpack://ng-universal-demo/../../../src/components/metadata/basicTable/basicTableColumn.context.ts","webpack://ng-universal-demo/../../../src/components/metadata/basicTable/basicTableColumn.component.ts","webpack://ng-universal-demo/../../../src/components/metadata/basicTable/basicTableMetadataGatherer.component.ts","webpack://ng-universal-demo/../../../src/components/metadata/types.ts","webpack://ng-universal-demo/../../../src/plugins/dataLoader/dataLoaderAbstract.component.ts","webpack://ng-universal-demo/../../../src/plugins/dataLoader/types.ts","webpack://ng-universal-demo/../../../src/plugins/paging/pagingAbstract.component.ts","webpack://ng-universal-demo/../../../src/enums/orderByDirection.ts"],"sourcesContent":["/**\n * Available paging position where should be rendered\n */\nexport enum PagingPosition\n{\n    /**\n     * Paging will be rendered above grid content\n     */\n    Top,\n\n    /**\n     * Paging will be rendered below grid content\n     */\n    Bottom\n}","/**\r\n * Class for paging evaluation\r\n */\r\nexport class Paginator\r\n{\r\n    //######################### private fields ######################### \r\n\r\n    /**\r\n     * First page set to paginator\r\n     */\r\n    private _base: number = 1;\r\n\r\n    /**\r\n     * Number of items per page\r\n     */\r\n    private _itemsPerPage: number = 10;\r\n\r\n    /**\r\n     * Index of current page\r\n     */\r\n    private _page: number = 1;\r\n\r\n    /**\r\n     * Number of all items to be used for counting paging\r\n     */\r\n    private _itemCount: number = 0;\r\n\r\n    //######################### public methods #########################\r\n\r\n    /**\r\n     * Sets current page number.\r\n     * @param page - Page number\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setPage(page: number): Paginator\r\n    {\r\n        this._page = page;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns current page number.\r\n     * @returns number Current page number\r\n     */\r\n    public getPage(): number\r\n    {\r\n        return this._base + this.getPageIndex();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Returns first page number.\r\n    /// </summary>\r\n    /// <returns>Number of first page</returns>\r\n    public GetFirstPage(): number\r\n    {\r\n        return this._base;\r\n    }\r\n\r\n    /**\r\n     * Returns last page number.\r\n     * @returns number Number of last page\r\n     */\r\n    public getLastPage(): number\r\n    {\r\n        return this._base + Math.max(0, this.getPageCount() - 1);\r\n    }\r\n\r\n    /**\r\n     * Sets first page (base) number.\r\n     * @param baseVal - Index of base page\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setBase(baseVal: number): Paginator\r\n    {\r\n        this._base = baseVal;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns first page (base) number.\r\n     * @returns number Index of base page\r\n     */\r\n    public getBase(): number\r\n    {\r\n        return this._base;\r\n    }\r\n\r\n    /**\r\n     * Gets indication whether is the current page the first one?\r\n     * @returns boolean True if current page is first one\r\n     */\r\n    public isFirst(): boolean\r\n    {\r\n        return this.getPageIndex() == 0;\r\n    }\r\n\r\n    /**\r\n     * Gets indication whether is the current page the last one?\r\n     * @returns boolean True if current page is last one, otherwise false\r\n     */\r\n    public isLast(): boolean\r\n    {\r\n        return this.getPageIndex() == (this.getPageCount() - 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of pages.\r\n     * @returns number Total number of pages\r\n     */\r\n    public getPageCount(): number\r\n    {\r\n        return Math.ceil(this._itemCount / this._itemsPerPage);\r\n    }\r\n\r\n    /**\r\n     * Sets the number of items to display on a single page.\r\n     * @param itemsPerPage - Number of items per page\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setItemsPerPage(itemsPerPage: number): Paginator\r\n    {\r\n        this._itemsPerPage = Math.max(1, itemsPerPage);\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items to display on a single page.\r\n     * @returns number Number of items per one page\r\n     */\r\n    public getItemsPerPage(): number\r\n    {\r\n        return this._itemsPerPage;\r\n    }\r\n\r\n    /**\r\n     * Sets the total number of items.\r\n     * @param itemCount - Count of items or -1 for infinity\r\n     * @returns Paginator Provides a fluent interface\r\n     */\r\n    public setItemCount(itemCount: number): Paginator\r\n    {\r\n        this._itemCount = itemCount == -1 ? Number.MAX_VALUE : Math.max(0, itemCount);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of items.\r\n     * @returns number Total number of items\r\n     */\r\n    public getItemCount(): number\r\n    {\r\n        return this._itemCount;\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute index of the first item on current page.\r\n     * @returns number Absolute index of first item\r\n     */\r\n    public getOffset(): number\r\n    {\r\n        return this.getPageIndex() * this._itemsPerPage;\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute index of the first item on current page in countdown paging.\r\n     * @returns number Countdown offset of first item\r\n     */\r\n    public getCountdownOffset(): number\r\n    {\r\n        return Math.max(0, this._itemCount - (this.getPageIndex() + 1) * this._itemsPerPage);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items on current page.\r\n     * @returns number Number of items on page\r\n     */\r\n    public getLength(): number\r\n    {\r\n        return Math.min(this._itemsPerPage, this._itemCount - this.getPageIndex() * this._itemsPerPage);\r\n    }\r\n\r\n    /**\r\n     * Gets indexes for items on current page (zero-based indexes)\r\n     * @returns number Array of items indexes\r\n     */\r\n    public getIndexesPerPage(): number[]\r\n    {\r\n        const result: number[] = [];\r\n\r\n        if(isNaN(this.getOffset()))\r\n        {\r\n            for(let x = 0; x < this.getItemCount(); x++)\r\n            {\r\n                result.push(x);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for(let x = this.getOffset(); x < this.getOffset() + this.getLength(); x++)\r\n            {\r\n                result.push(x);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets list of page numbers with specified dispersion\r\n     * @param dispersion - Number identifying dispersion\r\n     * @returns number Page numbers according specified dispersion\r\n     */\r\n    public getPagesWithDispersion(dispersion: number): number[]\r\n    {\r\n        const currentPage = this.getPage();\r\n        const pageCount = this.getPageCount();\r\n        const numberOfPages = Math.min(pageCount, Math.max(0, dispersion) * 2 + 1) - 1;\r\n        let startingPage = Math.max(this._base, currentPage - dispersion);\r\n\r\n        if ((currentPage + dispersion) > pageCount)\r\n        {\r\n            startingPage = pageCount - numberOfPages;\r\n        }\r\n\r\n        let x: number;\r\n        const endingPage = startingPage + numberOfPages;\r\n\r\n        const result: number[] = [];\r\n\r\n        for (x = startingPage; x <= endingPage; x++)\r\n        {\r\n            result.push(x);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets list of page numbers with specified dispersion, pages are trimmed if current page is near beginning or end\r\n     * @param dispersion - Number identifying dispersion\r\n     * @returns number Page numbers according specified dispersion\r\n     */\r\n    public getPagesWithTrimDispersion(dispersion: number): number[]\r\n    {\r\n        const currentPage = this.getPage();\r\n        const lastPage = this.getLastPage();\r\n        const startingPage = Math.max(this._base, currentPage - dispersion);\r\n        let x: number;\r\n        const endingPage = Math.min(lastPage, currentPage + dispersion);\r\n\r\n        const result: number[] = [];\r\n        \r\n        for (x = startingPage; x <= endingPage; x++)\r\n        {\r\n            result.push(x);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets list of page numbers generated with uniform distribution\r\n     * @param numberOfPages - Number of pages that are going to be uniformly distributed between first and last page (including)\r\n     * @returns number Uniformly distributed page numbers\r\n     */\r\n    public getPagesWithUniformDistribution(numberOfPages: number): number[]\r\n    {\r\n        numberOfPages = Math.max(1, numberOfPages - 1);\r\n        const pageCount = this.getPageCount();\r\n        numberOfPages = Math.min(numberOfPages, pageCount - 1);\r\n        const step = pageCount / numberOfPages;\r\n        let page = this.GetFirstPage();\r\n        let x;\r\n\r\n        const result: number[] = [];\r\n\r\n        for (x = 0; x < numberOfPages; x++)\r\n        {\r\n            result.push(Math.round(page));\r\n\r\n            page += step;\r\n        }\r\n\r\n        result.push(pageCount);\r\n        \r\n        return result;\r\n    }\r\n\r\n    //######################### protected methods #########################\r\n\r\n    /**\r\n     * Returns zero-based page number.\r\n     * @returns number Zero-based page number\r\n     */\r\n    protected getPageIndex(): number\r\n    {\r\n        return Math.min(Math.max(0, this._page - this._base), Math.max(0, this.getPageCount() - 1));\r\n    }\r\n}",null,"import {Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, ElementRef} from '@angular/core';\nimport {Paginator, isPresent, extend} from '@jscrpt/common';\n\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {PagingAbstractComponent} from '../pagingAbstract.component';\nimport {BasicPagingOptions, BasicPaging, CssClassesBasicPaging} from './basicPaging.interface';\nimport {PAGING_OPTIONS} from '../types';\nimport {GridInitializer} from '../../gridInitializer';\nimport {GRID_INITIALIZER} from '../../gridInitializer/types';\n\n/**\n * Items per page single item\n */\nexport class ItemsPerPageItem\n{\n    /**\n     * Indication that item is active\n     */\n    public isActive: boolean;\n\n    /**\n     * Value of item\n     */\n    public value: number;\n}\n\n/**\n * Default options for paging\n * @internal\n */\nconst defaultOptions: BasicPagingOptions =\n{\n    initialItemsPerPage: 10,\n    initialPage: 1,\n    itemsPerPageValues: [],\n    pagesDispersion: 4,\n    cssClasses:\n    {\n        pagingUl: 'pagination pagination-sm margin-sm-vertical',\n        itemsPerPageDiv: 'pull-right',\n        displayedItemsCountSpan: 'items-count',\n        itemsPerPageUl: 'pagination pagination-sm margin-sm-vertical'\n    }\n};\n\n/**\n * Component used for rendering basic simple paging\n */\n@Component(\n{\n    selector: 'ng-basic-paging',\n    templateUrl: 'basicPaging.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\n        `.items-count\n        {\n            float: left;\n            margin-right: 8px;\n            line-height: 42px;\n        }\n        .pointer-cursor\n        {\n            cursor: pointer;\n        }`\n    ]\n})\nexport class BasicPagingComponent extends PagingAbstractComponent<CssClassesBasicPaging, BasicPagingOptions> implements BasicPaging\n{\n    //######################### protected fields #########################\n\n    /**\n     * Paginator used for getting page numbers\n     */\n    protected _paginator: Paginator = new Paginator();\n\n    /**\n     * Index of currently selected page\n     */\n    protected _page: number;\n\n    /**\n     * Number of items currently used for paging\n     */\n    protected _itemsPerPage: number;\n\n    /**\n     * Number of all items that are paged with current filter criteria\n     */\n    protected _totalCount: number;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Text displaying items count\n     * @internal\n     */\n    public displayedItemsCount: string = '';\n\n    /**\n     * Array of pages that are rendered\n     * @internal\n     */\n    public pages: {isActive: boolean; isDisabled: boolean; title: string; page: number}[] = [];\n\n    /**\n     * Array of items per page that are rendered\n     * @internal\n     */\n    public itemsPerPageItems: ItemsPerPageItem[] = [];\n\n    //######################### public properties #########################\n\n    /**\n     * Zero based index of first displayed item on page\n     */\n    public get firstItemIndex(): number\n    {\n        const offset = this._paginator.getOffset();\n\n        return isNaN(offset) ? 0 : offset;\n    }\n\n    /**\n     * Indication whether plugin is already initialized\n     */\n    public get initialized(): boolean\n    {\n        return this._initialized;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets index of currently selected page\n     */\n    @Input()\n    public get page(): number\n    {\n        return this._page;\n    }\n    public set page(page: number)\n    {\n        this._page = page;\n        this._paginator.setPage(page);\n        this._generatePages();\n        this._setDisplayedItemsCount();\n        (this.gridPlugins[GRID_INITIALIZER] as GridInitializer).setPage(this._page);\n    }\n\n    /**\n     * Gets or sets number of items currently used for paging\n     */\n    @Input()\n    public get itemsPerPage(): number\n    {\n        return this._itemsPerPage;\n    }\n    public set itemsPerPage(itemsPerPage: number)\n    {\n        this._itemsPerPage = itemsPerPage;\n        this._paginator.setItemsPerPage(itemsPerPage);\n        this._generatePages();\n        this._generateItemsPerPage();\n        this._setDisplayedItemsCount();\n        (this.gridPlugins[GRID_INITIALIZER] as GridInitializer).setItemsPerPage(this._itemsPerPage);\n    }\n\n    /**\n     * Gets or sets number of all items that are paged with current filter criteria\n     */\n    @Input()\n    public get totalCount(): number\n    {\n        return this._totalCount;\n    }\n    public set totalCount(totalCount: number)\n    {\n        this._totalCount = totalCount;\n        this._paginator.setItemCount(totalCount);\n        this._generatePages();\n        this._setDisplayedItemsCount();\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances,\n                @Inject(PAGING_OPTIONS) @Optional() options?: BasicPagingOptions)\n    {\n        super(pluginElement, changeDetector, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n        this.optionsSet();\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Sets page for current paging\n     * @param page - Page index to be set\n     * @internal\n     */\n    public setPage(page: {isActive: boolean; isDisabled: boolean; page: number})\n    {\n        if(page.isActive || page.isDisabled)\n        {\n            return;\n        }\n\n        this.page = page.page;\n        this.pageChange.emit(this.page);\n    }\n\n    /**\n     * Sets items per page for current paging\n     * @param itemsPerPage - Number of items per page\n     * @internal\n     */\n    public setItemsPerPage(itemsPerPage: ItemsPerPageItem)\n    {\n        if(itemsPerPage.isActive)\n        {\n            return;\n        }\n\n        this.itemsPerPage = itemsPerPage.value;\n        this.itemsPerPageChange.emit(this.itemsPerPage);\n    }\n\n    /**\n     * Converts number to text that is going to be rendered for ItemsPerPage\n     * @param value - Text that is returned for items per page\n     * @internal\n     */\n    public renderItemsPerPageText(value: number): string\n    {\n        return isNaN(value) ? '&infin;' : value.toString();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method that initialize paging component, this method can be used for initialization if paging used dynamicaly\n     */\n    public override initialize()\n    {\n        super.initialize();\n\n        this._paginator.setPage(this._page);\n        this._paginator.setItemsPerPage(this._itemsPerPage);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Generates rendered pages\n     */\n    protected _generatePages()\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        const pageCount = this._paginator.getPageCount() || 1;\n\n        //Applied when displaying all items\n        if(isNaN(pageCount))\n        {\n            if(this._page != 1)\n            {\n                this._page = 1;\n                this._paginator.setPage(1);\n                this.pageChange.emit(1);\n            }\n\n            this.pages = [];\n\n            return;\n        }\n\n        if(!isNaN(pageCount) && pageCount < this._page)\n        {\n            this.setPage(\n            {\n                page: pageCount,\n                isActive: false,\n                isDisabled: false\n            });\n        }\n\n        this.pages = [];\n\n        this.pages.push(\n        {\n            isActive: false,\n            isDisabled: this._paginator.isFirst(),\n            title: '&laquo;',\n            page: this._paginator.GetFirstPage()\n        });\n\n        this._paginator.getPagesWithTrimDispersion(this.options.pagesDispersion).forEach(page =>\n        {\n            this.pages.push(\n            {\n                isActive: this._paginator.getPage() == page,\n                isDisabled: false,\n                title: page.toString(),\n                page: page\n            });\n        });\n\n        this.pages.push(\n        {\n            isActive: false,\n            isDisabled: this._paginator.isLast(),\n            title: '&raquo;',\n            page: this._paginator.getLastPage()\n        });\n    }\n\n    /**\n     * Generates rendered items per page\n     */\n    protected _generateItemsPerPage()\n    {\n        this.itemsPerPageItems.forEach(itm => itm.isActive = itm.value == this.itemsPerPage || (isNaN(itm.value) && isNaN(this.itemsPerPage)));\n    }\n\n    /**\n     * Sets displayed items count\n     */\n    protected _setDisplayedItemsCount()\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        const displayedItems = this._paginator.getOffset() + this._paginator.getLength();\n\n        this.displayedItemsCount = '';\n\n        if(isNaN(displayedItems) && isPresent(this._totalCount))\n        {\n            this.displayedItemsCount = this._totalCount.toString();\n        }\n        else if(!isNaN(displayedItems) && isPresent(this._totalCount))\n        {\n            this.displayedItemsCount = `${displayedItems}/${this._totalCount}`;\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * Method called when options are set, allowing to do something after that when overriden\n     */\n    protected override optionsSet()\n    {\n        this.itemsPerPageItems = this.options.itemsPerPageValues.map(itm =>\n        {\n            return {\n                value: itm,\n                isActive: false\n            };\n        });\n\n        this._generateItemsPerPage();\n    }\n}","<div>\r\n    <ul [ngClass]=\"options?.cssClasses?.pagingUl\">\r\n        <li *ngFor=\"let page of pages\" [ngClass]=\"{disabled: page.isDisabled, active: page.isActive, 'pointer-cursor': !page.isDisabled && !page.isActive}\">\r\n            <a (click)=\"setPage(page)\">\r\n                <span [innerHtml]=\"page.title\"></span>\r\n            </a>\r\n        </li>\r\n    </ul>\r\n\r\n    <div [ngClass]=\"options?.cssClasses?.itemsPerPageDiv\" *ngIf=\"initialized && !!itemsPerPageItems && itemsPerPageItems.length > 0\">\r\n        <span [ngClass]=\"options?.cssClasses?.displayedItemsCountSpan\">{{displayedItemsCount}}</span>\r\n\r\n        <ul [ngClass]=\"options?.cssClasses?.itemsPerPageUl\">\r\n            <li *ngFor=\"let itemsPerPage of itemsPerPageItems\" [ngClass]=\"{active: itemsPerPage.isActive, 'pointer-cursor': !itemsPerPage.isActive}\">\r\n                <a (click)=\"setItemsPerPage(itemsPerPage)\">\r\n                    <span [innerHtml]=\"renderItemsPerPageText(itemsPerPage.value)\"></span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, Inject, Optional, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {DataResponse} from '../dataLoader.interface';\nimport {DATA_LOADER_OPTIONS, DataLoaderState} from '../types';\nimport {AsyncDataLoaderOptions, AsyncDataLoader} from './asyncDataLoader.interface';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {DataLoaderAbstractComponent} from '../dataLoaderAbstract.component';\n\n/**\n * Default options for async data loader\n * @internal\n */\nconst defaultOptions: AsyncDataLoaderOptions =\n{\n    autoLoadData: true,\n    debounceDataCallback: 30,\n    dataCallback: () => new Promise<any>(() => {})\n};\n\n/**\n * Data loader that allows asynchronous data loading\n * \n * @example\n * If you want to use async data loader you have to provide at least `dataCallback`.\n * \n * Sample grid options\n * ``` typescript\n * var gridOptions =\n * {\n *     plugins:\n *     {\n *         dataLoader:\n *         {\n *             type: AsyncDataLoaderComponent, //this is default value could be omitted\n *             options: <AsyncDataLoaderOptions<DataType, SimpleOrdering>>\n *             {\n *                 dataCallback: this._getData.bind(this)\n *             }\n *         }\n *     }\n * };\n * ```\n * \n * @example\n * data callback should look like this\n * ``` typescript\n * private async _getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<DataType>>\n * {\n *     let result = await this._dataSvc\n *         .getData(\n *         {\n *             page: (page - 1),\n *             size: itemsPerPage\n *         }).toPromise();\n * \n *     return {\n *         data: result.content,\n *         totalCount: result.totalElements\n *     };\n * }\n * ```\n */\n@Component(\n{\n    selector: 'ng-async-data-loader',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AsyncDataLoaderComponent<TData = any, TOrdering = any> extends DataLoaderAbstractComponent<AsyncDataLoaderOptions<TData, TOrdering>, TOrdering, DataResponse<TData>> implements AsyncDataLoader<TData>\n{\n    //######################### private fields #########################\n\n    /**\n     * Current result of data loader\n     */\n    private _result?: DataResponse<TData> =\n    {\n        data: [],\n        totalCount: 0\n    };\n\n    //######################### public properties #########################\n\n    /**\n     * Current result of data loader\n     */\n    public get result(): DataResponse<TData>\n    {\n        return this._result;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances,\n                @Inject(DATA_LOADER_OPTIONS) @Optional() options?: AsyncDataLoaderOptions<TData, TOrdering>)\n    {\n        super(pluginElement, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### protected methodes - implements DataLoaderAbstractComponent #########################\n    \n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    protected async _loadData(force?: boolean)\n    {\n        if(!force && !this._checkChanges())\n        {\n            return;\n        }\n\n        this._state = (this._result && this._result.data && this._result.data.length) ? DataLoaderState.DataLoading : DataLoaderState.NoDataLoading;\n        this.stateChange.emit();\n\n        const result = await this._options.dataCallback(this._paging.page, this._paging.itemsPerPage, this._contentRenderer.ordering);\n\n        this._state = (result && result.data && result.data.length) ? DataLoaderState.Loaded : DataLoaderState.NoData;\n        this.stateChange.emit();\n\n        this._paging.totalCount = result.totalCount;\n        this._paging.invalidateVisuals();\n        this._result = result;\n        this.resultChange.emit();\n    }\n}","import {ChangeDetectorRef, Inject, Injectable, ElementRef, Optional} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {BodyContentRenderer, BodyContentRendererOptions} from './contentRenderer.interface';\nimport {Paging} from '../paging';\nimport {PAGING} from '../paging/types';\nimport {GridPluginGeneric} from '../../misc';\n\n//TODO - compute classes before rendering\n//TOOD - mergeClasses as pipe\n\n/**\n * Abstract component for body content renderer\n */\n@Injectable()\nexport class BodyContentRendererAbstractComponent<TData = any, TOptions extends BodyContentRendererOptions<TCssClasses> = any, TMetadata = any, TCssClasses = any> implements BodyContentRenderer<TData, TMetadata>, GridPluginGeneric<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for body content renderer\n     */\n    protected _options: TOptions;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Starting index of currently displayed items\n     */\n    public startingIndex: number = 0;\n\n    //######################### public properties - implementation of BodyContentRenderer #########################\n\n    /**\n     * Options for body content renderer\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Data that are rendered\n     */\n    public data: TData[];\n\n    /**\n     * Metadata used for rendering\n     */\n    public metadata: TMetadata;\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances)\n    {\n    }\n\n    //######################### public methods - implementation of CssDivsBodyContentRenderer<TData, BasicTableColumn> #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this.startingIndex = (this.gridPlugins[PAGING] as Paging).firstItemIndex;\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Merges css classes specified as strings\n     */\n    public mergeStringClasses(...classes: string[])\n    {\n        const result = [];\n\n        classes.forEach(cls => cls ? (result.push(cls)) : null);\n\n        return result;\n    }\n}",null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Optional, Inject, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {BasicTableColumn, BasicTableMetadata} from '../../../../../components/metadata';\nimport {TableBodyContentRendererOptions} from '../../tableContentRenderer.interface';\nimport {GridPluginInstances} from '../../../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../../../components/grid/types';\nimport {BODY_CONTENT_RENDERER_OPTIONS} from '../../../types';\nimport {BodyContentRendererAbstractComponent} from '../../../bodyContentRendererAbstract.component';\n\n/**\n * Default options for 'TableBodyContentRendererComponent'\n * @internal\n */\nconst defaultOptions: TableBodyContentRendererOptions =\n{\n};\n\n/**\n * Component used for rendering tbody for 'TableContentRenderer'\n */\n@Component(\n{\n    selector: 'tbody.content-renderer',\n    templateUrl: 'tableBodyContentRenderer.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableBodyContentRendererComponent<TData = any> extends BodyContentRendererAbstractComponent<TData, TableBodyContentRendererOptions, BasicTableMetadata<BasicTableColumn<TData>>, any>\n{\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances,\n                @Inject(BODY_CONTENT_RENDERER_OPTIONS) @Optional() options: TableBodyContentRendererOptions)\n    {\n        super(pluginElement, changeDetector, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}","<tr *ngFor=\"let datum of data; let index=index\">\r\n    <ng-template ngFor [ngForOf]=\"metadata?.columns\" let-meta>\r\n        <td [ngClass]=\"meta?.cellClass\"\r\n            [attr.data-header-title]=\"meta?.title\">\r\n            <ng-template [ngIf]=\"!meta?.bodyTemplate\" [ngIfElse]=\"bodyTemplate\">\r\n                {{datum[meta?.name]}}\r\n            </ng-template>\r\n\r\n            <ng-template #bodyTemplate [ngTemplateOutlet]=\"meta?.bodyTemplate\" [ngTemplateOutletContext]=\"meta?.getColumnContext(datum, meta, index, startingIndex)\">\r\n            </ng-template>\r\n        </td>\r\n    </ng-template>\r\n</tr>",null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, HostBinding, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {TableHeaderContentRendererOptions} from '../../tableContentRenderer.interface';\nimport {HEADER_CONTENT_RENDERER_OPTIONS} from '../../../types';\nimport {HeaderContentRendererAbstractComponent} from '../../../headerContentRendererAbstract.component';\nimport {GRID_PLUGIN_INSTANCES} from '../../../../../components/grid/types';\nimport {GridPluginInstances} from '../../../../../components/grid';\n\n/**\n * Default options for 'TableHeaderContentRendererComponent'\n * @internal\n */\nconst defaultOptions: TableHeaderContentRendererOptions =\n{\n    cssClasses:\n    {\n        thead: '',\n        thDefault: 'header-default',\n        thOrderable: 'header-orderable',\n        spanContent: 'header-content',\n        spanOrdering: 'header-ordering',\n        spanOrderingDirection:\n        {\n            none: 'fa fa-sort',\n            asc: 'fa fa-sort-up',\n            desc: 'fa fa-sort-down'\n        }\n    }\n};\n\n/**\n * Component used for rendering table header in table content renderer\n */\n@Component(\n{\n    selector: 'thead.content-renderer',\n    templateUrl: 'tableHeaderContentRenderer.component.html',\n    styleUrls: ['tableHeaderContentRenderer.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableHeaderContentRendererComponent<TData = any> extends HeaderContentRendererAbstractComponent<TData, TableHeaderContentRendererOptions>\n{\n    //######################### public properties - host #########################\n\n    /**\n     * Css class applied to header itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.thead;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(HEADER_CONTENT_RENDERER_OPTIONS) @Optional() options: TableHeaderContentRendererOptions,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances)\n    {\n        super(pluginElement, gridPlugins, changeDetector);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}","import {EventEmitter, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {OrderByDirection, extend} from '@jscrpt/common';\n\nimport {GridPluginInstances} from '../../components/grid';\nimport {HeaderContentRenderer, SimpleOrdering, BasicOrderableColumn, HeaderContentRendererOptions, CssClassesHeaderContentRenderer} from './contentRenderer.interface';\nimport {GridPluginGeneric} from '../../misc';\nimport {BasicTableMetadata} from '../../components/metadata';\nimport {GridInitializer} from '../gridInitializer';\nimport {GRID_INITIALIZER} from '../gridInitializer/types';\nimport {deserializeSimpleOrdering, serializeSimpleOrdering} from './types';\n\n/**\n * Abstract component for header content renderer\n */\nexport abstract class HeaderContentRendererAbstractComponent<TData = any, TOptions extends HeaderContentRendererOptions<CssClassesHeaderContentRenderer> = any> implements HeaderContentRenderer<SimpleOrdering, BasicTableMetadata<BasicOrderableColumn<TData>>>, GridPluginGeneric<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for header content renderer\n     */\n    protected _options: TOptions;\n\n    /**\n     * Current ordering state\n     */\n    protected _ordering: SimpleOrdering = null;\n\n    /**\n     * Instance of grid initializer\n     */\n    protected _gridInitializer: GridInitializer = null;\n\n    //######################### public properties - implementation of TableHeaderContentRenderer #########################\n\n    /**\n     * Options for header content renderer\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Metadata used for rendering\n     */\n    public metadata: BasicTableMetadata<BasicOrderableColumn<TData>>;\n\n    /**\n     * Current ordering state\n     */\n    public get ordering(): SimpleOrdering\n    {\n        if(!this._ordering)\n        {\n            this._ordering = deserializeSimpleOrdering(this._gridInitializer.getOrdering());\n\n            this._initializeOrderingCss();\n        }\n\n        return this._ordering;\n    }\n    public set ordering(ordering: SimpleOrdering)\n    {\n        this._gridInitializer.setOrdering(serializeSimpleOrdering(ordering));\n        this._ordering = ordering;\n    }\n\n    /**\n     * Occurs when ordering has changed\n     */\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                public gridPlugins: GridPluginInstances,\n                protected _changeDetector: ChangeDetectorRef)\n    {\n    }\n\n    //######################### public methods - implementation of TableHeaderContentRenderer #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this.orderingChange.emit();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        this._gridInitializer = this.gridPlugins[GRID_INITIALIZER] as GridInitializer;\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Resets metadata to defaults\n     * @param force - Indication whether forcibly reset ordering, otherwise it is reset only if column is not present in displayed metadata\n     */\n    public resetMetadata(force: boolean = false): void\n    {\n        //sets initial css classes for all columns\n        this._resetOrdering();\n\n        //only if current ordering column was removed from metadata or forced\n        if(force || !(!!this.ordering?.orderBy && this.metadata?.columns?.find(itm => itm.name == this.ordering.orderBy && itm.ordering)))\n        {\n            this.ordering = null;\n            this._resetOrdering();\n        }\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Merges css classes specified as strings\n     */\n    public mergeStringClasses(...classes: string[])\n    {\n        const result = [];\n\n        classes.forEach(cls => cls ? (result.push(cls)) : null);\n\n        return result;\n    }\n\n    /**\n     * Applies ordering for specified column\n     * @param meta - Metadata for column that was selected for ordering\n     */\n    public orderBy(meta: BasicOrderableColumn<TData>)\n    {\n        if(!meta.ordering)\n        {\n            return;\n        }\n\n        //no ordering, or ordering different column\n        if(!this.ordering || this.ordering.orderBy != meta.name)\n        {\n            this._resetOrdering();\n\n            this.ordering =\n            {\n                orderByDirection: OrderByDirection.Ascending,\n                orderBy: meta.name\n            };\n\n            meta.orderingClass = this.options.cssClasses.spanOrderingDirection.asc;\n            this.orderingChange.emit();\n        }\n        else if(this.ordering.orderByDirection == OrderByDirection.Ascending)\n        {\n            this.ordering =\n            {\n                orderByDirection: OrderByDirection.Descending,\n                orderBy: meta.name\n            };\n\n            meta.orderingClass = this.options.cssClasses.spanOrderingDirection.desc;\n            this.orderingChange.emit();\n        }\n        else\n        {\n            this.ordering = null;\n            meta.orderingClass = this.options.cssClasses.spanOrderingDirection.none;\n            this.orderingChange.emit();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Resets ordering to none\n     */\n    protected _resetOrdering()\n    {\n        this.metadata.columns.forEach(meta => meta.orderingClass = this.options.cssClasses.spanOrderingDirection.none);\n    }\n\n    /**\n     * Initialize ordering css\n     */\n    protected _initializeOrderingCss()\n    {\n        //initialize css for ordering if set\n        if(this._ordering?.orderBy)\n        {\n            const meta = this.metadata?.columns?.find(itm => itm.name == this._ordering.orderBy);\n\n            if(meta)\n            {\n                switch(this._ordering.orderByDirection)\n                {\n                    case OrderByDirection.Ascending:\n                    {\n                        meta.orderingClass = this.options.cssClasses.spanOrderingDirection.asc;\n\n                        break;\n                    }\n                    default:\n                    //case OrderByDirection.Descendant:\n                    {\n                        meta.orderingClass = this.options.cssClasses.spanOrderingDirection.desc;\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}","<tr>\r\n    <th *ngFor=\"let meta of metadata?.columns; let index=index\" \r\n        [ngClass]=\"mergeStringClasses(options?.cssClasses?.thDefault, meta?.headerClass, meta?.ordering ? options?.cssClasses?.thOrderable : null)\" \r\n        [style.width]=\"meta?.width\"\r\n        (click)=\"orderBy(meta)\"\r\n        [title]=\"meta?.headerTooltip || meta?.title\">\r\n        <ng-template [ngIf]=\"meta?.titleVisible\">\r\n            <ng-template [ngIf]=\"!meta?.headerTemplate\" [ngIfElse]=\"headerTemplate\">\r\n                <span [ngClass]=\"options?.cssClasses?.spanContent\">{{meta?.title}}</span>\r\n            </ng-template>\r\n\r\n            <ng-template #headerTemplate [ngTemplateOutlet]=\"meta?.headerTemplate\" [ngTemplateOutletContext]=\"meta?.getColumnContext(null, meta, index, 0)\">\r\n            </ng-template>\r\n\r\n            <span *ngIf=\"meta?.ordering\" [ngClass]=\"mergeStringClasses(options?.cssClasses?.spanOrdering, meta?.orderingClass)\"></span>\r\n        </ng-template>\r\n    </th>\r\n</tr>","import {EventEmitter, Inject, OnDestroy, resolveForwardRef, Directive, ElementRef, Optional, HostBinding} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {ContentRendererPlugins, ContentRendererOptions, ContentRenderer, HeaderContentRenderer, BodyContentRenderer, CssClassesContentRenderer} from './contentRenderer.interface';\nimport {BODY_CONTENT_RENDERER, HEADER_CONTENT_RENDERER} from './types';\nimport {MetadataSelector} from '../metadataSelector';\nimport {METADATA_SELECTOR} from '../metadataSelector/types';\nimport {DataResponse, DataLoader} from '../dataLoader';\nimport {DATA_LOADER} from '../dataLoader/types';\nimport {GridPluginGeneric} from '../../misc';\n\n/**\n * Abstract component for content renderers\n */\n@Directive()\nexport class ContentRendererAbstractComponent<TOrdering = any, TData = any, TMetadata = any, TOptions extends ContentRendererOptions<CssClassesContentRenderer, ContentRendererPlugins> = any> implements ContentRenderer<TOrdering>, OnDestroy, GridPluginGeneric<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for content renderer\n     */\n    protected _options: TOptions;\n\n    /**\n     * Metadata selector currently used\n     */\n    protected _metadataSelector: MetadataSelector<TMetadata>;\n\n    /**\n     * Data loader currently used\n     */\n    protected _dataLoader: DataLoader<DataResponse<TData>>;\n\n    /**\n     * Subscription listening for metadata changes\n     */\n    protected _metadataChangedSubscription: Subscription;\n\n    /**\n     * Subscription listening for data changes\n     */\n    protected _dataChangedSubscription: Subscription;\n\n    /**\n     * Subscription listening for ordering changes\n     */\n    protected _orderingChangedSubscription: Subscription;\n\n    //######################### public properties - implementation of TableContentRenderer #########################\n\n    /**\n     * Options for content renderer\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Information about current ordering state\n     */\n    public get ordering(): TOrdering\n    {\n        const headerRenderer: HeaderContentRenderer<TOrdering, TMetadata> = this.gridPlugins[HEADER_CONTENT_RENDERER] as HeaderContentRenderer<TOrdering, TMetadata>;\n\n        return headerRenderer ? headerRenderer.ordering : null;\n    }\n    public set ordering(ordering: TOrdering)\n    {\n        const headerRenderer: HeaderContentRenderer<TOrdering, TMetadata> = this.gridPlugins[HEADER_CONTENT_RENDERER] as HeaderContentRenderer<TOrdering, TMetadata>;\n\n        if(headerRenderer)\n        {\n            headerRenderer.ordering = ordering;\n        }\n\n        headerRenderer.invalidateVisuals();\n    }\n\n    /**\n     * Indication that ordering has changed\n     */\n    public orderingChange: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### public properties - hosts #########################\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public get cssClass(): string\n    {\n        return this._options.cssClasses.containerDiv;\n    }\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._metadataChangedSubscription)\n        {\n            this._metadataChangedSubscription.unsubscribe();\n            this._metadataChangedSubscription = null;\n        }\n\n        if(this._orderingChangedSubscription)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n        }\n\n        if(this._dataChangedSubscription)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods - implementation of TableContentRenderer #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._invalidateVisuals();\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        const metadataSelector: MetadataSelector<TMetadata> = this.gridPlugins[METADATA_SELECTOR] as MetadataSelector<TMetadata>;\n\n        if(this._metadataSelector && this._metadataSelector != metadataSelector)\n        {\n            this._metadataChangedSubscription.unsubscribe();\n            this._metadataChangedSubscription = null;\n            this._metadataSelector = null;\n        }\n\n        if(!this._metadataSelector)\n        {\n            this._metadataSelector = metadataSelector;\n\n            this._metadataChangedSubscription = this._metadataSelector.metadataChange.subscribe(() => this._invalidateVisuals());\n        }\n\n        const dataLoader: DataLoader<DataResponse<TData>> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse<TData>>;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader)\n        {\n            this._dataLoader = dataLoader;\n\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() => this._invalidateVisuals());\n        }\n\n        this.gridPlugins[HEADER_CONTENT_RENDERER].initialize();\n        this.gridPlugins[BODY_CONTENT_RENDERER].initialize();\n\n        this._invalidateVisuals();\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n        if(this._options.plugins)\n        {\n            if(this._options.plugins.bodyRenderer)\n            {\n                this._options.plugins.bodyRenderer.type = resolveForwardRef(this._options.plugins.bodyRenderer.type);\n\n                if(this._options.plugins.bodyRenderer.instance &&\n                   this._options.plugins.bodyRenderer.instance != this.gridPlugins[BODY_CONTENT_RENDERER])\n                {\n                    this.gridPlugins[BODY_CONTENT_RENDERER] = this._options.plugins.bodyRenderer.instance;\n                    this._options.plugins.bodyRenderer.instance.gridPlugins = this.gridPlugins;\n                }\n\n                if(this.gridPlugins[BODY_CONTENT_RENDERER])\n                {\n                    if(this._options.plugins && this._options.plugins.bodyRenderer && this._options.plugins.bodyRenderer.options)\n                    {\n                        this.gridPlugins[BODY_CONTENT_RENDERER].options = this._options.plugins.bodyRenderer.options;\n                    }\n\n                    this.gridPlugins[BODY_CONTENT_RENDERER].initOptions();\n                }\n            }\n\n            if(this._options.plugins.headerRenderer)\n            {\n                this._options.plugins.headerRenderer.type = resolveForwardRef(this._options.plugins.headerRenderer.type);\n\n                if(this._options.plugins.headerRenderer.instance &&\n                   this._options.plugins.headerRenderer.instance != this.gridPlugins[HEADER_CONTENT_RENDERER])\n                {\n                    this.gridPlugins[HEADER_CONTENT_RENDERER] = this._options.plugins.headerRenderer.instance;\n                    this._options.plugins.headerRenderer.instance.gridPlugins = this.gridPlugins;\n\n                    if(this._orderingChangedSubscription)\n                    {\n                        this._orderingChangedSubscription.unsubscribe();\n                        this._orderingChangedSubscription = null;\n                    }\n\n                    this._orderingChangedSubscription = this._options.plugins.headerRenderer.instance.orderingChange.subscribe(() => this.orderingChange.emit());\n                }\n\n                if(this.gridPlugins[HEADER_CONTENT_RENDERER])\n                {\n                    if(this._options.plugins && this._options.plugins.headerRenderer && this._options.plugins.headerRenderer.options)\n                    {\n                        this.gridPlugins[HEADER_CONTENT_RENDERER].options = this._options.plugins.headerRenderer.options;\n                    }\n\n                    this.gridPlugins[HEADER_CONTENT_RENDERER].initOptions();\n                }\n            }\n        }\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Sets body renderer component\n     * @param bodyRenderer - Created body renderer that is rendered\n     * @internal\n     */\n    public setBodyRendererComponent(bodyRenderer: BodyContentRenderer<TData, TMetadata>)\n    {\n        if(!bodyRenderer)\n        {\n            return;\n        }\n\n        this.gridPlugins[BODY_CONTENT_RENDERER] = bodyRenderer;\n\n        if(this._options.plugins && this._options.plugins.bodyRenderer && this._options.plugins.bodyRenderer.options)\n        {\n            bodyRenderer.options = this._options.plugins.bodyRenderer.options;\n        }\n\n        bodyRenderer.initOptions();\n\n        if(this._options.plugins && this._options.plugins.bodyRenderer && this._options.plugins.bodyRenderer.instanceCallback)\n        {\n            this._options.plugins.bodyRenderer.instanceCallback(bodyRenderer);\n        }\n    }\n\n    /**\n     * Sets header renderer component\n     * @param headerRenderer - Created header renderer that is rendered\n     * @internal\n     */\n    public setHeaderRendererComponent(headerRenderer: HeaderContentRenderer<TOrdering, TMetadata>)\n    {\n        if(!headerRenderer)\n        {\n            return;\n        }\n\n        this.gridPlugins[HEADER_CONTENT_RENDERER] = headerRenderer;\n\n        if(this._options.plugins && this._options.plugins.headerRenderer && this._options.plugins.headerRenderer.options)\n        {\n            headerRenderer.options = this._options.plugins.headerRenderer.options;\n        }\n\n        headerRenderer.initOptions();\n\n        if(this._options.plugins && this._options.plugins.headerRenderer && this._options.plugins.headerRenderer.instanceCallback)\n        {\n            this._options.plugins.headerRenderer.instanceCallback(headerRenderer);\n        }\n\n        if(this._orderingChangedSubscription)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n        }\n\n        this._orderingChangedSubscription = headerRenderer.orderingChange.subscribe(() => this.orderingChange.emit());\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Invalidates visuals, redraw template\n     */\n    protected _invalidateVisuals()\n    {\n        const bodyRenderer: BodyContentRenderer<TData, TMetadata> = this.gridPlugins[BODY_CONTENT_RENDERER] as BodyContentRenderer<TData, TMetadata>;\n        const headerRenderer: HeaderContentRenderer<TOrdering, TMetadata> = this.gridPlugins[HEADER_CONTENT_RENDERER] as HeaderContentRenderer<TOrdering, TMetadata>;\n\n        if(headerRenderer.metadata != this._metadataSelector.metadata)\n        {\n            headerRenderer.metadata = this._metadataSelector.metadata;\n            headerRenderer.resetMetadata();\n            headerRenderer.invalidateVisuals();\n        }\n\n        if(bodyRenderer.data != this._dataLoader.result.data || bodyRenderer.metadata != this._metadataSelector.metadata)\n        {\n            bodyRenderer.data = this._dataLoader.result.data;\n            bodyRenderer.metadata = this._metadataSelector.metadata;\n            bodyRenderer.invalidateVisuals();\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, Inject, Optional, OnDestroy, HostBinding, forwardRef, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {TableContentRendererOptions} from './tableContentRenderer.interface';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {CONTENT_RENDERER_OPTIONS} from '../types';\nimport {PluginDescription} from '../../../misc';\nimport {TableBodyContentRendererComponent} from './body/basic/tableBodyContentRenderer.component';\nimport {TableHeaderContentRendererComponent} from './header/basic/tableHeaderContentRenderer.component';\nimport {ContentRendererAbstractComponent} from '../contentRendererAbstract.component';\nimport {BodyContentRenderer, HeaderContentRenderer} from '../contentRenderer.interface';\n\n/**\n * Default options for 'TableContentRendererComponent'\n * @internal\n */\nconst defaultOptions: TableContentRendererOptions =\n{\n    cssClasses:\n    {\n        table: 'table table-condensed table-striped table-hover',\n        containerDiv: 'table-container'\n    },\n    plugins:\n    {\n        bodyRenderer: <PluginDescription<BodyContentRenderer>>\n        {\n            type: forwardRef(() => TableBodyContentRendererComponent)\n        },\n        headerRenderer: <PluginDescription<HeaderContentRenderer>>\n        {\n            type: forwardRef(() => TableHeaderContentRendererComponent)\n        }\n    }\n};\n\n/**\n * Component used for 'TableContentRendererComponent'\n */\n@Component(\n{\n    selector: 'div.table-content-renderer',\n    templateUrl: 'tableContentRenderer.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableContentRendererComponent<TOrdering = any, TData = any, TMetadata = any> extends ContentRendererAbstractComponent<TOrdering, TData, TMetadata, TableContentRendererOptions> implements OnDestroy\n{\n    //######################### public properties - hosts #########################\n\n    /**\n     * Css class applied to grid itself\n     */\n    @HostBinding('class')\n    public override get cssClass(): string\n    {\n        return this._options.cssClasses.containerDiv;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins: GridPluginInstances,\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: TableContentRendererOptions)\n    {\n        super(pluginElement, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}",null,"<table [ngClass]=\"options?.cssClasses?.table\">\r\n    <ng-template [ngComponentOutletEx]=\"options?.plugins?.headerRenderer?.type\" (ngComponentOutletExCreated)=\"setHeaderRendererComponent($event)\"></ng-template>\r\n    <ng-template [ngComponentOutletEx]=\"options?.plugins?.bodyRenderer?.type\" (ngComponentOutletExCreated)=\"setBodyRendererComponent($event)\"></ng-template>\r\n</table>","import {Component, ChangeDetectionStrategy, EventEmitter, OnDestroy, ElementRef} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {NoMetadataSelector, NoMetadataSelectorOptions} from './noMetadataSelector.interface';\nimport {MetadataGatherer} from '../../../components/metadata';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GridPluginGeneric} from '../../../misc';\n\n/**\n * Plugin component for metadata selector, which does not allows selection of metadata\n */\n@Component(\n{\n    selector: 'ng-no-metadata-selector',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NoMetadataSelectorComponent<TMetadata = any> implements NoMetadataSelector<TMetadata>, GridPluginGeneric<NoMetadataSelectorOptions>, OnDestroy\n{\n    /**\n     * Subscription for metadata changes\n     */\n    private _metadataChangedSubscription: Subscription;\n\n    /**\n     * Indication whether gahterer has been initialized\n     */\n    private _gathererInitialized: boolean = false;\n\n    /**\n     * Instance of metadata gatherer, which is used for getting initial metadata\n     */\n    private _metadataGatherer: MetadataGatherer<TMetadata>;\n\n    //######################### public properties - implementation of NoMetadataSelector #########################\n\n    /**\n     * Options for metadata selector\n     */\n    public options: NoMetadataSelectorOptions;\n\n    /**\n     * Instance of metadata gatherer, which is used for getting initial metadata\n     */\n    public get metadataGatherer(): MetadataGatherer<TMetadata>\n    {\n        return this._metadataGatherer;\n    }\n    public set metadataGatherer(gatherer: MetadataGatherer<TMetadata>)\n    {\n        if(this._metadataGatherer != gatherer)\n        {\n            this._gathererInitialized = false;\n        }\n\n        this._metadataGatherer = gatherer;\n    }\n\n    /**\n     * Current metadata that are used for rendering\n     */\n    public metadata: TMetadata;\n\n    /**\n     * Occurs when metadata changed\n     */\n    public metadataChange: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Grid plugin instances available for this plugin\n     */\n    public gridPlugins: GridPluginInstances;\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of NoMetadataSelector #########################\n\n    /**\n     * Shows metadata selector\n     */\n    public show(): void\n    {\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        if(!this._gathererInitialized)\n        {\n            if(this._metadataChangedSubscription)\n            {\n                this._metadataChangedSubscription.unsubscribe();\n                this._metadataChangedSubscription = null;\n            }\n\n            this._metadataChangedSubscription = this.metadataGatherer.metadataChange.subscribe(() =>\n            {\n                this.metadata = this.metadataGatherer.getMetadata();\n\n                this.metadataChange.emit();\n            });\n        }\n\n        this.metadata = this.metadataGatherer.getMetadata();\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals()\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._metadataChangedSubscription)\n        {\n            this._metadataChangedSubscription.unsubscribe();\n            this._metadataChangedSubscription = null;\n        }\n    }\n}",null,"import {Inject, Component, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, OnDestroy} from '@angular/core';\nimport {STRING_LOCALIZATION, StringLocalization} from '@anglr/common';\nimport {extend} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NO_DATA_RENDERER_OPTIONS} from '../types';\nimport {GridPluginGeneric} from '../../../misc';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {DataLoader, DataResponse} from '../../dataLoader';\nimport {DATA_LOADER, DataLoaderState} from '../../dataLoader/types';\nimport {SimpleNoDataRenderer, CssClassesSimpleNoDataRenderer, SimpleNoDataRendererOptions} from './simpleNoDataRenderer.interface';\nimport {NoDataRendererTexts} from '../noDataRenderer.interface';\n\n//TODO - change texts for texts options with localizations\n\n/**\n * Default options for no data renderer\n * @internal\n */\nconst defaultOptions: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer> =\n{\n    texts:\n    {\n        loading: 'Loading ...',\n        noData: 'No data available.',\n        notLoaded: 'No data loaded yet'\n    },\n    cssClasses:\n    {\n        wrapperDiv: 'simple-no-data',\n        textSpan: 'simple-no-data-text'\n    }\n};\n\n/**\n * Component for basic simple no data renderer\n */\n@Component(\n{\n    selector: 'ng-simple-no-data',\n    templateUrl: 'simpleNoDataRenderer.component.html',\n    styleUrls: ['simpleNoDataRenderer.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SimpleNoDataRendererComponent implements SimpleNoDataRenderer, GridPluginGeneric<SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for grid plugin\n     */\n    protected _options: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>;\n\n    /**\n     * Data loader currently used\n     */\n    protected _dataLoader: DataLoader<DataResponse>;\n\n    /**\n     * Subscription for changes in state of data loader\n     */\n    protected _stateChangedSubscription: Subscription;\n\n    /**\n     * Subscription for changes in texts\n     */\n    protected _textsChangedSubscription: Subscription;\n\n    /**\n     * Object containing available texts\n     */\n    protected _texts: NoDataRendererTexts = {};\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Currently displayed text\n     */\n    public text: string;\n\n    //######################### public properties - implementation of NoDataRenderer #########################\n\n    /**\n     * Options for grid plugin\n     */\n    public get options(): SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>\n    {\n        return this._options;\n    }\n    public set options(options: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>)\n    {\n        this._options = extend(true, this._options, options);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\n                @Inject(STRING_LOCALIZATION) protected _stringLocalization: StringLocalization,\n                public pluginElement: ElementRef,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(NO_DATA_RENDERER_OPTIONS) @Optional() options?: SimpleNoDataRendererOptions<CssClassesSimpleNoDataRenderer>)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._stateChangedSubscription)\n        {\n            this._stateChangedSubscription.unsubscribe();\n            this._stateChangedSubscription = null;\n        }\n\n        if(this._textsChangedSubscription)\n        {\n            this._textsChangedSubscription.unsubscribe();\n            this._textsChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods - implementation of NoDataRenderer #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        const dataLoader: DataLoader<DataResponse> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse>;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._stateChangedSubscription.unsubscribe();\n            this._stateChangedSubscription = null;\n\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader)\n        {\n            this._dataLoader = dataLoader;\n\n            this._stateChangedSubscription = this._dataLoader.stateChange.subscribe(() => this._processLoaderState());\n        }\n\n        this._textsChangedSubscription = this._stringLocalization.textsChange.subscribe(() => this._initTexts());\n        this._initTexts();\n        \n        this.invalidateVisuals();\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process current loader state\n     */\n    protected _processLoaderState()\n    {\n        if(!this._dataLoader)\n        {\n            return;\n        }\n\n        switch(this._dataLoader.state)\n        {\n            case DataLoaderState.NoDataLoading:\n            {\n                this.text = this._texts.loading;\n\n                break;\n            }\n            case DataLoaderState.NoData:\n            {\n                this.text = this._texts.noData;\n\n                break;\n            }\n            case DataLoaderState.NotLoadedYet:\n            {\n                this.text = this._texts.notLoaded;\n\n                break;\n            }\n            default:\n            //case DataLoaderState.Loaded:\n            //case DataLoaderState.DataLoading:\n            {\n                this.text = null;\n\n                break;\n            }\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize texts\n     */\n    protected _initTexts()\n    {\n        Object.keys(this.options.texts).forEach(key =>\n        {\n            this._texts[key] = this._stringLocalization.get(this.options.texts[key]);\n        });\n\n        this._processLoaderState();\n    }\n}","<div [ngClass]=\"options?.cssClasses?.wrapperDiv\" *ngIf=\"!!text\">\r\n    <span [ngClass]=\"options?.cssClasses?.textSpan\" *ngIf=\"!options?.template; else options?.template\">{{text}}</span>\r\n</div>","import {InjectionToken} from '@angular/core';\n\nimport {RowSelectorOptions, RowSelector} from './rowSelector.interface';\nimport {Grid} from '../../components/grid';\n\n/**\n * Token for injecting options for row selector\n */\nexport const ROW_SELECTOR_OPTIONS: InjectionToken<RowSelectorOptions> = new InjectionToken<RowSelectorOptions>('ROW_SELECTOR_OPTIONS');\n\n/**\n * Constant used for accessing row selector in grid\n */\nexport const ROW_SELECTOR = 'ROW_SELECTOR';\n\n/**\n * Applies block of row selection to grid, if row was not selected checkbox change event will be blocked\n * @param grid - Instance of grid which is used\n * @param itm - Data item for row\n * @param event - Mouse event that occured\n */\nexport function applyRowSelectionBlock<TItem>(grid: Grid, itm: TItem, event: MouseEvent)\n{\n    const rowSelector = grid.getPlugin<RowSelector>(ROW_SELECTOR);\n\n    if(!rowSelector.isSelected(itm) && (event.target as HTMLInputElement).checked)\n    {\n        event.preventDefault();\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, EventEmitter, Inject, Optional, OnDestroy} from '@angular/core';\nimport {extend, isBlank} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {GridPluginGeneric} from '../../../misc';\nimport {DataLoader} from '../../dataLoader';\nimport {DATA_LOADER} from '../../dataLoader/types';\nimport {ROW_SELECTOR_OPTIONS} from '../types';\nimport {BasicRowSelectorOptions, BasicRowSelector} from './basicRowSelector.interface';\n\n/**\n * Default options for row selector\n * @internal\n */\nconst defaultOptions: BasicRowSelectorOptions =\n{\n    getRowId: null,\n    autoResetOnDataChange: false,\n    multiSelection: true,\n    getRowData: null\n};\n\n/**\n * Component used for handling row selection\n *\n * This component requires `ContentRenderer` which supports row selection, one possible use is with `TableContentRendererComponent` with `AdvancedTableBodyContentRendererComponent`, any\n * other `ContentRenderer` that supports row selection can be used\n *\n * Working with `BasicRowSelectorComponent` from code should be done using extensions methods\n *\n * @example\n * If you want to use row selection you must provide at least `getRowId`, you can use `getRowData` for obtaining selected data in requested format see below example:\n * \n * ``` typescript\n * var gridOptions =\n * {\n *     plugins:\n *     {\n *         contentRenderer:\n *         {\n *             options: <TableContentRendererOptions>\n *             {\n *                 plugins:\n *                 {\n *                     bodyRenderer:\n *                     {\n *                         type: AdvancedTableBodyContentRendererComponent\n *                     }\n *                 }\n *             }\n *         },\n *         rowSelector:\n *         {\n *             options: <RowSelectorOptions<SelectedDataType, DataType, string>>\n *             {\n *                 getRowId: item => item.uuid,\n *                 getRowData: item =>\n *                 {\n *                     return {\n *                         uuid: item.uuid,\n *                         myNumber: item.myNumber,\n *                         myString: item.myString\n *                     };\n *                 }\n *             }\n *         }\n *     }\n * };\n * ```\n *\n * @example\n * Example usage with `AdvancedTableBodyContentRendererComponent`\n * \n * ``` html\n * <ng-grid #grid [gridOptions]=\"gridOptions\">\n *     <basic-table-metadata>\n *         <basic-table-column id=\"uuid\" name=\"uuid\" title=\"Id\"></basic-table-column>\n *         <basic-table-column id=\"myNumber\" name=\"myNumber\" title=\"Number value\"></basic-table-column>\n *         <basic-table-column id=\"myString\" name=\"myString\" title=\"String value\"></basic-table-column>\n *\n *         <basic-table-column id=\"rowSelection\" name=\"rowSelection\" title=\"Row selection\">\n *             <!-- selection of all rows in header -->\n *             <ng-template #headerTemplate>\n *                 <input type=\"checkbox\" (click)=\"toggleAllSelected($event.target.checked, $event)\" [checked]=\"selectedAll\">\n *             </ng-template>\n *\n *             <!-- selection of single row -->\n *             <ng-template #bodyTemplate let-item let-rowSelector=\"rowSelector\" let-isSelected=\"isSelected\">\n *                 <input type=\"checkbox\" (click)=\"rowSelector.selectItem(item, $event.target.checked)\" [checked]=\"isSelected\">\n *             </ng-template>\n *         </basic-table-column>\n *     </basic-table-metadata>\n * </ng-grid>\n * ```\n *\n * @example\n * Selecting all items in code\n * \n * ``` typescript\n * public selectedAll: boolean = false;\n * \n * (at)ViewChild('grid')\n * public grid: GridComponent;\n * \n * public ngAfterViewInit()\n * {\n *     this._setSelectedFlags();\n *\n *     let dataLoader = this.grid.getPlugin<DataLoader<DataResponse>>(DATA_LOADER);\n *     let rowSelector = this.grid.getPlugin<RowSelector>(ROW_SELECTOR);\n *\n *     rowSelector.selectedChange.subscribe(() => this._setSelectedFlags());\n *     dataLoader.resultChange.subscribe(() => this._setSelectedFlags());\n * }\n *\n * public toggleAllSelected(value: boolean)\n * {\n *     this.grid.execute(selectAllOnPage(value));\n * }\n *\n * private _setSelectedFlags()\n * {\n *     this.selectedAll = this.grid.executeAndReturn(areSelectedAllOnPage());\n *\n *     this._changeDetector.detectChanges();\n * }\n * ```\n */\n@Component(\n{\n    selector: 'ng-basic-row-selector',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BasicRowSelectorComponent<TSelectedData = any, TData = any, TId = any> implements BasicRowSelector<TSelectedData, TData, TId>, GridPluginGeneric<BasicRowSelectorOptions<TSelectedData, TData, TId>>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options for grid plugin\n     */\n    protected _options: BasicRowSelectorOptions<TSelectedData, TData, TId>;\n\n    /**\n     * Data loader used for loading data\n     */\n    protected _dataLoader: DataLoader;\n\n    /**\n     * Subscription for data changes\n     */\n    protected _dataChangedSubscription: Subscription;\n\n    //######################### public properties - implementation of RowSelector #########################\n\n    /**\n     * Options for grid plugin\n     */\n    public get options(): BasicRowSelectorOptions<TSelectedData, TData, TId>\n    {\n        return this._options;\n    }\n    public set options(options: BasicRowSelectorOptions<TSelectedData, TData, TId>)\n    {\n        this._options = extend(true, this._options, options) as BasicRowSelectorOptions<TSelectedData, TData, TId>;\n    }\n\n    /**\n     * Array of currently selected row ids\n     */\n    public selectedIds: TId[] = [];\n\n    /**\n     * Array of currently selected row data\n     */\n    public selectedData: TSelectedData[] = [];\n\n    /**\n     * Occurs when selection has changed\n     */\n    public selectedChange?: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(@Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances,\n                public pluginElement: ElementRef,\n                @Inject(ROW_SELECTOR_OPTIONS) @Optional() options?: BasicRowSelectorOptions<TSelectedData, TData, TId>)\n    {\n        this._options = extend(true, {}, defaultOptions, options) as BasicRowSelectorOptions<TSelectedData, TData, TId>;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._dataChangedSubscription)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods - implementation of RowSelector #########################\n\n    /**\n     * Resets current selection\n     * @param emit - Indication whether emit selection change\n     */\n    public resetSelection(emit: boolean = true)\n    {\n        this.selectedIds = [];\n        this.selectedData = [];\n\n        if(emit)\n        {\n            this.selectedChange.emit();\n        }\n    }\n\n    /**\n     * Adds item to selection (or remove it from selection if deselect is true)\n     * @param item - Item that is going to be selected\n     * @param select - Indication whether select specified item, defaults to true\n     */\n    public selectItem(item: TData, select: boolean = true)\n    {\n        if(isBlank(this.options.getRowId))\n        {\n            throw new Error('Missing \"getRowId\" method in options before first use!');\n        }\n\n        if(!this.options.multiSelection)\n        {\n            this.resetSelection(false);\n        }\n\n        const id = this.options.getRowId(item);\n        const index = this.selectedIds.indexOf(id);\n\n        //select if not selected\n        if(select && index < 0)\n        {\n            this.selectedIds.push(id);\n            this.selectedData.push(this.options.getRowData(item));\n\n            this.selectedChange.emit();\n        }\n        //remove from selection if selected\n        else if(!select && index >= 0)\n        {\n            this.selectedIds.splice(index, 1);\n            this.selectedData.splice(index, 1);\n            this.selectedIds = [...this.selectedIds];\n            this.selectedData = [...this.selectedData];\n\n            this.selectedChange.emit();\n        }\n    }\n\n    /**\n     * Gets indication whether item is currently selected\n     * @param item - Item that is tested for current selection\n     */\n    public isSelected(item: TData): boolean\n    {\n        if(isBlank(this.options.getRowId))\n        {\n            throw new Error('Missing \"getRowId\" method in options before first use!');\n        }\n\n        const id = this.options.getRowId(item);\n\n        return this.selectedIds.indexOf(id) > -1;\n    }\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        const dataLoader: DataLoader = this.gridPlugins[DATA_LOADER] as DataLoader;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader)\n        {\n            this._dataLoader = dataLoader;\n\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() =>\n            {\n                if(this.options.autoResetOnDataChange)\n                {\n                    this.resetSelection(false);\n                }\n            });\n        }\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n        if(!this.options.getRowData)\n        {\n            this.options.getRowData = this.options.getRowId as any;\n        }\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\n\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GridPluginGeneric} from '../../../misc';\nimport {NoGridInitializer, NoGridInitializerOptions} from './noGridInitializer.interface';\n\n\n/**\n * Component used for rendering no grid initializer\n */\n@Component(\n{\n    selector: 'ng-no-grid-initializer',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NoGridInitializerComponent implements NoGridInitializer, GridPluginGeneric<NoGridInitializerOptions>\n{\n    //######################### public properties - implementation of NoGridInitializer #########################\n\n    /**\n     * Element that represents plugin\n     */\n    public pluginElement: ElementRef;\n\n    /**\n     * Options for grid plugin\n     */\n    public options: NoGridInitializerOptions;\n\n    /**\n     * Grid plugin instances available for this plugin\n     */\n    public gridPlugins: GridPluginInstances;\n\n    //######################### public methods - implementation of NoGridInitializer #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    /**\n     * Gets stored page\n     */\n    public getPage(): number\n    {\n        return null;\n    }\n\n    /**\n     * Sets current page when changed\n     * @param page - Page to be stored\n     */\n    public setPage()\n    {\n    }\n\n    /**\n     * Gets stored items per page\n     */\n    public getItemsPerPage(): number\n    {\n        return null;\n    }\n\n    /**\n     * Sets current items per page when changed\n     * @param itemsPerPage - Items per page to be stored\n     */\n    public setItemsPerPage()\n    {\n    }\n\n    /**\n     * Gets stored ordering\n     */\n    public getOrdering(): string\n    {\n        return null;\n    }\n\n    /**\n     * Sets current ordering when changed\n     * @param ordering - Ordering as string to be stored\n     */\n    public setOrdering(): void\n    {\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Inject, Optional, Type, Input, OnInit, AfterViewInit, ContentChild, forwardRef, resolveForwardRef, ChangeDetectorRef, FactoryProvider} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Observable, BehaviorSubject} from 'rxjs';\n\nimport {GridPluginInstances, Grid, GridFunction} from './grid.interface';\nimport {GRID_PLUGIN_INSTANCES} from './types';\nimport {GridOptions, PluginDescription, GridPlugin} from '../../misc';\nimport {GRID_OPTIONS, PAGING_TYPE, DATA_LOADER_TYPE, CONTENT_RENDERER_TYPE, METADATA_SELECTOR_TYPE, NO_DATA_RENDERER_TYPE, ROW_SELECTOR_TYPE, GRID_INITIALIZER_TYPE} from '../../misc/types';\nimport {PagingPosition} from '../../misc/enums';\nimport {Paging} from '../../plugins/paging';\nimport {BasicPagingComponent} from '../../plugins/paging/components';\nimport {PAGING} from '../../plugins/paging/types';\nimport {MetadataGatherer} from '../metadata';\nimport {METADATA_GATHERER} from '../metadata/types';\nimport {DataLoader} from '../../plugins/dataLoader';\nimport {AsyncDataLoaderComponent} from '../../plugins/dataLoader/components';\nimport {DATA_LOADER} from '../../plugins/dataLoader/types';\nimport {ContentRenderer} from '../../plugins/contentRenderer';\nimport {TableContentRendererComponent} from '../../plugins/contentRenderer/components';\nimport {CONTENT_RENDERER} from '../../plugins/contentRenderer/types';\nimport {MetadataSelector} from '../../plugins/metadataSelector';\nimport {NoMetadataSelectorComponent} from '../../plugins/metadataSelector/components';\nimport {METADATA_SELECTOR} from '../../plugins/metadataSelector/types';\nimport {NoDataRenderer} from '../../plugins/noDataRenderer';\nimport {SimpleNoDataRendererComponent} from '../../plugins/noDataRenderer/components';\nimport {NO_DATA_RENDERER} from '../../plugins/noDataRenderer/types';\nimport {RowSelector} from '../../plugins/rowSelector';\nimport {BasicRowSelectorComponent} from '../../plugins/rowSelector/components';\nimport {ROW_SELECTOR} from '../../plugins/rowSelector/types';\nimport {GridInitializer} from '../../plugins/gridInitializer';\nimport {NoGridInitializerComponent} from '../../plugins/gridInitializer/components';\nimport {GRID_INITIALIZER} from '../../plugins/gridInitializer/types';\n\n//TODO - make grid css class customizable\n\n/**\n * Default 'GridOptions'\n * @internal\n */\nconst defaultOptions: GridOptions =\n{\n    autoInitialize: true,\n    pagingPosition: PagingPosition.Bottom,\n    plugins:\n    {\n        paging: <PluginDescription<Paging>>\n        {\n            type: forwardRef(() => BasicPagingComponent)\n        },\n        metadataSelector: <PluginDescription<MetadataSelector>>\n        {\n            type: forwardRef(() => NoMetadataSelectorComponent)\n        },\n        dataLoader: <PluginDescription<DataLoader>>\n        {\n            type: forwardRef(() => AsyncDataLoaderComponent)\n        },\n        contentRenderer: <PluginDescription<ContentRenderer>>\n        {\n            type: forwardRef(() => TableContentRendererComponent)\n        },\n        noDataRenderer: <PluginDescription<NoDataRenderer>>\n        {\n            type: forwardRef(() => SimpleNoDataRendererComponent)\n        },\n        rowSelector: <PluginDescription<RowSelector>>\n        {\n            type: forwardRef(() => BasicRowSelectorComponent)\n        },\n        gridInitializer: <PluginDescription<GridInitializer>>\n        {\n            type: forwardRef(() => NoGridInitializerComponent)\n        }\n    }\n};\n\n/**\n * Grid component used for rendering grid\n */\n@Component(\n{\n    selector: 'ng-grid',\n    templateUrl: 'grid.component.html',\n    styleUrls: ['grid.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: GRID_PLUGIN_INSTANCES,\n            useFactory: () => {return {};}\n        }\n    ]\n})\nexport class GridComponent implements OnInit, AfterViewInit, Grid\n{\n    //######################### private fields #########################\n\n    /**\n     * Grid options\n     */\n    private _gridOptions: GridOptions;\n\n    /**\n     * Subject used for indication that grid was initialized\n     */\n    private _initializedSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets grid options\n     */\n    @Input()\n    public get gridOptions(): GridOptions\n    {\n        return this._gridOptions;\n    }\n    public set gridOptions(options: GridOptions)\n    {\n        this._gridOptions = extend(true, this._gridOptions, options);\n    }\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs every time when grid is initialized or reinitialized\n     */\n    public get initialized(): Observable<boolean>\n    {\n        return this._initializedSubject.asObservable();\n    }\n\n    //######################### public properties - children #########################\n\n    /**\n     * Metadata gatherer instance\n     * @internal\n     */\n    @ContentChild(METADATA_GATHERER)\n    public metadataGatherer: MetadataGatherer;\n\n    //######################### constructors #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) private _pluginInstances: GridPluginInstances,\n                @Inject(GRID_OPTIONS) @Optional() options?: GridOptions,\n                @Inject(PAGING_TYPE) @Optional() pagingType?: Type<Paging>,\n                @Inject(GRID_INITIALIZER_TYPE) @Optional() gridInitializerType?: Type<GridInitializer>,\n                @Inject(DATA_LOADER_TYPE) @Optional() dataLoaderType?: Type<DataLoader>,\n                @Inject(CONTENT_RENDERER_TYPE) @Optional() contentRendererType?: Type<ContentRenderer>,\n                @Inject(METADATA_SELECTOR_TYPE) @Optional() metadataSelectorType?: Type<MetadataSelector>,\n                @Inject(NO_DATA_RENDERER_TYPE) @Optional() noDataRendererType?: Type<NoDataRenderer>,\n                @Inject(ROW_SELECTOR_TYPE) @Optional() rowSelectorType?: Type<RowSelector>)\n    {\n        const opts: GridOptions = extend({}, options);\n\n        if(!opts.plugins)\n        {\n            opts.plugins = {};\n        }\n\n        if(pagingType)\n        {\n            if(!opts.plugins.paging)\n            {\n                opts.plugins.paging = {};\n            }\n\n            opts.plugins.paging.type = pagingType;\n        }\n\n        if(gridInitializerType)\n        {\n            if(!opts.plugins.gridInitializer)\n            {\n                opts.plugins.gridInitializer = {};\n            }\n\n            opts.plugins.gridInitializer.type = gridInitializerType;\n        }\n\n        if(dataLoaderType)\n        {\n            if(!opts.plugins.dataLoader)\n            {\n                opts.plugins.dataLoader = {};\n            }\n\n            opts.plugins.dataLoader.type = dataLoaderType;\n        }\n        \n        if(contentRendererType)\n        {\n            if(!opts.plugins.contentRenderer)\n            {\n                opts.plugins.contentRenderer = {};\n            }\n\n            opts.plugins.contentRenderer.type = contentRendererType;\n        }\n\n        if(metadataSelectorType)\n        {\n            if(!opts.plugins.metadataSelector)\n            {\n                opts.plugins.metadataSelector = {};\n            }\n\n            opts.plugins.metadataSelector.type = metadataSelectorType;\n        }\n\n        if(noDataRendererType)\n        {\n            if(!opts.plugins.noDataRenderer)\n            {\n                opts.plugins.noDataRenderer = {};\n            }\n\n            opts.plugins.noDataRenderer.type = noDataRendererType;\n        }\n\n        if(rowSelectorType)\n        {\n            if(!opts.plugins.rowSelector)\n            {\n                opts.plugins.rowSelector = {};\n            }\n\n            opts.plugins.rowSelector.type = rowSelectorType;\n        }\n\n        this._gridOptions = extend(true, {}, defaultOptions, opts);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit()\n    {\n        this.initOptions();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        if(this._gridOptions.autoInitialize)\n        {\n            this.initialize();\n        }\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Sets paging component\n     * @param paging - Created paging that is rendered\n     * @internal\n     */\n    public setPagingComponent(paging: Paging)\n    {\n        if(!paging)\n        {\n            return;\n        }\n\n        this._pluginInstances[PAGING] = paging;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.paging && this._gridOptions.plugins.paging.options)\n        {\n            paging.options = this._gridOptions.plugins.paging.options;\n        }\n\n        paging.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.paging && this._gridOptions.plugins.paging.instanceCallback)\n        {\n            this._gridOptions.plugins.paging.instanceCallback(paging);\n        }\n    }\n\n    /**\n     * Sets grid initializer component\n     * @param gridInitializer - Created grid initializer that is used\n     * @internal\n     */\n    public setGridInitializerComponent(gridInitializer: GridInitializer)\n    {\n        if(!gridInitializer)\n        {\n            return;\n        }\n\n        this._pluginInstances[GRID_INITIALIZER] = gridInitializer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.gridInitializer && this._gridOptions.plugins.gridInitializer.options)\n        {\n            gridInitializer.options = this._gridOptions.plugins.gridInitializer.options;\n        }\n\n        gridInitializer.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.gridInitializer && this._gridOptions.plugins.gridInitializer.instanceCallback)\n        {\n            this._gridOptions.plugins.gridInitializer.instanceCallback(gridInitializer);\n        }\n    }\n\n    /**\n     * Sets metadata selector component\n     * @param metadataSelector - Created metadata selector that is used\n     * @internal\n     */\n    public setMetadataSelectorComponent(metadataSelector: MetadataSelector)\n    {\n        if(!metadataSelector)\n        {\n            return;\n        }\n\n        this._pluginInstances[METADATA_SELECTOR] = metadataSelector;\n\n        metadataSelector.metadataGatherer = this.metadataGatherer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.metadataSelector && this._gridOptions.plugins.metadataSelector.options)\n        {\n            metadataSelector.options = this._gridOptions.plugins.metadataSelector.options;\n        }\n\n        metadataSelector.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.metadataSelector && this._gridOptions.plugins.metadataSelector.instanceCallback)\n        {\n            this._gridOptions.plugins.metadataSelector.instanceCallback(metadataSelector);\n        }\n    }\n\n    /**\n     * Sets data loader component\n     * @param dataLoader - Created data loader that is used\n     * @internal\n     */\n    public setDataLoaderComponent(dataLoader: DataLoader)\n    {\n        if(!dataLoader)\n        {\n            return;\n        }\n\n        this._pluginInstances[DATA_LOADER] = dataLoader;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.dataLoader && this._gridOptions.plugins.dataLoader.options)\n        {\n            dataLoader.options = this._gridOptions.plugins.dataLoader.options;\n        }\n\n        dataLoader.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.dataLoader && this._gridOptions.plugins.dataLoader.instanceCallback)\n        {\n            this._gridOptions.plugins.dataLoader.instanceCallback(dataLoader);\n        }\n    }\n\n    /**\n     * Sets content renderer component\n     * @param contentRenderer - Created content renderer that is rendered\n     * @internal\n     */\n    public setContentRendererComponent(contentRenderer: ContentRenderer)\n    {\n        if(!contentRenderer)\n        {\n            return;\n        }\n\n        this._pluginInstances[CONTENT_RENDERER] = contentRenderer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.contentRenderer && this._gridOptions.plugins.contentRenderer.options)\n        {\n            contentRenderer.options = this._gridOptions.plugins.contentRenderer.options;\n        }\n\n        contentRenderer.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.contentRenderer && this._gridOptions.plugins.contentRenderer.instanceCallback)\n        {\n            this._gridOptions.plugins.contentRenderer.instanceCallback(contentRenderer);\n        }\n    }\n\n    /**\n     * Sets no data renderer component\n     * @param noDataRenderer - Created no data renderer that is rendered\n     * @internal\n     */\n    public setNoDataRendererComponent(noDataRenderer: NoDataRenderer)\n    {\n        if(!noDataRenderer)\n        {\n            return;\n        }\n\n        this._pluginInstances[NO_DATA_RENDERER] = noDataRenderer;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.noDataRenderer && this._gridOptions.plugins.noDataRenderer.options)\n        {\n            noDataRenderer.options = this._gridOptions.plugins.noDataRenderer.options;\n        }\n\n        noDataRenderer.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.noDataRenderer && this._gridOptions.plugins.noDataRenderer.instanceCallback)\n        {\n            this._gridOptions.plugins.noDataRenderer.instanceCallback(noDataRenderer);\n        }\n    }\n\n    /**\n     * Sets row selector component\n     * @param rowSelector - Created row selector that is rendered\n     * @internal\n     */\n    public setRowSelectorComponent(rowSelector: RowSelector)\n    {\n        if(!rowSelector)\n        {\n            return;\n        }\n\n        this._pluginInstances[ROW_SELECTOR] = rowSelector;\n\n        if(this._gridOptions.plugins && this._gridOptions.plugins.rowSelector && this._gridOptions.plugins.rowSelector.options)\n        {\n            rowSelector.options = this._gridOptions.plugins.rowSelector.options;\n        }\n\n        rowSelector.initOptions();\n        \n        if(this._gridOptions.plugins && this._gridOptions.plugins.rowSelector && this._gridOptions.plugins.rowSelector.instanceCallback)\n        {\n            this._gridOptions.plugins.rowSelector.instanceCallback(rowSelector);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize component, automatically called once if not blocked by options\n     */\n    public initialize()\n    {\n        this._pluginInstances[ROW_SELECTOR].initialize();\n        this._pluginInstances[METADATA_SELECTOR].initialize();\n        this._pluginInstances[GRID_INITIALIZER].initialize();\n        this._pluginInstances[PAGING].initialize();\n        this._pluginInstances[CONTENT_RENDERER].initialize();\n        this._pluginInstances[NO_DATA_RENDERER].initialize();\n        this._pluginInstances[DATA_LOADER].initialize();\n\n        this._initializedSubject.next(true);\n    }\n\n    /**\n     * Initialize options, automaticaly called during init phase, but can be used to reinitialize GridOptions\n     */\n    public initOptions()\n    {\n        if(this._gridOptions.plugins)\n        {\n            if(this._gridOptions.plugins.paging)\n            {\n                this._gridOptions.plugins.paging.type = resolveForwardRef(this._gridOptions.plugins.paging.type);\n\n                if(this._gridOptions.plugins.paging.instance &&\n                   this._gridOptions.plugins.paging.instance != this._pluginInstances[PAGING])\n                {\n                    this._pluginInstances[PAGING] = this._gridOptions.plugins.paging.instance;\n                    this._gridOptions.plugins.paging.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[PAGING])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.paging && this._gridOptions.plugins.paging.options)\n                    {\n                        this._pluginInstances[PAGING].options = this._gridOptions.plugins.paging.options;\n                    }\n\n                    this._pluginInstances[PAGING].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.gridInitializer)\n            {\n                this._gridOptions.plugins.gridInitializer.type = resolveForwardRef(this._gridOptions.plugins.gridInitializer.type);\n\n                if(this._gridOptions.plugins.gridInitializer.instance &&\n                   this._gridOptions.plugins.gridInitializer.instance != this._pluginInstances[GRID_INITIALIZER])\n                {\n                    this._pluginInstances[GRID_INITIALIZER] = this._gridOptions.plugins.gridInitializer.instance;\n                    this._gridOptions.plugins.gridInitializer.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[GRID_INITIALIZER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.gridInitializer && this._gridOptions.plugins.gridInitializer.options)\n                    {\n                        this._pluginInstances[GRID_INITIALIZER].options = this._gridOptions.plugins.gridInitializer.options;\n                    }\n\n                    this._pluginInstances[GRID_INITIALIZER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.dataLoader)\n            {\n                this._gridOptions.plugins.dataLoader.type = resolveForwardRef(this._gridOptions.plugins.dataLoader.type);\n\n                if(this._gridOptions.plugins.dataLoader.instance &&\n                   this._gridOptions.plugins.dataLoader.instance != this._pluginInstances[DATA_LOADER])\n                {\n                    this._pluginInstances[DATA_LOADER] = this._gridOptions.plugins.dataLoader.instance;\n                    this._gridOptions.plugins.dataLoader.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[DATA_LOADER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.dataLoader && this._gridOptions.plugins.dataLoader.options)\n                    {\n                        this._pluginInstances[DATA_LOADER].options = this._gridOptions.plugins.dataLoader.options;\n                    }\n\n                    this._pluginInstances[DATA_LOADER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.contentRenderer)\n            {\n                this._gridOptions.plugins.contentRenderer.type = resolveForwardRef(this._gridOptions.plugins.contentRenderer.type);\n\n                if(this._gridOptions.plugins.contentRenderer.instance &&\n                   this._gridOptions.plugins.contentRenderer.instance != this._pluginInstances[CONTENT_RENDERER])\n                {\n                    this._pluginInstances[CONTENT_RENDERER] = this._gridOptions.plugins.contentRenderer.instance;\n                    this._gridOptions.plugins.contentRenderer.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[CONTENT_RENDERER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.contentRenderer && this._gridOptions.plugins.contentRenderer.options)\n                    {\n                        this._pluginInstances[CONTENT_RENDERER].options = this._gridOptions.plugins.contentRenderer.options;\n                    }\n\n                    this._pluginInstances[CONTENT_RENDERER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.metadataSelector)\n            {\n                this._gridOptions.plugins.metadataSelector.type = resolveForwardRef(this._gridOptions.plugins.metadataSelector.type);\n\n                if(this._gridOptions.plugins.metadataSelector.instance &&\n                   this._gridOptions.plugins.metadataSelector.instance != this._pluginInstances[METADATA_SELECTOR])\n                {\n                    this._pluginInstances[METADATA_SELECTOR] = this._gridOptions.plugins.metadataSelector.instance;\n                    this._gridOptions.plugins.metadataSelector.instance.gridPlugins = this._pluginInstances;\n                    this._gridOptions.plugins.metadataSelector.instance.metadataGatherer = this.metadataGatherer;\n                }\n\n                if(this._pluginInstances[METADATA_SELECTOR])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.metadataSelector && this._gridOptions.plugins.metadataSelector.options)\n                    {\n                        this._pluginInstances[METADATA_SELECTOR].options = this._gridOptions.plugins.metadataSelector.options;\n                    }\n\n                    this._pluginInstances[METADATA_SELECTOR].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.noDataRenderer)\n            {\n                this._gridOptions.plugins.noDataRenderer.type = resolveForwardRef(this._gridOptions.plugins.noDataRenderer.type);\n\n                if(this._gridOptions.plugins.noDataRenderer.instance &&\n                   this._gridOptions.plugins.noDataRenderer.instance != this._pluginInstances[NO_DATA_RENDERER])\n                {\n                    this._pluginInstances[NO_DATA_RENDERER] = this._gridOptions.plugins.noDataRenderer.instance;\n                    this._gridOptions.plugins.noDataRenderer.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[NO_DATA_RENDERER])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.noDataRenderer && this._gridOptions.plugins.noDataRenderer.options)\n                    {\n                        this._pluginInstances[NO_DATA_RENDERER].options = this._gridOptions.plugins.noDataRenderer.options;\n                    }\n\n                    this._pluginInstances[NO_DATA_RENDERER].initOptions();\n                }\n            }\n\n            if(this._gridOptions.plugins.rowSelector)\n            {\n                this._gridOptions.plugins.rowSelector.type = resolveForwardRef(this._gridOptions.plugins.rowSelector.type);\n\n                if(this._gridOptions.plugins.rowSelector.instance &&\n                   this._gridOptions.plugins.rowSelector.instance != this._pluginInstances[ROW_SELECTOR])\n                {\n                    this._pluginInstances[ROW_SELECTOR] = this._gridOptions.plugins.rowSelector.instance;\n                    this._gridOptions.plugins.rowSelector.instance.gridPlugins = this._pluginInstances;\n                }\n\n                if(this._pluginInstances[ROW_SELECTOR])\n                {\n                    if(this._gridOptions.plugins && this._gridOptions.plugins.rowSelector && this._gridOptions.plugins.rowSelector.options)\n                    {\n                        this._pluginInstances[ROW_SELECTOR].options = this._gridOptions.plugins.rowSelector.options;\n                    }\n\n                    this._pluginInstances[ROW_SELECTOR].initOptions();\n                }\n            }\n        }\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Gets instance of plugin by its id\n     * @param pluginId - Id of plugin, use constants\n     */\n    public getPlugin<PluginType extends GridPlugin>(pluginId: string): PluginType\n    {\n        return this._pluginInstances[pluginId] as PluginType;\n    }\n\n    /**\n     * Sets GridPluginInstances into GridPlugin\n     * @param plugin - Grid plugin to be filled with grid GridPluginInstances\n     */\n    public setGridPluginInstances(plugin: GridPlugin)\n    {\n        plugin.gridPlugins = this._pluginInstances;\n    }\n\n    /**\n     * Executes actions on grid\n     * @param actions - Array of actions that are executed over grid\n     */\n    public execute(...actions: ((grid: GridComponent) => void)[])\n    {\n        if(!actions)\n        {\n            return;\n        }\n\n        actions.forEach(action => action(this));\n    }\n\n    /**\n     * Executes function on grid and returns result\n     * @param func - Function that is executed and its result is returned\n     */\n    public executeAndReturn<TResult>(func: GridFunction<TResult>): TResult\n    {\n        if(!func)\n        {\n            return null;\n        }\n\n        return func(this);\n    }\n}","<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.metadataSelector?.type\" (ngComponentOutletExCreated)=\"setMetadataSelectorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.dataLoader?.type\" (ngComponentOutletExCreated)=\"setDataLoaderComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.rowSelector?.type\" (ngComponentOutletExCreated)=\"setRowSelectorComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.gridInitializer?.type\" (ngComponentOutletExCreated)=\"setGridInitializerComponent($event)\"></ng-template>\r\n\r\n<ng-template [ngIf]=\"gridOptions?.pagingPosition == 0\">\r\n    <ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.paging?.type\" (ngComponentOutletExCreated)=\"setPagingComponent($event)\"></ng-template>\r\n</ng-template>\r\n\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.contentRenderer?.type\" (ngComponentOutletExCreated)=\"setContentRendererComponent($event)\"></ng-template>\r\n<ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.noDataRenderer?.type\" (ngComponentOutletExCreated)=\"setNoDataRendererComponent($event)\"></ng-template>\r\n\r\n<ng-template [ngIf]=\"gridOptions?.pagingPosition == 1\">\r\n    <ng-template [ngComponentOutletEx]=\"gridOptions?.plugins?.paging?.type\" (ngComponentOutletExCreated)=\"setPagingComponent($event)\"></ng-template>\r\n</ng-template>","import {BasicTableColumn} from './basicTable.interface';\n\n/**\n * Context for basic table column template\n */\nexport class BasicTableColumnContext<TData = any>\n{\n    //######################### public properties #########################\n\n    /**\n     * Gets row index of displayed item\n     * @returns number\n     */\n    public get rowIndex(): number\n    {\n        return this.startingIndex + this.index;\n    }\n\n    //######################### constructor #########################\n    \n    /**\n     * Creates instance of BasicTableColumnContext\n     * @param $implicit - Data of current row\n     * @param column - Object of column metadata itself\n     * @param index - Index of rendered row in current page\n     * @param startingIndex - Starting index of currently displayed items\n     */\n    constructor(public $implicit: TData, \n                public column: BasicTableColumn<TData>, \n                public index: number, \n                public startingIndex: number)\n    {\n    }\n}","import {Component, ChangeDetectionStrategy, Input, TemplateRef, ContentChild} from '@angular/core';\n\nimport {BasicTableColumn} from './basicTable.interface';\nimport {BasicTableColumnContext} from '../types';\n\n/**\n * Component for gathering information about basic table column\n */\n@Component(\n{\n    selector: 'basic-table-column',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BasicTableColumnComponent<TData = any> implements BasicTableColumn<TData>\n{\n    //######################### public properties - inputs #########################\n    /**\n     * Unique identifier of column\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Name of property which is assigned to this column\n     */\n    @Input()\n    public name: string;\n\n    /**\n     * Title of column that is displayed in grid header\n     */\n    @Input()\n    public title: string;\n\n    /**\n     * Text that is displayed in tooltip over grid header\n     */\n    @Input()\n    public headerTooltip: string;\n\n    /**\n     * Indication whether should be title visible in header\n     */\n    @Input()\n    public titleVisible: boolean = true;\n\n    /**\n     * Indication that this column can be used for ordering\n     */\n    @Input()\n    public ordering: boolean;\n\n    /**\n     * Indication that this column is visible in grid\n     */\n    @Input()\n    public visible: boolean = true;\n\n    /**\n     * Width as style string, value is exactly same (require units)\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Css class that is applied to column header\n     */\n    @Input()\n    public headerClass: string;\n\n    /**\n     * Css class that is applied to each column cell\n     */\n    @Input()\n    public cellClass: string;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Template that is used for rendering of cell header\n     */\n    @ContentChild('headerTemplate')\n    public headerTemplate: TemplateRef<BasicTableColumnContext<TData>>;\n\n    /**\n     * Template that is used for rendering of cell body\n     */\n    @ContentChild('bodyTemplate')\n    public bodyTemplate: TemplateRef<BasicTableColumnContext<TData>>;\n\n    //######################### public methods - helper #########################\n\n    /**\n     * Gets basic table column context\n     */\n    public getColumnContext(data: TData, column: BasicTableColumn<TData>, index: number, startingIndex: number): BasicTableColumnContext<TData>\n    {\n        return new BasicTableColumnContext(data, column, index, startingIndex);\n    }\n}","import {ExistingProvider, Component, ChangeDetectionStrategy, EventEmitter, forwardRef, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\n\nimport {MetadataGatherer} from '../metadata.interface';\nimport {METADATA_GATHERER} from '../types';\nimport {BasicTableColumn, BasicTableMetadata} from './basicTable.interface';\nimport {BasicTableColumnComponent} from './basicTableColumn.component';\n\n/**\n * Component that is used for gathering metadata for basic table\n *\n * @example\n * This is metadata gatherer which works with `BasicTableColumnComponent`\n *\n * Here is sample of use of available options for `BasicTableMetadataGathererComponent` with `BasicTableColumnComponent`\n *\n * ``` html\n * <ng-grid #grid [gridOptions]=\"gridOptions\" class=\"clearfix\" fixedHeader>\n *     <basic-table-metadata>\n *         <!-- Basic usage, id must be unique -->\n *         <!-- if custom template is not provided name is used for getting data -->\n *         <!-- title is displayed in header of grid -->\n *         <basic-table-column id=\"colId\" name=\"colId\" title=\"Id\"></basic-table-column>\n *\n *         <!-- Tooltip that is displayed on hover on column header -->\n *         <!-- This column can be used for ordering -->\n *         <basic-table-column id=\"colId2\" name=\"colId2\" title=\"Col 2\" headerTooltip=\"This is tooltip text\" [ordering]=\"true\"></basic-table-column>\n *\n *         <!-- Title in header is no displayed -->\n *         <!-- Column width set to fixed max 60px -->\n *         <basic-table-column id=\"colId3\" name=\"colId3\" title=\"Col 3\" [titleVisible]=\"false\" width=\"60px\"></basic-table-column>\n *\n *         <!-- Column default behavior will be that it will not be rendered -->\n *         <basic-table-column id=\"colId5\" name=\"colId5\" title=\"Col 5\" [visible]=\"false\"></basic-table-column>\n *\n *         <!-- Column will have custom css class applied to header and each cell -->\n *         <basic-table-column id=\"colId6\" name=\"colId6\" title=\"Col 6\" headerClass=\"header-css-class\" cellClass=\"cell-css-class\"></basic-table-column>\n *\n *         <!-- Column with custom template for header and each cell -->\n *         <basic-table-column id=\"colId7\" name=\"colId7\" title=\"Custom col\">\n *             <!-- Custom header template -->\n *             <ng-template #headerTemplate>\n *                 <div title=\"This is custom tooltip\">Custom column</div>\n *             </ng-template>\n *\n *             <!-- Custom body cell template -->\n *             <ng-template #bodyTemplate let-item let-index=\"index\" let-rowIndex=\"rowIndex\" let-column=\"column\" let-startingIndex=\"startingIndex\">\n *                 <div>\n*                      <div>{{item?.dateItem?.format('L')}} 'item' is row object from data</div>\n*                      <div>{{index}} index is zero based index of row for all items</div>\n*                      <div>{{rowIndex}} rowIndex is zero based index of row for current page</div>\n*                      <div>{{column}} column is object of 'BasicTableColumnComponent'</div>\n*                      <div>{{startingIndex}} startingIndex starting zero based index of current page</div>\n *                 </div>\n *             </ng-template>\n *         </basic-table-column>\n *     </basic-table-metadata>\n * </ng-grid>\n * ```\n */\n@Component(\n{\n    selector: 'ng-grid > basic-table-metadata',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: METADATA_GATHERER,\n            useExisting: forwardRef(() => BasicTableMetadataGathererComponent)\n        }\n    ]\n})\nexport class BasicTableMetadataGathererComponent<TData = any> implements AfterContentInit, MetadataGatherer<BasicTableMetadata<BasicTableColumn<TData>>>\n{\n    //######################### public properties - implementation of MetadataGatherer<BasicTableColumn[]> #########################\n\n    /**\n     * Information that metadata for grid has changed\n     */\n    public metadataChange: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### public properties - children #########################\n\n    /**\n     * Gets all columns defined in gatherer\n     * @internal\n     */\n    @ContentChildren(BasicTableColumnComponent)\n    public columns: QueryList<BasicTableColumnComponent<TData>>;\n\n    //######################### public methods - implementation of MetadataGatherer<BasicTableColumn[]> #########################\n\n    /**\n     * Gets current metadata for grid\n     */\n    public getMetadata(): BasicTableMetadata<BasicTableColumn<TData>>\n    {\n        return {\n            columns: this.columns.toArray()\n        };\n    }\n\n    //######################### public methods - implementation of AfterContentInit #########################\n\n    /**\n     * Called when content was initialized\n     */\n    public ngAfterContentInit()\n    {\n        this.columns.changes.subscribe(() =>\n        {\n            this.metadataChange.emit();\n        });\n    }\n}","/**\n * Token for getting component that is used as metadata gatherer\n */\nexport class METADATA_GATHERER\n{\n}\n\nexport * from './basicTable/basicTableColumn.context';\nexport * from './groupedTable/headerTableGroup.context';","import {Injectable, Inject, Optional, OnDestroy, EventEmitter, ElementRef} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subscription, Subject} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {DataLoader, DataLoaderOptions} from './dataLoader.interface';\nimport {Paging} from '../paging';\nimport {PAGING} from '../paging/types';\nimport {ContentRenderer} from '../contentRenderer';\nimport {CONTENT_RENDERER} from '../contentRenderer/types';\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {GridPluginGeneric} from '../../misc';\nimport {DataLoaderState} from './types';\n\n/**\n * Abstract class that represents any data loader component\n */\n@Injectable()\nexport abstract class DataLoaderAbstractComponent<TOptions extends DataLoaderOptions = any, TOrdering = any, TResult = any> implements DataLoader<TResult>, GridPluginGeneric<TOptions>, OnDestroy\n{\n    //######################### private fields #########################\n\n    /**\n     * Last page used for loading data\n     */\n    private _lastPage: number;\n\n    /**\n     * Last items per page used for loading data\n     */\n    private _lastItemsPerPage: number;\n\n    /**\n     * Last ordering used for loading data\n     */\n    private _lastOrdering: TOrdering;\n\n    //######################### protected fields #########################\n\n    /**\n     * Options for 'AsyncDataLoader'\n     */\n    protected _options: TOptions;\n\n    /**\n     * Paging used in grid\n     */\n    protected _paging: Paging;\n\n    /**\n     * Current state of data loader\n     */\n    protected _state: DataLoaderState = DataLoaderState.NotLoadedYet;\n\n    /**\n     * Subscription for page change in paging\n     */\n    protected _pageChangedSubscription: Subscription;\n\n    /**\n     * Subscription for items per page change in paging\n     */\n    protected _itemsPerPageChangedSubscription: Subscription;\n\n    /**\n     * Subscription for ordering change in content renderer\n     */\n    protected _orderingChangedSubscription: Subscription;\n\n    /**\n     * Content renderer used for rendering data\n     */\n    protected _contentRenderer: ContentRenderer<TOrdering>;\n\n    /**\n     * Subject for debounce dataCallback\n     */\n    protected _debounceSubject: Subject<boolean> = new Subject<boolean>();\n\n    /**\n     * Subscription for debounce dataCallback\n     */\n    protected _debounceSubscription: Subscription = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Current state of data loader\n     */\n    public get state(): DataLoaderState\n    {\n        return this._state;\n    }\n\n    /**\n     * Gets or sets options for 'DataLoader'\n     */\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n    }\n\n    /**\n     * Current result of data loader\n     */\n    public abstract get result(): TResult;\n\n    /**\n     * Indication that data has changed\n     */\n    public resultChange: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Indication that data loader state has changed\n     */\n    public stateChange: EventEmitter<void> =  new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() public gridPlugins: GridPluginInstances)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._debounceSubscription)\n        {\n            this._debounceSubscription.unsubscribe();\n            this._debounceSubscription = null;\n        }\n\n        if(this._pageChangedSubscription)\n        {\n            this._pageChangedSubscription.unsubscribe();\n            this._pageChangedSubscription = null;\n        }\n\n        if(this._itemsPerPageChangedSubscription)\n        {\n            this._itemsPerPageChangedSubscription.unsubscribe();\n            this._itemsPerPageChangedSubscription = null;\n        }\n\n        if(this._orderingChangedSubscription)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n        }\n    }\n\n    //######################### public methodes - implements DataLoader #########################\n\n    /**\n     * Initialize plugin, to be ready to use, initialize communication with other plugins\n     */\n    public initialize()\n    {\n        this._registerDebounce();\n\n        const paging: Paging = this.gridPlugins[PAGING] as Paging;\n\n        if(this._paging && this._paging != paging)\n        {\n            this._pageChangedSubscription.unsubscribe();\n            this._pageChangedSubscription = null;\n            this._itemsPerPageChangedSubscription.unsubscribe();\n            this._itemsPerPageChangedSubscription = null;\n\n            this._paging = null;\n        }\n\n        if(!this._paging)\n        {\n            this._paging = paging;\n\n            this._pageChangedSubscription = this._paging.pageChange.subscribe(() => this._debounceSubject.next());\n            this._itemsPerPageChangedSubscription = this._paging.itemsPerPageChange.subscribe(() => this._debounceSubject.next());\n        }\n\n        const contentRenderer: ContentRenderer<TOrdering> = this.gridPlugins[CONTENT_RENDERER] as ContentRenderer<TOrdering>;\n\n        if(this._contentRenderer && this._contentRenderer != contentRenderer)\n        {\n            this._orderingChangedSubscription.unsubscribe();\n            this._orderingChangedSubscription = null;\n\n            this._contentRenderer = null;\n        }\n\n        if(!this._contentRenderer)\n        {\n            this._contentRenderer = contentRenderer;\n\n            this._orderingChangedSubscription = this._contentRenderer.orderingChange.subscribe(() => this._debounceSubject.next());\n        }\n\n        if(this._options.autoLoadData)\n        {\n            this.loadData();\n        }\n    }\n\n    /**\n     * Initialize plugin options, all operations required to be done with plugin options are handled here\n     */\n    public initOptions()\n    {\n\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals()\n    {\n    }\n\n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    public loadData(force?: boolean)\n    {\n        this._debounceSubject.next(force);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    protected abstract _loadData(force?: boolean);\n\n    /**\n     * Check for changes on input\n     */\n    protected _checkChanges(): boolean\n    {\n        if(this._paging.page != this._lastPage ||\n           this._paging.itemsPerPage != this._lastItemsPerPage ||\n           this._contentRenderer.ordering != this._lastOrdering)\n        {\n            this._lastPage = this._paging.page;\n            this._lastItemsPerPage = this._paging.itemsPerPage;\n            this._lastOrdering = this._contentRenderer.ordering;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Registers debounce subject\n     */\n    private _registerDebounce()\n    {\n        if(this._debounceSubscription)\n        {\n            this._debounceSubscription.unsubscribe();\n            this._debounceSubscription = null;\n        }\n\n        this._debounceSubscription = this._debounceSubject\n            .asObservable()\n            .pipe(debounceTime(this._options.debounceDataCallback))\n            .subscribe(force => this._loadData(force));\n    }\n}","import {InjectionToken} from '@angular/core';\n\nimport {DataLoaderOptions} from './dataLoader.interface';\n\n/**\n * Possible states of data loader\n */\nexport enum DataLoaderState\n{\n    /**\n     * Loader has not loaded any data yet, this is initial state before first try for loading data\n     */\n    NotLoadedYet,\n\n    /**\n     * This state is present during loading of data when there are no data present\n     */\n    NoDataLoading,\n\n    /**\n     * This state is present any time loader is loading new data, while some data were already loaded\n     */\n    DataLoading,\n\n    /**\n     * This state is present when there are no data available after loading of data\n     */\n    NoData,\n\n    /**\n     * Loader loaded and have some data to be displayed\n     */\n    Loaded\n}\n\n/**\n * Constant used for accessing data loader in grid\n */\nexport const DATA_LOADER = 'DATA_LOADER';\n\n/**\n * Token for injecting options for data loader\n */\nexport const DATA_LOADER_OPTIONS: InjectionToken<DataLoaderOptions> = new InjectionToken<DataLoaderOptions>('DATA_LOADER_OPTIONS');","import {EventEmitter, ChangeDetectorRef, Injectable, Inject, Optional, Input, Output, OnDestroy, ElementRef} from '@angular/core';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {PagingOptions, Paging} from './paging.interface';\nimport {GridPluginInstances} from '../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../components/grid/types';\nimport {GridPluginGeneric} from '../../misc';\nimport {DataLoader, DataResponse} from '../dataLoader';\nimport {DATA_LOADER} from '../dataLoader/types';\nimport {GridInitializer} from '../gridInitializer';\nimport {GRID_INITIALIZER} from '../gridInitializer/types';\n\n/**\n * Abstract class that represents any paging component\n */\n@Injectable()\nexport abstract class PagingAbstractComponent<TCssClasses = any, TOptions extends PagingOptions<TCssClasses> = any> implements Paging, GridPluginGeneric<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for changes in data\n     */\n    protected _dataChangedSubscription: Subscription;\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Options specific to paging implementation\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Data loader used within grid\n     */\n    protected _dataLoader?: DataLoader<DataResponse>;\n\n    //######################### public properties #########################\n\n    /**\n     * Zero based index of first displayed item on page\n     */\n    public abstract get firstItemIndex(): number;\n\n    /**\n     * Gets or sets options specific to paging implementation\n     */\n    @Input()\n    public get options(): TOptions\n    {\n        return this._options;\n    }\n    public set options(options: TOptions)\n    {\n        this._options = extend(true, this._options, options) as TOptions;\n\n        this.optionsSet();\n    }\n\n    /**\n     * Gets or sets index of currently selected page\n     */\n    public abstract get page(): number;\n    public abstract set page(page: number);\n\n    /**\n     * Gets or sets number of items currently used for paging\n     */\n    public abstract get itemsPerPage(): number;\n    public abstract set itemsPerPage(itemsPerPage: number);\n\n    /**\n     * Gets or sets number of all items that are paged with current filter criteria\n     */\n    public abstract get totalCount(): number;\n    public abstract set totalCount(totalCount: number);\n\n    /**\n     * Grid plugin instances available for this plugin\n     */\n    public gridPlugins: GridPluginInstances;\n\n    //######################### public properties - events #########################\n\n    /**\n     * Occurs when index of currently selected page has been changed\n     */\n    @Output()\n    public pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /**\n     * Occurs when number of items per page currently selected has been changed\n     */\n    @Output()\n    public itemsPerPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n    //######################### constructor #########################\n    constructor(public pluginElement: ElementRef,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances)\n    {\n        this.gridPlugins = gridPlugins;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        if(this._dataChangedSubscription)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Method that initialize paging component, this method can be used for initialization if paging used dynamicaly\n     */\n    public initialize(): void\n    {\n        const gridInitializer = this.gridPlugins[GRID_INITIALIZER] as GridInitializer;\n        let initialPage = this._options.initialPage;\n        let initialItemsPerPage = this._options.initialItemsPerPage;\n\n        if(gridInitializer)\n        {\n            gridInitializer.initialize();\n\n            const page = gridInitializer.getPage();\n\n            if(isPresent(page))\n            {\n                initialPage = page;\n            }\n\n            const itemsPerPage = gridInitializer.getItemsPerPage();\n\n            if(isPresent(itemsPerPage))\n            {\n                initialItemsPerPage = itemsPerPage;\n            }\n        }\n\n        this.page = initialPage;\n        this.itemsPerPage = initialItemsPerPage;\n\n        const dataLoader: DataLoader<DataResponse> = this.gridPlugins[DATA_LOADER] as DataLoader<DataResponse>;\n\n        if(this._dataLoader && this._dataLoader != dataLoader)\n        {\n            this._dataChangedSubscription.unsubscribe();\n            this._dataChangedSubscription = null;\n\n            this._dataLoader = null;\n        }\n\n        if(!this._dataLoader && dataLoader)\n        {\n            this._dataLoader = dataLoader;\n            this.totalCount = this._dataLoader.result.totalCount;\n\n            this._dataChangedSubscription = this._dataLoader.resultChange.subscribe(() =>\n            {\n                this.totalCount = this._dataLoader.result.totalCount;\n                this.invalidateVisuals();\n            });\n        }\n\n        this._initialized = true;\n    }\n\n    /**\n     * Initialize options\n     */\n    public initOptions()\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Method called when options are set, allowing to do something after that when overriden\n     */\n    protected optionsSet()\n    {\n    }\n}","/**\r\n * Directions for ordering\r\n */\r\nexport enum OrderByDirection\r\n{\r\n    /**\r\n     * Items are ordered ascending\r\n     */\r\n    Ascending,\r\n    \r\n    /**\r\n     * Items are ordered descending\r\n     */\r\n    Descending\r\n}"],"names":["PagingPosition","Paginator","constructor","_base","_itemsPerPage","_page","_itemCount","setPage","page","this","getPage","getPageIndex","GetFirstPage","getLastPage","Math","max","getPageCount","setBase","baseVal","getBase","isFirst","isLast","ceil","setItemsPerPage","itemsPerPage","getItemsPerPage","setItemCount","itemCount","Number","MAX_VALUE","getItemCount","getOffset","getCountdownOffset","getLength","min","getIndexesPerPage","result","isNaN","x","push","getPagesWithDispersion","dispersion","currentPage","pageCount","numberOfPages","startingPage","endingPage","getPagesWithTrimDispersion","lastPage","getPagesWithUniformDistribution","step","round","defaultOptions","initialItemsPerPage","initialPage","itemsPerPageValues","pagesDispersion","cssClasses","pagingUl","itemsPerPageDiv","displayedItemsCountSpan","itemsPerPageUl","BasicPagingComponent","PagingAbstractComponent","pluginElement","changeDetector","gridPlugins","options","super","_paginator","displayedItemsCount","pages","itemsPerPageItems","_options","extend","optionsSet","firstItemIndex","offset","initialized","_initialized","_generatePages","_setDisplayedItemsCount","GRID_INITIALIZER","_generateItemsPerPage","totalCount","_totalCount","isActive","isDisabled","pageChange","emit","value","itemsPerPageChange","renderItemsPerPageText","toString","initialize","title","forEach","itm","displayedItems","isPresent","map","i0","GRID_PLUGIN_INSTANCES","PAGING_OPTIONS","i1","autoLoadData","debounceDataCallback","dataCallback","Promise","AsyncDataLoaderComponent","DataLoaderAbstractComponent","_result","data","_loadData","force","_checkChanges","_state","length","DataLoaderState","stateChange","_paging","_contentRenderer","ordering","invalidateVisuals","resultChange","DATA_LOADER_OPTIONS","BodyContentRendererAbstractComponent","_changeDetector","startingIndex","initOptions","PAGING","detectChanges","mergeStringClasses","classes","cls","TableBodyContentRendererComponent","BODY_CONTENT_RENDERER_OPTIONS","thead","thDefault","thOrderable","spanContent","spanOrdering","spanOrderingDirection","none","asc","desc","TableHeaderContentRendererComponent","_ordering","_gridInitializer","orderingChange","EventEmitter","deserializeSimpleOrdering","getOrdering","_initializeOrderingCss","setOrdering","serializeSimpleOrdering","resetMetadata","_resetOrdering","orderBy","metadata","columns","find","name","meta","orderByDirection","OrderByDirection","orderingClass","cssClass","HEADER_CONTENT_RENDERER_OPTIONS","ContentRendererAbstractComponent","headerRenderer","HEADER_CONTENT_RENDERER","containerDiv","ngOnDestroy","_metadataChangedSubscription","unsubscribe","_orderingChangedSubscription","_dataChangedSubscription","_invalidateVisuals","metadataSelector","METADATA_SELECTOR","_metadataSelector","metadataChange","subscribe","dataLoader","DATA_LOADER","_dataLoader","BODY_CONTENT_RENDERER","plugins","bodyRenderer","type","resolveForwardRef","instance","setBodyRendererComponent","instanceCallback","setHeaderRendererComponent","table","forwardRef","TableContentRendererComponent","CONTENT_RENDERER_OPTIONS","NoMetadataSelectorComponent","_gathererInitialized","metadataGatherer","_metadataGatherer","gatherer","show","getMetadata","texts","loading","noData","notLoaded","wrapperDiv","textSpan","SimpleNoDataRendererComponent","_stringLocalization","_texts","_stateChangedSubscription","_textsChangedSubscription","_processLoaderState","textsChange","_initTexts","state","text","Object","keys","key","get","STRING_LOCALIZATION","NO_DATA_RENDERER_OPTIONS","ROW_SELECTOR_OPTIONS","InjectionToken","getRowId","autoResetOnDataChange","multiSelection","getRowData","BasicRowSelectorComponent","selectedIds","selectedData","selectedChange","resetSelection","selectItem","item","select","isBlank","Error","id","index","indexOf","splice","isSelected","NoGridInitializerComponent","autoInitialize","pagingPosition","Bottom","paging","contentRenderer","noDataRenderer","rowSelector","gridInitializer","GridComponent","_pluginInstances","pagingType","gridInitializerType","dataLoaderType","contentRendererType","metadataSelectorType","noDataRendererType","rowSelectorType","_initializedSubject","BehaviorSubject","opts","_gridOptions","gridOptions","asObservable","ngOnInit","ngAfterViewInit","setPagingComponent","setGridInitializerComponent","setMetadataSelectorComponent","setDataLoaderComponent","setContentRendererComponent","CONTENT_RENDERER","setNoDataRendererComponent","NO_DATA_RENDERER","setRowSelectorComponent","next","getPlugin","pluginId","setGridPluginInstances","plugin","execute","actions","action","executeAndReturn","func","GRID_OPTIONS","PAGING_TYPE","GRID_INITIALIZER_TYPE","DATA_LOADER_TYPE","CONTENT_RENDERER_TYPE","METADATA_SELECTOR_TYPE","NO_DATA_RENDERER_TYPE","ROW_SELECTOR_TYPE","METADATA_GATHERER","provide","useFactory","BasicTableColumnContext","$implicit","column","rowIndex","BasicTableColumnComponent","titleVisible","visible","getColumnContext","BasicTableMetadataGathererComponent","toArray","ngAfterContentInit","changes","useExisting","_debounceSubject","Subject","_debounceSubscription","_pageChangedSubscription","_itemsPerPageChangedSubscription","_registerDebounce","loadData","_lastPage","_lastItemsPerPage","_lastOrdering","pipe","debounceTime"],"sourceRoot":""}