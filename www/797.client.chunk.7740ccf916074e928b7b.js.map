{"version":3,"file":"797.client.chunk.7740ccf916074e928b7b.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.model.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.html","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.html","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.ts","webpack://ng-universal-demo/../../../basic-components/src/dynamicItems/syncValues/metadata/syncValues.relationsMetadata.ts"],"sourcesContent":["import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()'\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * Sets value to select\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * Registers callback that is called when value of select changes\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * Registers callback that is called when select is closed\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n}\n","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\n\n/**\n * Rest relations options model\n */\nexport class SyncValuesRelationsOptionsModel implements SyncValuesRelationsOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public triggerSync: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public idleTimeout: number|undefined|null = 0;\n\n    /**\n     * @inheritdoc\n     */\n    public syncProperties: string[]|null|undefined;\n    \n    //######################### constructor #########################\n    constructor(value: SyncValuesRelationsOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\n/**\n * Component used for displaying configuration of sync property\n */\n@Component(\n{\n    selector: 'configure-sync-property',\n    templateUrl: 'configureSyncProperty.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureSyncPropertySAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is bound sync property name\n     */\n    protected control: FormControl<string> = new FormControl();\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) data: string,)\n    {\n        this.control.setValue(data);\n    }\n}",null,null,"import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup, NumberInputModule} from '@anglr/common/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\nimport {SyncValuesRelationsOptionsModel} from './syncValuesNode.model';\nimport {ConfigureSyncPropertySAComponent} from '../misc/components';\n\n/**\n * Sync values node component for negation\n */\n@Component(\n{\n    selector: 'sync-values-node',\n    templateUrl: 'syncValuesNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NumberInputModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncValuesNodeSAComponent extends RelationsNodeBase<SyncValuesRelationsOptions> implements RelationsNode<SyncValuesRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form that is being used\n     */\n    protected form: FormGroup<FormModelGroup<SyncValuesRelationsOptions>>;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n        super(changeDetector, element);\n\n        this.form = formModelBuilder.build<SyncValuesRelationsOptions>(new SyncValuesRelationsOptionsModel(null));\n        this.form.valueChanges.subscribe(value =>\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                extend(this.metadata.relationsOptions, value);\n\n                this.history.getNewState();\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new property\n     */\n    protected async addProperty(): Promise<void>\n    {\n        await this.configureSyncProperty(this.metadata?.relationsOptions?.syncProperties?.length ?? 0);\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Removes property\n     * @param index - Index of property to be removed\n     */\n    protected removeProperty(index: number): void\n    {\n        if(!this.metadata?.relationsOptions?.syncProperties)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.syncProperties.splice(index, 1);\n        this.history.getNewState();\n    }\n\n    /**\n     * Configures sync property\n     * @param index - Index of sync property to be configured\n     */\n    protected async configureSyncProperty(index: number): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<ConfigureSyncPropertySAComponent, string, string|undefined|null>(ConfigureSyncPropertySAComponent,\n        {\n            title: 'configure sync property',\n            width: '60vw',\n            data: this.metadata?.relationsOptions?.syncProperties?.[index] ?? ''\n        }).afterClosed());\n\n        if(isPresent(result) && this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.syncProperties ??= [];\n            this.metadata.relationsOptions.syncProperties[index] = result;\n            this.history.getNewState();\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        this.form.patchValue(this.metadata.relationsOptions);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {SyncValuesNodeSAComponent} from '../node/syncValuesNode.component';\n\n/**\n * Sync values relations metadata\n */\nexport class SyncValuesRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Sync values',\n        description: 'Sync values, allowing triggered changes run at once',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = SyncValuesNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","constructor","_renderer","_elementRef","onChange","_","onTouched","writeValue","value","this","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","i0","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","control","isNaN","max","isPresent","min","number","SyncValuesRelationsOptionsModel","triggerSync","idleTimeout","mapValuesToThis","ConfigureSyncPropertySAComponent","data","FormControl","setValue","TITLED_DIALOG_DATA","ReactiveFormsModule","i1","MatDialogModule","i2","SyncValuesNodeSAComponent","RelationsNodeBase","changeDetector","element","dialog","formModelBuilder","super","form","build","valueChanges","subscribe","metadata","relationsOptions","extend","history","getNewState","addProperty","configureSyncProperty","syncProperties","length","detectChanges","removeProperty","index","splice","result","lastValueFrom","open","title","width","afterClosed","_a","metadataSet","patchValue","FormModelBuilder","CommonModule","i3","i4","NumberInputModule","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","SyncValuesRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze"],"sourceRoot":""}