{"version":3,"file":"2908.client.chunk.71c80443ed845b51d34b.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/internal/operators/toArray.ts","webpack://ng-universal-demo/../../../src/plugins/dataLoader/sync/syncDataLoader.component.ts","webpack://ng-universal-demo/../../../src/internal/operators/reduce.ts","webpack://ng-universal-demo/../../../src/plugins/paging/no/noPaging.component.ts","webpack://ng-universal-demo/../../../extensions/src/extensions/setSyncData.ts","webpack://ng-universal-demo/./app/dynamicItems/gridTable/gridTable.metadata.ts","webpack://ng-universal-demo/./app/dynamicItems/gridTable/gridTable.component.html","webpack://ng-universal-demo/./app/dynamicItems/gridTable/gridTable.component.ts","webpack://ng-universal-demo/./app/dynamicItems/gridTable/type.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/layout/src/components/layoutComponentBase/layoutComponentBase.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/relations/src/extensions/relationsRegistration/relationsRegistration.extension.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.js","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/src/misc/dynamicItemExtensionBase.js"],"sourcesContent":[null,"import {Component, ChangeDetectionStrategy, Inject, Optional, ElementRef} from '@angular/core';\nimport {extend, OrderByDirection} from '@jscrpt/common';\nimport {from, Observable} from 'rxjs';\nimport {skip, take, toArray} from 'rxjs/operators';\n\nimport {SyncDataLoaderOptions, SyncDataLoader} from './syncDataLoader.interface';\nimport {DATA_LOADER_OPTIONS, DataLoaderState} from '../types';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {DataResponse} from '../dataLoader.interface';\nimport {DataLoaderAbstractComponent} from '../dataLoaderAbstract.component';\nimport {SimpleOrdering} from '../../contentRenderer';\n\n/**\n * Default options for sync data loader\n * @internal\n */\nconst defaultOptions: SyncDataLoaderOptions<any, SimpleOrdering> =\n{\n    autoLoadData: true,\n    debounceDataCallback: 30,\n    data: [],\n    orderData: (data: any[], ordering: SimpleOrdering) =>\n    {\n        if(!ordering)\n        {\n            return data;\n        }\n\n        return data.sort((a, b) =>\n        {\n            if(a[ordering.orderBy] < b[ordering.orderBy])\n            {\n                return ordering.orderByDirection == OrderByDirection.Ascending ? -1 : 1;\n            }\n            else if(a[ordering.orderBy] > b[ordering.orderBy])\n            {\n                return ordering.orderByDirection == OrderByDirection.Ascending ? 1 : -1;\n            }\n\n            return 0;\n        });\n    }\n};\n\n/**\n * Data loader that allows synchronous data loading\n *\n * @example\n * If you want to use this loader you have to provide all data you want to be displayed in grid\n *\n * You have to provide data at least\n * ``` typescript\n * var arrayOfItems: DataType[] = [];\n *\n * var gridOptions =\n * {\n *      plugins:\n *      {\n *          dataLoader:\n *          {\n *              type: SyncDataLoaderComponent,\n *              options: <SyncDataLoaderOptions<DataType, SimpleOrdering>>\n *              {\n *                  data: arrayOfItems\n *              }\n *          }\n *      }\n * };\n * ```\n * \n * You must set these options before end of sync call of `ngOnInit`, if you set it later you have to disable auto initialization of grid and initialize it manualy\n */\n@Component(\n{\n    selector: 'ng-sync-data-loader',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncDataLoaderComponent<TData = any, TOrdering = any> extends DataLoaderAbstractComponent<SyncDataLoaderOptions<TData, TOrdering>, TOrdering, DataResponse<TData>> implements SyncDataLoader<TData>\n{\n    //######################### private fields #########################\n\n    /**\n     * Current result of data loader\n     */\n    private _result?: DataResponse<TData> =\n    {\n        data: [],\n        totalCount: 0\n    };\n\n    //######################### public properties #########################\n\n    /**\n     * Current result of data loader\n     */\n    public get result(): DataResponse<TData>\n    {\n        return this._result;\n    }\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances,\n                @Inject(DATA_LOADER_OPTIONS) @Optional() options?: SyncDataLoaderOptions<TData, TOrdering>)\n    {\n        super(pluginElement, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### protected methodes - implements DataLoaderAbstractComponent #########################\n\n    /**\n     * Loads data from 'source'\n     * @param force - Indication that data should be reloaded even if nothing changed\n     */\n    protected async _loadData(force?: boolean)\n    {\n        if(!force && !this._checkChanges())\n        {\n            return;\n        }\n\n        let data = [...this._options.data];\n\n        this._state = (data && data.length) ? DataLoaderState.DataLoading : DataLoaderState.NoDataLoading;\n        this.stateChange.emit();\n\n        if(this._options.orderData)\n        {\n            data = this._options.orderData(data, this._contentRenderer.ordering);\n        }\n\n        data = await from(data)\n            .pipe(skip((this._paging.page - 1) * (isNaN(this._paging.itemsPerPage) ? 0 : this._paging.itemsPerPage)),\n                  isNaN(this._paging.itemsPerPage) ? ((source: Observable<TData>) => source) : take(this._paging.itemsPerPage),\n                  toArray())\n            .toPromise();\n\n        this._state = (data && data.length) ? DataLoaderState.Loaded : DataLoaderState.NoData;\n        this.stateChange.emit();\n\n        this._result =\n        {\n            data: data,\n            totalCount: this._options.data.length\n        };\n\n        this.resultChange.emit();\n    }\n}",null,"import {ChangeDetectionStrategy, Component, ElementRef, ChangeDetectorRef, Optional, Inject} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {PagingAbstractComponent} from '../pagingAbstract.component';\nimport {NoPagingOptions, NoPaging} from './noPaging.interface';\nimport {GridPluginInstances} from '../../../components/grid';\nimport {GRID_PLUGIN_INSTANCES} from '../../../components/grid/types';\nimport {PAGING_OPTIONS} from '../types';\n\n/**\n * Default options for paging\n * @internal\n */\nconst defaultOptions: NoPagingOptions =\n{\n    initialItemsPerPage: NaN,\n    initialPage: 1\n};\n\n/**\n * Component used for no paging\n */\n@Component(\n{\n    selector: 'ng-no-paging',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NoPagingComponent extends PagingAbstractComponent<any, NoPagingOptions> implements NoPaging\n{\n    /**\n     * Zero based index of first displayed item on page\n     */\n    public firstItemIndex: number = 0;\n\n    /**\n     * Gets or sets index of currently selected page\n     */\n    public page: number = 1;\n\n    /**\n     * Gets or sets number of items currently used for paging\n     */\n    public itemsPerPage: number = NaN;\n\n    /**\n     * Gets or sets number of all items that are paged with current filter criteria\n     */\n    public totalCount: number = null;\n\n    //######################### constructor #########################\n    constructor(pluginElement: ElementRef,\n                changeDetector: ChangeDetectorRef,\n                @Inject(GRID_PLUGIN_INSTANCES) @Optional() gridPlugins?: GridPluginInstances,\n                @Inject(PAGING_OPTIONS) @Optional() options?: NoPagingOptions)\n    {\n        super(pluginElement, changeDetector, gridPlugins);\n\n        this._options = extend(true, {}, defaultOptions, options);\n    }\n}","import {GridAction, DataLoader, DATA_LOADER} from '@anglr/grid';\nimport {isArray} from '@jscrpt/common';\n\n/**\n * Sets data for SyncDataLoader\n * @param data - data that should be replaced\n * @param force - Indication that data should be reloaded \n */\nexport function setSyncData(data: any[], force?: boolean): GridAction\n{\n    return grid =>\n    {\n        const dataLoader = grid.getPlugin<DataLoader>(DATA_LOADER);\n\n        dataLoader.options.data = isArray(data) ? data : [];\n        dataLoader.loadData(force);\n    };\n}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {GridTableComponentOptions} from './gridTable.options';\n\n/**\n * Grid table layout metadata loader\n */\nexport const GridTableLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridTableComponentOptions>> = async () => new (await import('./metadata/gridTable.layoutMetadata')).GridTableLayoutEditorMetadata();\n\n/**\n * Grid table relations metadata loader\n */\nexport const GridTableRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/gridTable.relationsMetadata')).GridTableRelationsEditorMetadata();\n","<ng-grid [gridOptions]=\"gridOptions\">\n    <basic-table-metadata>\n        <basic-table-column id=\"name\" name=\"name\" title=\"Name\"></basic-table-column>\n        <basic-table-column id=\"surname\" name=\"surname\" title=\"Surname\"></basic-table-column>\n        <basic-table-column id=\"email\" name=\"email\" title=\"E-mail\"></basic-table-column>\n\n        <basic-table-column id=\"detail\" title=\"detail\" [titleVisible]=\"false\">\n            <ng-template #bodyTemplate let-row>\n                <a [routerLink]=\"['../detail', row.id]\">detail</a>\n            </ng-template>\n        </basic-table-column>\n    </basic-table-metadata>\n</ng-grid>","import {Component, ChangeDetectionStrategy, SimpleChanges, ViewChild, AfterViewInit} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {Grid, GridComponent, GridModule, GridOptions, NoPagingComponent, SimpleOrdering, SyncDataLoaderComponent, SyncDataLoaderOptions} from '@anglr/grid';\nimport {setSyncData} from '@anglr/grid/extensions';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {GridTableComponentOptions} from './gridTable.options';\nimport {GridTableLayoutMetadataLoader, GridTableRelationsMetadataLoader} from './gridTable.metadata';\n\n/**\n * Component used for displaying grid table\n */\n@Component(\n{\n    selector: 'grid-table',\n    templateUrl: 'gridTable.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        GridModule,\n        RouterModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(GridTableRelationsMetadataLoader)\n@LayoutEditorMetadata(GridTableLayoutMetadataLoader)\nexport class GridTableSAComponent<TData = any> extends LayoutComponentBase<GridTableComponentOptions> implements LayoutComponent<GridTableComponentOptions>, AfterViewInit\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be displayed in grid\n     */\n    public data: TData[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of grid options\n     */\n    protected gridOptions: GridOptions =\n    {\n        plugins:\n        {\n            dataLoader:\n            {\n                //use sync data loader as grid data loader plugin\n                type: SyncDataLoaderComponent,\n                options: <SyncDataLoaderOptions<TData, SimpleOrdering>>\n                {\n                    //all data used in data loader\n                    data: [],\n                }\n            },\n            paging:\n            {\n                type: NoPagingComponent,\n            }\n        }\n    };\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of grid\n     */\n    @ViewChild(GridComponent)\n    protected grid: Grid|undefined|null;\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        if(this.data.length && this.grid)\n        {\n            this.grid.execute(setSyncData(this.data, true));\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        if(nameof<GridTableSAComponent>('data') in changes && this.grid)\n        {\n            this.grid.execute(setSyncData(this.data, true));\n        }\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {GridTableSAComponent} from './gridTable.component';\n\nexport default GridTableSAComponent;\n\n\nexport const extensions = [RelationsRegistrationExtension];","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\n\nexport function LayoutEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'layoutEditorMetadata');\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional } from '@angular/core';\nimport { LOGGER } from '@anglr/common';\nimport { isEmptyObject, nameof } from '@jscrpt/common';\nimport * as i0 from \"@angular/core\";\n/**\n * Base component for layout component\n */\n\nexport class LayoutComponentBase {\n  //######################### constructor #########################\n  constructor(changeDetector, componentElement, injector, logger) {\n    this.changeDetector = changeDetector;\n    this.componentElement = componentElement;\n    this.injector = injector;\n    this.logger = logger; //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n\n    this.extensions = [];\n    /**\n     * Indication whether initialization was already done\n     */\n\n    this.initialized = false;\n    /**\n     * Indication whether was component destroyed\n     */\n\n    this.destroyed = false;\n  } //######################### protected properties #########################\n\n  /**\n   * Gets element that is used within extension\n   */\n\n\n  get element() {\n    return this.componentElement;\n  }\n  /**\n   * Gets options that are used within extension\n   */\n\n\n  get extensionsOptions() {\n    return this.options;\n  } //######################### public methods - implementation of OnDestroy #########################\n\n  /**\n   * Called when component is destroyed\n   */\n\n\n  ngOnDestroy() {\n    if (this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n\n    for (const ext of this.extensions) {\n      ext.destroy();\n    }\n\n    this.onDestroy();\n  } //######################### public methods - implementation of LayoutComponent #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.initialized) {\n        return;\n      }\n\n      _this.initialized = true;\n      const extensionsOptions = _this.extensionsOptions;\n      yield _this.onInit();\n      yield _this.onOptionsSet();\n\n      if (extensionsOptions) {\n        for (const extension of _this.extensions) {\n          yield extension.initialize(_this.injector, _this.element, _this);\n        }\n      }\n\n      yield _this.afterInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  ngOnChanges(changes) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      //options has changed\n      if (nameof('options') in changes) {\n        yield _this2.onOptionsSet();\n        const extensionsOptions = _this2.extensionsOptions; //set options in extensions\n\n        if (extensionsOptions) {\n          for (const extension of _this2.extensions) {\n            yield extension.optionsChange(extensionsOptions);\n          }\n        }\n\n        if (!_this2.initialized) {\n          return;\n        }\n\n        yield _this2.onOptionsChange();\n      }\n\n      delete changes[nameof('options')];\n\n      if (!isEmptyObject(changes)) {\n        _this2.onChanges(changes);\n      }\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  registerExtensions(extensions) {\n    this.extensions = extensions;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  invalidateVisuals() {\n    this.changeDetector.detectChanges();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialzation of component, options are already set\n   */\n\n\n  onInit() {}\n  /**\n   * Called right after initialization finished, including extesions\n   */\n\n\n  afterInit() {}\n  /**\n   * Called on change of options, after initialization\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Occurs when some property changes on component\n   * @param _changes - Changes that occured on component\n   */\n\n\n  onChanges(_changes) {}\n  /**\n   * Called everytime options are set, after initialization and later\n   */\n\n\n  onOptionsSet() {}\n  /**\n   * Called when component is being destroyed\n   */\n\n\n  onDestroy() {}\n\n}\n\nLayoutComponentBase.ɵfac = function LayoutComponentBase_Factory(t) {\n  return new (t || LayoutComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(LOGGER, 8));\n};\n\nLayoutComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LayoutComponentBase,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LayoutComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOGGER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();","import { DynamicClassMetadata } from '@anglr/dynamic';\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\n\nexport function RelationsEditorMetadata(metadataLoader) {\n  return DynamicClassMetadata(metadataLoader, 'relationsEditorMetadata');\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { DynamicItemExtensionBase } from '@anglr/dynamic';\nimport { RelationsComponentManager, RelationsProcessor } from '../../services';\n/**\n * Extension that allows registration of component for relations\n */\n\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase {\n  constructor() {\n    //######################### protected properties #########################\n    super(...arguments);\n    /**\n     * Instance of relations processor\n     */\n\n    this.relationsProcessor = null;\n    /**\n     * Instance of component manager\n     */\n\n    this.componentManager = null;\n  } //######################### public methods - overrides #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  onInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.injector || !_this.metadata || !_this.instance) {\n        return;\n      }\n\n      _this.relationsProcessor ?? (_this.relationsProcessor = _this.injector.get(RelationsProcessor, null));\n      _this.componentManager ?? (_this.componentManager = _this.injector.get(RelationsComponentManager, null));\n\n      if (!_this.relationsProcessor || !_this.componentManager) {\n        return;\n      }\n\n      _this.componentManager.registerComponent(_this.metadata.id, _this.instance);\n\n      yield _this.relationsProcessor.initialized;\n\n      _this.relationsProcessor.updateRelations(_this.metadata.id);\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  onDestroy() {\n    if (!this.relationsProcessor || !this.componentManager || !this.metadata) {\n      return;\n    }\n\n    this.relationsProcessor.destroyComponent(this.metadata.id);\n    this.componentManager.unregisterComponent(this.metadata.id);\n  }\n\n}","//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata(metadataLoader, propertyName) {\n  if (ngDesignerMetadata) {\n    return function (target) {\n      target[propertyName] = metadataLoader();\n      return target;\n    };\n  }\n\n  return function (target) {\n    return target;\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Dynamic item extension base class\n */\nexport class DynamicItemExtensionBase {\n  //######################### constructor #########################\n  constructor(metadata) {\n    this.metadata = metadata;\n    /**\n     * Indication whether was extension initialized\n     */\n\n    this.initialized = false;\n  } //######################### public methods - implementation of DynamicItemExtension #########################\n\n  /**\n   * @inheritdoc\n   */\n\n\n  initialize(injector, element, instance) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.initialized = true;\n      _this.injector = injector;\n      _this.element = element;\n      _this.instance = instance;\n      yield _this.onInit();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  optionsChange(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.options = options;\n\n      if (!_this2.initialized) {\n        return;\n      }\n\n      yield _this2.onOptionsChange();\n    })();\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  destroy() {\n    this.onDestroy();\n  } //######################### protected methods #########################\n\n  /**\n   * Called on initialization of component\n   */\n\n\n  onInit() {}\n  /**\n   * Called on change of options of component\n   */\n\n\n  onOptionsChange() {}\n  /**\n   * Called on destruction of component\n   */\n\n\n  onDestroy() {}\n\n}"],"names":["arrReducer","arr","value","push","defaultOptions","autoLoadData","debounceDataCallback","data","orderData","ordering","sort","a","b","orderBy","orderByDirection","OrderByDirection","SyncDataLoaderComponent","DataLoaderAbstractComponent","constructor","pluginElement","gridPlugins","options","super","_result","totalCount","this","_options","extend","result","_loadData","force","_checkChanges","_state","length","DataLoaderState","stateChange","emit","_contentRenderer","from","pipe","skip","_paging","page","isNaN","itemsPerPage","source","take","operate","subscriber","accumulator","seed","scanInternals","arguments","reduce","subscribe","toPromise","resultChange","i0","GRID_PLUGIN_INSTANCES","DATA_LOADER_OPTIONS","initialItemsPerPage","NaN","initialPage","NoPagingComponent","PagingAbstractComponent","changeDetector","firstItemIndex","PAGING_OPTIONS","setSyncData","grid","dataLoader","getPlugin","DATA_LOADER","isArray","loadData","GridTableLayoutMetadataLoader","GridTableLayoutEditorMetadata","GridTableRelationsMetadataLoader","GridTableRelationsEditorMetadata","GridTableSAComponent","LayoutComponentBase","gridOptions","plugins","type","paging","ngAfterViewInit","execute","onChanges","changes","nameof","t","selectors","viewQuery","GridComponent","GridModule","i1","RouterModule","i2","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","apply","err","undefined","componentElement","injector","logger","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","_this2","optionsChange","onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","_changes","features","relationsProcessor","componentManager","metadata","instance","get","registerComponent","id","updateRelations","destroyComponent","unregisterComponent","DynamicClassMetadata","propertyName","target","DynamicItemExtensionBase"],"sourceRoot":""}