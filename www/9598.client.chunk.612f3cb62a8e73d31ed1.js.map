{"version":3,"file":"9598.client.chunk.612f3cb62a8e73d31ed1.js","mappings":"mVAMO,MAAMA,EAAqC,e,EAAA,G,EAA6D,mBAAY,WAAW,oEAAuDC,sCAAuC,E,+KAAA,kBAAlL,mCCO3C,IAAMC,EAAN,MAoCHC,YAAYC,GAER,MAAMC,EAAQD,EAASE,IAAIC,EAAAA,IAE3BF,EAAMG,OAAOC,WAAUD,GAAUE,KAAKF,OAASA,IAC/CH,EAAMM,KAAKF,WAAUE,IAEbC,QAAQC,IAAIF,GACZD,KAAKC,KAAOA,CAAI,GAE5B,CAOOG,oBAEP,IAzCAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,6DAMhBD,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,kEAMhBD,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,+DAMhBD,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,MAAe,0DAhCPd,GAAuB,UAFnCe,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBlB,IAAsC,6BAqCrCmB,EAAAA,KApCbjB,GCXb,S,mFCWM,SAAUc,EAAcI,GAE1B,OAAO,SAASC,EAAaC,GAEzB,MAAMC,EAAOD,EAEbE,OAAOC,eAAeJ,EACA,GAAGE,UACH,CACIjB,IAAK,WAOD,OALII,KAAK,IAAIa,aAETb,KAAK,IAAIa,WAAgB,IAAIG,EAAAA,GAG1BhB,KAAK,IAAIa,UACpB,IAG1BC,OAAOC,eAAeJ,EACAE,EACA,CACIjB,IAAK,WAED,OAAOI,KAAK,IAAIa,IACpB,EACAI,IAAK,SAASC,GAKV,GAHAlB,KAAK,IAAIa,KAAUK,GACnBC,EAAAA,EAAAA,IAAmBnB,KAAMa,GAEtBH,GAASU,KAERpB,KAAK,GAAGa,WAAcQ,WAG1B,CACI,MAAM3B,EAAYM,KAA+BsB,WAEjD,IAAI5B,EAEA,OAGJ,MAAM6B,EAAmB7B,EAASE,IAAI4B,EAAAA,GAChCC,EAAiB/B,EAASE,IAAI8B,EAAAA,GAC9BC,EAAKJ,EAAiBK,MAAM5B,MAElC,IAAI2B,EAEA,OAGJF,EAAeI,aACf,CACIC,YAAaH,EACbI,WAAYlB,G,CAGxB,IAGvBH,GAASsB,WAERC,EAAAA,EAAAA,IAAmBtB,EAAQE,EAEnC,CACJ,C","sources":["webpack://ng-universal-demo/./app/dynamicItems/activatedRoute/activatedRoute.metadata.ts","webpack://ng-universal-demo/./app/dynamicItems/activatedRoute/activatedRoute.relations.ts","webpack://ng-universal-demo/./app/dynamicItems/activatedRoute/type.ts","webpack://ng-universal-demo/../../../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Activated route relations metadata loader\n */\nexport const ActivatedRouteRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/activatedRoute.relationsMetadata')).ActivatedRouteRelationsEditorMetadata();\n","import {Injector} from '@angular/core';\nimport {ActivatedRoute, Data, Params} from '@angular/router';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ActivatedRouteRelationsMetadataLoader} from './activatedRoute.metadata';\nimport {ActivatedRouteRelationsOptions} from './activatedRoute.options';\n\n/**\n * Activated route relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(ActivatedRouteRelationsMetadataLoader)\nexport class ActivatedRouteRelations implements RelationsComponent<ActivatedRouteRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ActivatedRouteRelationsOptions|undefined|null;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * The matrix parameters scoped to this route.\n     */\n    @DynamicOutput()\n    public params: Params|undefined|null;\n\n    /**\n     * The query parameters shared by all the routes\n     */\n    @DynamicOutput()    \n    public queryParams: Params|undefined|null;\n\n    /**\n     * The URL fragment shared by all the routes\n     */\n    @DynamicOutput()    \n    public fragment: string|undefined|null;\n\n    /**\n     * The static and resolved data of this route\n     */\n    @DynamicOutput()    \n    public data: Data|undefined|null;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        const route = injector.get(ActivatedRoute);\n\n        route.params.subscribe(params => this.params = params);\n        route.data.subscribe(data =>\n            {\n                console.log(data);\n                this.data = data;\n            } );\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {ActivatedRouteRelations} from './activatedRoute.relations';\n\nexport default ActivatedRouteRelations;","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}"],"names":["ActivatedRouteRelationsMetadataLoader","ActivatedRouteRelationsEditorMetadata","ActivatedRouteRelations","constructor","injector","route","get","ActivatedRoute","params","subscribe","this","data","console","log","invalidateVisuals","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector","options","target","propertyKey","prop","Object","defineProperty","Subject","set","value","defineAssignedProp","sync","next","ɵɵinjector","componentManager","RelationsComponentManager","changeDetector","RelationsChangeDetector","id","getId","markForCheck","componentId","outputName","skipInit","defineSkipInitProp"],"sourceRoot":""}