{"version":3,"file":"2301.client.chunk.b73caa5b121e732e400d.js","mappings":"mMASM,MAAOA,EAGTC,YAAgDC,GAAA,KAAAA,QAAAA,CAE/C,CASMC,UAAkBC,EAA+CC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQF,GAEA,KAGRA,aAAiBG,EAAAA,GAETH,GAGXI,KAAKN,SAASO,KAAK,iDAEZ,KACV,E,iCA7BQT,GAAAA,EAAAA,EAGuBU,EAAAA,GAAMA,I,0CAH7BV,E,uGCJN,MAAMW,EAEXV,cAMEO,KAAKI,SAAW,CACdC,KAAM,OACNC,YAAa,0CACbC,MAAO,SACPC,gBAAiB,CACfC,mBAAoB,CAAC,CACnBC,UAAW,IACXC,mBAAoB,CAAC,SAQ3BX,KAAKY,cAAgB,CAACC,EAAUC,KAC9BA,EAAQC,SAAWF,CAAQ,EAO7Bb,KAAKgB,gBAAkBF,IAAYA,GAASC,SAM5Cf,KAAKiB,eAAiBH,GAAWA,GAASC,SAAW,CAACD,GAASC,UAAY,GAM3Ef,KAAKkB,iBAAmB,CAACC,EAAGL,KAC1BA,EAAQC,SAAW,IAAI,EAGzBK,OAAOC,OAAOrB,KAChB,E","sources":["webpack://ng-universal-demo/../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/es2020/basic-components/src/dynamicItems/listBlock/metadata/listBlock.layoutMetadata.js"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import { ComponentStylingModel, ComponentStylingPropertiesControlComponent } from '@anglr/dynamic/layout-editor';\n/**\n * List block layout metadata\n */\n\nexport class ListBlockLayoutEditorMetadata {\n  //######################### constructor #########################\n  constructor() {\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    this.metaInfo = {\n      name: 'List',\n      description: 'List block - displays template in array',\n      group: 'Layout',\n      optionsMetadata: {\n        propertiesMetadata: [{\n          modelType: ComponentStylingModel,\n          propertiesControls: [ComponentStylingPropertiesControlComponent]\n        }]\n      }\n    };\n    /**\n     * @inheritdoc\n     */\n\n    this.addDescendant = (metadata, options) => {\n      options.template = metadata;\n    };\n    /**\n     * @inheritdoc\n     */\n\n\n    this.canDropMetadata = options => !options?.template;\n    /**\n     * @inheritdoc\n     */\n\n\n    this.getDescendants = options => options?.template ? [options?.template] : [];\n    /**\n     * @inheritdoc\n     */\n\n\n    this.removeDescendant = (_, options) => {\n      options.template = null;\n    };\n\n    Object.freeze(this);\n  }\n\n}"],"names":["AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","ListBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","addDescendant","metadata","options","template","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze"],"sourceRoot":""}