{"version":3,"file":"2842.client.chunk.12746dd13862188950d5.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../../../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholder/placeholder.metadata.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholder/misc/pipes/containerMetadata/containerMetadata.pipe.ts","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholder/placeholder.component.ts","webpack://ng-universal-demo/./node_modules/@anglr/dynamic/layout-relations/src/dynamicItems/placeholder/placeholder.component.html","webpack://ng-universal-demo/../../../layout-relations/src/dynamicItems/placeholder/type.ts","webpack://ng-universal-demo/../../../layout-relations/src/misc/extensions/placeholderData.extension.ts","webpack://ng-universal-demo/../../../layout-relations/src/services/placeholderHandler/placeholderHandler.service.ts","webpack://ng-universal-demo/../../../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {PlaceholderComponentOptions} from './placeholder.options';\n\n/**\n * Placeholder layout metadata loader\n */\nexport const PlaceholderLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<PlaceholderComponentOptions>> = async () => new (await import('./metadata/placeholder.layoutMetadata')).PlaceholderLayoutEditorMetadata();\n\n/**\n * Placeholder layout designer type loader\n */\nexport const PlaceholderLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/placeholderDesigner.component')).PlaceholderDesignerSAComponent;\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {PlaceholderHandler} from '../../../../../services';\n\n/**\n * Gets container metadata that are displayed in placeholder\n */\n@Pipe({name: 'containerMetadata', standalone: true,})\nexport class ContainerMetadataSAPipe<TOptions = unknown> implements PipeTransform\n{\n    //######################### constructor #########################\n    constructor(protected placeholderHandler: PlaceholderHandler<TOptions>,)\n    {\n    }\n\n    //######################### public methods - implementation of ContainerMetadataSAPipe #########################\n\n    /**\n     * Gets container metadata that are displayed in placeholder\n     * @param value - Id of container\n     */\n    public transform(value: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this.placeholderHandler.getOptions(value);\n    }\n}","import {Component, ChangeDetectionStrategy, inject, FactoryProvider} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PlaceholderComponentOptions} from './placeholder.options';\nimport {PlaceholderLayoutDesignerTypeLoader, PlaceholderLayoutMetadataLoader} from './placeholder.metadata';\nimport {ComponentWithId} from '../../interfaces';\nimport {PlaceholderHandler} from '../../services';\nimport {PlaceholderContainerComponentOptions} from '../placeholderContainer';\nimport {ContainerMetadataSAPipe} from './misc/pipes';\n\n/**\n * Component used for displaying placeholder\n */\n@Component(\n{\n    selector: 'placeholder',\n    templateUrl: 'placeholder.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n        ContainerMetadataSAPipe,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(PlaceholderHandler).relationsComponentManager,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsManager,\n            useFactory: () => inject(PlaceholderHandler).relationsManager,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(PlaceholderHandler).relationsProcessor,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsChangeDetector,\n            useFactory: () => inject(PlaceholderHandler).relationsChangeDetector,\n        },\n        <FactoryProvider>\n        {\n            provide: PlaceholderHandler,\n            useFactory: () =>\n            {\n                return new PlaceholderHandler(PlaceholderSAComponent);\n            }\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(PlaceholderLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(PlaceholderLayoutMetadataLoader)\nexport class PlaceholderSAComponent extends LayoutComponentBase<PlaceholderComponentOptions> implements LayoutComponent<PlaceholderComponentOptions>, ComponentWithId\n{\n    //######################### protected properties #########################\n\n    /**\n     * Handler used for working with placeholder\n     */\n    protected placeholderHandler: PlaceholderHandler<PlaceholderContainerComponentOptions> = inject(PlaceholderHandler);\n\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public id: string = '';\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}",null,"import {IdSetterExtension} from '../../misc/extensions';\nimport {PlaceholderSAComponent} from './placeholder.component';\n\nexport default PlaceholderSAComponent;\n\nexport const extensions = [IdSetterExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Extension that sets id of component to instance of component\n */\nexport class IdSetterExtension extends DynamicItemExtensionBase<unknown, ComponentWithId> implements DynamicItemExtension<unknown, ComponentWithId>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {inject, Injector, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport type {CustomComponentSAComponent} from '../../dynamicItems/customComponent/customComponent.component';\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Service that handles storing, obtaining of placeholder configuration, also correct rendering of placeholder or placeholder container\n */\nexport class PlaceholderHandler<TOptions = unknown>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is this handler attached to placeholder or custom component\n     */\n    protected ɵisPlaceholder: boolean;\n\n    /**\n     * Indication whether is attached component in design mode\n     */\n    protected ɵdesignMode: boolean|undefined|null;\n\n    /**\n     * Id of attached component\n     */\n    protected ɵid: string|undefined|null;\n\n    /**\n     * Instance of parent placeholder handler\n     */\n    protected ɵparent: PlaceholderHandler<TOptions>|undefined|null = inject(PlaceholderHandler, {optional: true, skipSelf: true,});\n\n    /**\n     * Injector that is assigned with placeholder handler\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Gets id of attached component\n     */\n    protected get id(): string\n    {\n        return (this.ɵid ??= this.injector.get(this.componentWithIdType).id);\n    }\n\n    /**\n     * Gets indication whether is this handler attached to custom component\n     */\n    protected get isCustomComponent(): boolean\n    {\n        return !this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets indication whether is this handler attached to placeholder\n     */\n    protected get isPlaceholder(): boolean\n    {\n        return this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets nearest handler for custom component\n     */\n    protected get nearestCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets nearest handler for custom component that is in design mode\n     */\n    protected get nearestDesignCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent && handler.designMode)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets instance of parent placeholder handler\n     */\n    public get parent(): PlaceholderHandler<TOptions>|undefined|null\n    {\n        return this.ɵparent;\n    }\n\n    /**\n     * Gets indication whether is attached component in design mode\n     */\n    public get designMode(): boolean\n    {\n        return (this.ɵdesignMode ??= this.ɵisPlaceholder ? \n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {optional: true}) :\n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true,}));\n    }\n\n    /**\n     * Gets indication whether display placeholder container or just placeholder\n     */\n    public get placeholderContainer(): boolean\n    {\n        return !(!this.parent || (this.parent.isPlaceholder && this.parent.designMode));\n    }\n\n    /**\n     * Gets layout designer component transform function\n     */\n    public get layoutDesignerComponentTransform(): LayoutComponentTransform|null\n    {\n        //current transform\n        const transform = this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true});\n\n        //current or parent custom component transform\n        const result = transform ??\n            this.findRelatedCustomComponentHandler()?.injector?.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true}) ??\n            null;\n\n        return result;\n    }\n\n    /**\n     * Relations component manager instance that is used for placeholders\n     */\n    public get relationsComponentManager(): RelationsComponentManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsComponentManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations processor instance that is used for placeholders\n     */\n    public get relationsProcessor(): RelationsProcessor|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsProcessor, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations change detector instance that is used for placeholders\n     */\n    public get relationsChangeDetector(): RelationsChangeDetector|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsChangeDetector, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations manager instance that is used for placeholders\n     */\n    public get relationsManager(): RelationsManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    //######################### constructor #########################\n    constructor(protected componentWithIdType: Type<ComponentWithId>,\n                protected customComponent?: CustomComponentSAComponent,)\n    {\n        this.ɵisPlaceholder = !this.customComponent;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets options for placeholder using its id\n     * @param id - Id of placeholder for which are options obtained\n     */\n    public getOptions(id: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        //is placeholder\n        if(this.isPlaceholder)\n        {\n            if(!this.parent)\n            {\n                return null;\n            }\n\n            return this.parent.getOptions(id);\n        }\n\n        if(this.isCustomComponent && this.customComponent?.options?.placeholderContainers?.[id])\n        {\n            return this.customComponent.options.placeholderContainers[id];\n        }\n\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        return this.parent.getOptions(id);\n    }\n\n    /**\n     * Initialize options for placeholder container\n     */\n    public initOptions(): void\n    {\n        const custom = this.nearestDesignCustomComponent;\n\n        if(!custom?.designMode || !custom.customComponent)\n        {\n            this.logger.error('PlaceholderHandler: closes parent custom component should be in editation mode!');\n\n            return;\n        }\n\n        if(!custom.customComponent.options)\n        {\n            this.logger.error('PlaceholderHandler: missing custom component options!');\n\n            return;\n        }\n\n        //if options does not exists create new one\n        if(!custom.customComponent.options.placeholderContainers?.[this.id])\n        {\n            const containerId = `placeholderContainer-${custom.id}-${this.id}`;\n\n            custom.customComponent.options.placeholderContainers ??= {};\n            custom.customComponent.options.placeholderContainers[this.id] =\n            {\n                id: containerId,\n                name: 'placeholderContainer',\n                package: 'custom-components',\n                displayName: containerId,\n                options: {},\n            };\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Finds if there is any related handler with attached custom component\n     */\n    protected findRelatedCustomComponentHandler(): PlaceholderHandler|undefined|null\n    {\n        let placeholders = 0;\n        let customComponents = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler = this;\n\n        if(!handler.parent)\n        {\n            return null;\n        }\n\n        do\n        {\n            if(handler.parent.isCustomComponent && handler.parent.designMode)\n            {\n                if(placeholders == customComponents)\n                {\n                    return handler.parent;\n                }\n\n                return null;\n            }\n\n            if(handler.parent.isCustomComponent)\n            {\n                customComponents++;\n            }\n            else\n            {\n                placeholders++;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets handler, which is attached to custom component which owns this placeholder container\n     */\n    protected getParentCustomComponentHandler(): PlaceholderHandler<TOptions>|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler<TOptions> = this;\n\n        if(!handler.parent)\n        {\n            throw new Error('PlaceholderHandler: parent must be present to work with relations!');\n        }\n\n        do\n        {\n            //skip placeholder\n            if(handler.isPlaceholder)\n            {\n                continue;\n            }\n\n            if(handler.customComponent?.options?.placeholderContainers?.[this.id])\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        this.logger.error('PlaceholderHandler: unable to find owning custom component for {@id}', this.id);\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","PlaceholderLayoutMetadataLoader","PlaceholderLayoutEditorMetadata","PlaceholderLayoutDesignerTypeLoader","PlaceholderDesignerSAComponent","ContainerMetadataSAPipe","constructor","placeholderHandler","transform","value","this","getOptions","PlaceholderSAComponent","LayoutComponentBase","inject","PlaceholderHandler","id","setId","provide","RelationsComponentManager","useFactory","relationsComponentManager","RelationsManager","relationsManager","RelationsProcessor","relationsProcessor","RelationsChangeDetector","relationsChangeDetector","PlaceholderSAComponent_1","LayoutComponentRendererSADirective","extensions","IdSetterExtension","DynamicItemExtensionBase","onInit","instance","metadata","ɵid","injector","get","componentWithIdType","isCustomComponent","ɵisPlaceholder","isPlaceholder","nearestCustomComponent","handler","parent","nearestDesignCustomComponent","designMode","ɵparent","ɵdesignMode","LAYOUT_COMPONENT_TRANSFORM","optional","skipSelf","placeholderContainer","layoutDesignerComponentTransform","findRelatedCustomComponentHandler","getParentCustomComponentHandler","undefined","customComponent","Injector","logger","LOGGER","options","placeholderContainers","initOptions","custom","containerId","name","package","displayName","error","placeholders","customComponents","Error","element","componentElement","extensionsOptions","changeDetector","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes"],"sourceRoot":""}